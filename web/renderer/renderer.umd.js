var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
(function(global2, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(require("react"), require("vue")) : typeof define === "function" && define.amd ? define(["react", "vue"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.react, global2.vue));
})(this, function(React, vue) {
  var _a, _f, _g, _h, _i, _j, _k, _l, _m;
  "use strict";
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs$1(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function isObject$9(value) {
    var type2 = typeof value;
    return value != null && (type2 == "object" || type2 == "function");
  }
  var isObject_1 = isObject$9;
  const isObject$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(isObject_1);
  window.uni || (window.uni = {});
  const toast$2 = "";
  const extend = Object.assign;
  const hasOwnProperty$b = Object.prototype.hasOwnProperty;
  const hasOwn$1 = (val, key) => hasOwnProperty$b.call(val, key);
  const isArray$a = Array.isArray;
  const isFunction$3 = (val) => typeof val === "function";
  const isString$1 = (val) => typeof val === "string";
  const isObject$8 = (val) => val !== null && typeof val === "object";
  const isPromise = (val) => {
    return isObject$8(val) && isFunction$3(val.then) && isFunction$3(val.catch);
  };
  const objectToString$2 = Object.prototype.toString;
  const toTypeString = (value) => objectToString$2.call(value);
  const isPlainObject = (val) => toTypeString(val) === "[object Object]";
  const cacheStringFunction = (fn) => {
    const cache = /* @__PURE__ */ Object.create(null);
    return (str) => {
      const hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  };
  const hyphenateRE = /\B([A-Z])/g;
  const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
  const LINEFEED = "\n";
  const UNI_STORAGE_LOCALE = "UNI_LOCALE";
  const PRIMARY_COLOR = "#007aff";
  const SCHEME_RE = /^([a-z-]+:)?\/\//i;
  const DATA_RE = /^data:.*,.*/;
  const ON_HIDE = "onHide";
  const ON_THEME_CHANGE = "onThemeChange";
  const ON_UNLOAD = "onUnload";
  const ON_BACK_PRESS = "onBackPress";
  const ON_NAVIGATION_BAR_CHANGE = "onNavigationBarChange";
  function isComponentInternalInstance(vm) {
    return !!vm.appContext;
  }
  function resolveComponentInstance(instance) {
    return instance && (isComponentInternalInstance(instance) ? instance.proxy : instance);
  }
  function getLen(str = "") {
    return ("" + str).replace(/[^\x00-\xff]/g, "**").length;
  }
  function hasLeadingSlash(str) {
    return str.indexOf("/") === 0;
  }
  function addLeadingSlash(str) {
    return hasLeadingSlash(str) ? str : "/" + str;
  }
  function removeLeadingSlash(str) {
    return hasLeadingSlash(str) ? str.slice(1) : str;
  }
  const invokeArrayFns = (fns, arg) => {
    let ret;
    for (let i = 0; i < fns.length; i++) {
      ret = fns[i](arg);
    }
    return ret;
  };
  function updateElementStyle(element, styles) {
    for (const attrName in styles) {
      element.style[attrName] = styles[attrName];
    }
  }
  function once(fn, ctx = null) {
    let res;
    return (...args) => {
      if (fn) {
        res = fn.apply(ctx, args);
        fn = null;
      }
      return res;
    };
  }
  function callOptions(options, data) {
    options = options || {};
    if (isString$1(data)) {
      data = {
        errMsg: data
      };
    }
    if (/:ok$/.test(data.errMsg)) {
      if (isFunction$3(options.success)) {
        options.success(data);
      }
    } else {
      if (isFunction$3(options.fail)) {
        options.fail(data);
      }
    }
    if (isFunction$3(options.complete)) {
      options.complete(data);
    }
  }
  function sortObject(obj) {
    let sortObj = {};
    if (isPlainObject(obj)) {
      Object.keys(obj).sort().forEach((key) => {
        const _key = key;
        sortObj[_key] = obj[_key];
      });
    }
    return !Object.keys(sortObj) ? obj : sortObj;
  }
  function getCustomDataset(el) {
    return extend({}, el.dataset, el.__uniDataset);
  }
  function passive(passive2) {
    return { passive: passive2 };
  }
  function normalizeTarget(el) {
    const { id: id2, offsetTop, offsetLeft } = el;
    return {
      id: id2,
      dataset: getCustomDataset(el),
      offsetTop,
      offsetLeft
    };
  }
  function decode(text2) {
    try {
      return decodeURIComponent("" + text2);
    } catch (err) {
    }
    return "" + text2;
  }
  const PLUS_RE = /\+/g;
  function parseQuery(search) {
    const query = {};
    if (search === "" || search === "?")
      return query;
    const hasLeadingIM = search[0] === "?";
    const searchParams = (hasLeadingIM ? search.slice(1) : search).split("&");
    for (let i = 0; i < searchParams.length; ++i) {
      const searchParam = searchParams[i].replace(PLUS_RE, " ");
      let eqPos = searchParam.indexOf("=");
      let key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
      let value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
      if (key in query) {
        let currentValue = query[key];
        if (!isArray$a(currentValue)) {
          currentValue = query[key] = [currentValue];
        }
        currentValue.push(value);
      } else {
        query[key] = value;
      }
    }
    return query;
  }
  function parseUrl(url2) {
    const [path, querystring] = url2.split("?", 2);
    return {
      path,
      query: parseQuery(querystring || "")
    };
  }
  function debounce$1(fn, delay, { clearTimeout: clearTimeout2, setTimeout: setTimeout2 }) {
    let timeout2;
    const newFn = function() {
      clearTimeout2(timeout2);
      const timerFn = () => fn.apply(this, arguments);
      timeout2 = setTimeout2(timerFn, delay);
    };
    newFn.cancel = function() {
      clearTimeout2(timeout2);
    };
    return newFn;
  }
  class EventChannel {
    constructor(id2, events) {
      this.id = id2;
      this.listener = {};
      this.emitCache = [];
      if (events) {
        Object.keys(events).forEach((name) => {
          this.on(name, events[name]);
        });
      }
    }
    emit(eventName, ...args) {
      const fns = this.listener[eventName];
      if (!fns) {
        return this.emitCache.push({
          eventName,
          args
        });
      }
      fns.forEach((opt) => {
        opt.fn.apply(opt.fn, args);
      });
      this.listener[eventName] = fns.filter((opt) => opt.type !== "once");
    }
    on(eventName, fn) {
      this._addListener(eventName, "on", fn);
      this._clearCache(eventName);
    }
    once(eventName, fn) {
      this._addListener(eventName, "once", fn);
      this._clearCache(eventName);
    }
    off(eventName, fn) {
      const fns = this.listener[eventName];
      if (!fns) {
        return;
      }
      if (fn) {
        for (let i = 0; i < fns.length; ) {
          if (fns[i].fn === fn) {
            fns.splice(i, 1);
            i--;
          }
          i++;
        }
      } else {
        delete this.listener[eventName];
      }
    }
    _clearCache(eventName) {
      for (let index2 = 0; index2 < this.emitCache.length; index2++) {
        const cache = this.emitCache[index2];
        const _name = eventName ? cache.eventName === eventName ? eventName : null : cache.eventName;
        if (!_name)
          continue;
        const location = this.emit.apply(this, [_name, ...cache.args]);
        if (typeof location === "number") {
          this.emitCache.pop();
          continue;
        }
        this.emitCache.splice(index2, 1);
        index2--;
      }
    }
    _addListener(eventName, type2, fn) {
      (this.listener[eventName] || (this.listener[eventName] = [])).push({
        fn,
        type: type2
      });
    }
  }
  const E = function() {
  };
  E.prototype = {
    on: function(name, callback, ctx) {
      var e2 = this.e || (this.e = {});
      (e2[name] || (e2[name] = [])).push({
        fn: callback,
        ctx
      });
      return this;
    },
    once: function(name, callback, ctx) {
      var self2 = this;
      function listener() {
        self2.off(name, listener);
        callback.apply(ctx, arguments);
      }
      listener._ = callback;
      return this.on(name, listener, ctx);
    },
    emit: function(name) {
      var data = [].slice.call(arguments, 1);
      var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
      var i = 0;
      var len = evtArr.length;
      for (i; i < len; i++) {
        evtArr[i].fn.apply(evtArr[i].ctx, data);
      }
      return this;
    },
    off: function(name, callback) {
      var e2 = this.e || (this.e = {});
      var evts = e2[name];
      var liveEvents = [];
      if (evts && callback) {
        for (var i = 0, len = evts.length; i < len; i++) {
          if (evts[i].fn !== callback && evts[i].fn._ !== callback)
            liveEvents.push(evts[i]);
        }
      }
      liveEvents.length ? e2[name] = liveEvents : delete e2[name];
      return this;
    }
  };
  var E$1 = E;
  const borderStyles = {
    black: "rgba(0,0,0,0.4)",
    white: "rgba(255,255,255,0.4)"
  };
  function normalizeTabBarStyles(borderStyle) {
    if (borderStyle && borderStyle in borderStyles) {
      return borderStyles[borderStyle];
    }
    return borderStyle;
  }
  function normalizeTitleColor(titleColor) {
    return titleColor === "black" ? "#000000" : "#ffffff";
  }
  function normalizeStyles(pageStyle, themeConfig = {}, mode = "light") {
    const modeStyle = themeConfig[mode];
    const styles = {};
    if (!modeStyle) {
      return pageStyle;
    }
    Object.keys(pageStyle).forEach((key) => {
      let styleItem = pageStyle[key];
      styles[key] = (() => {
        if (isPlainObject(styleItem)) {
          return normalizeStyles(styleItem, themeConfig, mode);
        } else if (isArray$a(styleItem)) {
          return styleItem.map((item) => isPlainObject(item) ? normalizeStyles(item, themeConfig, mode) : item);
        } else if (isString$1(styleItem) && styleItem.startsWith("@")) {
          const _key = styleItem.replace("@", "");
          let _styleItem = modeStyle[_key] || styleItem;
          switch (key) {
            case "titleColor":
              _styleItem = normalizeTitleColor(_styleItem);
              break;
            case "borderStyle":
              _styleItem = normalizeTabBarStyles(_styleItem);
              break;
          }
          return _styleItem;
        }
        return styleItem;
      })();
    });
    return styles;
  }
  const isObject$7 = (val) => val !== null && typeof val === "object";
  const defaultDelimiters = ["{", "}"];
  class BaseFormatter {
    constructor() {
      this._caches = /* @__PURE__ */ Object.create(null);
    }
    interpolate(message, values, delimiters = defaultDelimiters) {
      if (!values) {
        return [message];
      }
      let tokens = this._caches[message];
      if (!tokens) {
        tokens = parse(message, delimiters);
        this._caches[message] = tokens;
      }
      return compile(tokens, values);
    }
  }
  const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
  const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
  function parse(format2, [startDelimiter, endDelimiter]) {
    const tokens = [];
    let position = 0;
    let text2 = "";
    while (position < format2.length) {
      let char = format2[position++];
      if (char === startDelimiter) {
        if (text2) {
          tokens.push({ type: "text", value: text2 });
        }
        text2 = "";
        let sub = "";
        char = format2[position++];
        while (char !== void 0 && char !== endDelimiter) {
          sub += char;
          char = format2[position++];
        }
        const isClosed = char === endDelimiter;
        const type2 = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
        tokens.push({ value: sub, type: type2 });
      } else {
        text2 += char;
      }
    }
    text2 && tokens.push({ type: "text", value: text2 });
    return tokens;
  }
  function compile(tokens, values) {
    const compiled = [];
    let index2 = 0;
    const mode = Array.isArray(values) ? "list" : isObject$7(values) ? "named" : "unknown";
    if (mode === "unknown") {
      return compiled;
    }
    while (index2 < tokens.length) {
      const token = tokens[index2];
      switch (token.type) {
        case "text":
          compiled.push(token.value);
          break;
        case "list":
          compiled.push(values[parseInt(token.value, 10)]);
          break;
        case "named":
          if (mode === "named") {
            compiled.push(values[token.value]);
          }
          break;
      }
      index2++;
    }
    return compiled;
  }
  const LOCALE_ZH_HANS = "zh-Hans";
  const LOCALE_ZH_HANT = "zh-Hant";
  const LOCALE_EN = "en";
  const LOCALE_FR = "fr";
  const LOCALE_ES = "es";
  const hasOwnProperty$a = Object.prototype.hasOwnProperty;
  const hasOwn = (val, key) => hasOwnProperty$a.call(val, key);
  const defaultFormatter = new BaseFormatter();
  function include(str, parts) {
    return !!parts.find((part) => str.indexOf(part) !== -1);
  }
  function startsWith(str, parts) {
    return parts.find((part) => str.indexOf(part) === 0);
  }
  function normalizeLocale(locale, messages2) {
    if (!locale) {
      return;
    }
    locale = locale.trim().replace(/_/g, "-");
    if (messages2 && messages2[locale]) {
      return locale;
    }
    locale = locale.toLowerCase();
    if (locale === "chinese") {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf("zh") === 0) {
      if (locale.indexOf("-hans") > -1) {
        return LOCALE_ZH_HANS;
      }
      if (locale.indexOf("-hant") > -1) {
        return LOCALE_ZH_HANT;
      }
      if (include(locale, ["-tw", "-hk", "-mo", "-cht"])) {
        return LOCALE_ZH_HANT;
      }
      return LOCALE_ZH_HANS;
    }
    let locales = [LOCALE_EN, LOCALE_FR, LOCALE_ES];
    if (messages2 && Object.keys(messages2).length > 0) {
      locales = Object.keys(messages2);
    }
    const lang = startsWith(locale, locales);
    if (lang) {
      return lang;
    }
  }
  class I18n {
    constructor({ locale, fallbackLocale, messages: messages2, watcher, formater }) {
      this.locale = LOCALE_EN;
      this.fallbackLocale = LOCALE_EN;
      this.message = {};
      this.messages = {};
      this.watchers = [];
      if (fallbackLocale) {
        this.fallbackLocale = fallbackLocale;
      }
      this.formater = formater || defaultFormatter;
      this.messages = messages2 || {};
      this.setLocale(locale || LOCALE_EN);
      if (watcher) {
        this.watchLocale(watcher);
      }
    }
    setLocale(locale) {
      const oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      if (oldLocale !== this.locale) {
        this.watchers.forEach((watcher) => {
          watcher(this.locale, oldLocale);
        });
      }
    }
    getLocale() {
      return this.locale;
    }
    watchLocale(fn) {
      const index2 = this.watchers.push(fn) - 1;
      return () => {
        this.watchers.splice(index2, 1);
      };
    }
    add(locale, message, override = true) {
      const curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else {
          Object.keys(message).forEach((key) => {
            if (!hasOwn(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else {
        this.messages[locale] = message;
      }
    }
    f(message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join("");
    }
    t(key, locale, values) {
      let message = this.message;
      if (typeof locale === "string") {
        locale = normalizeLocale(locale, this.messages);
        locale && (message = this.messages[locale]);
      } else {
        values = locale;
      }
      if (!hasOwn(message, key)) {
        console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
        return key;
      }
      return this.formater.interpolate(message[key], values).join("");
    }
  }
  function getDefaultLocale() {
    if (typeof uni !== "undefined" && getLocale) {
      return getLocale();
    }
    if (typeof global !== "undefined" && global.getLocale) {
      return global.getLocale();
    }
    return LOCALE_EN;
  }
  function initVueI18n(locale, messages2 = {}, fallbackLocale, watcher) {
    if (typeof locale !== "string") {
      [locale, messages2] = [
        messages2,
        locale
      ];
    }
    if (typeof locale !== "string") {
      locale = getDefaultLocale();
    }
    if (typeof fallbackLocale !== "string") {
      fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
    }
    const i18n2 = new I18n({
      locale,
      fallbackLocale,
      messages: messages2,
      watcher
    });
    let t2 = (key, values) => {
      if (typeof getApp$1 !== "function") {
        t2 = function(key2, values2) {
          return i18n2.t(key2, values2);
        };
      } else {
        t2 = function(key2, values2) {
          getApp$1().$vm;
          return i18n2.t(key2, values2);
        };
      }
      return t2(key, values);
    };
    return {
      i18n: i18n2,
      f(message, values, delimiters) {
        return i18n2.f(message, values, delimiters);
      },
      t(key, values) {
        return t2(key, values);
      },
      add(locale2, message, override = true) {
        return i18n2.add(locale2, message, override);
      },
      watch(fn) {
        return i18n2.watchLocale(fn);
      },
      getLocale() {
        return i18n2.getLocale();
      },
      setLocale(newLocale) {
        return i18n2.setLocale(newLocale);
      }
    };
  }
  /*!
    * vue-router v4.3.2
    * (c) 2024 Eduardo San Martin Morote
    * @license MIT
    */
  var NavigationType;
  (function(NavigationType2) {
    NavigationType2["pop"] = "pop";
    NavigationType2["push"] = "push";
  })(NavigationType || (NavigationType = {}));
  var NavigationDirection;
  (function(NavigationDirection2) {
    NavigationDirection2["back"] = "back";
    NavigationDirection2["forward"] = "forward";
    NavigationDirection2["unknown"] = "";
  })(NavigationDirection || (NavigationDirection = {}));
  const NavigationFailureSymbol = Symbol("");
  var NavigationFailureType;
  (function(NavigationFailureType2) {
    NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
    NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
    NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
  })(NavigationFailureType || (NavigationFailureType = {}));
  function isNavigationFailure(error2, type2) {
    return error2 instanceof Error && NavigationFailureSymbol in error2 && (type2 == null || !!(error2.type & type2));
  }
  const isEnableLocale = /* @__PURE__ */ once(
    () => typeof __uniConfig !== "undefined" && __uniConfig.locales && !!Object.keys(__uniConfig.locales).length
  );
  let i18n;
  function useI18n() {
    if (!i18n) {
      let locale;
      {
        {
          locale = navigator.cookieEnabled && window.localStorage && localStorage[UNI_STORAGE_LOCALE] || __uniConfig.locale || navigator.language;
        }
      }
      i18n = initVueI18n(locale);
      if (isEnableLocale()) {
        const localeKeys = Object.keys(__uniConfig.locales || {});
        if (localeKeys.length) {
          localeKeys.forEach(
            (locale2) => i18n.add(locale2, __uniConfig.locales[locale2])
          );
        }
        i18n.setLocale(locale);
      }
    }
    return i18n;
  }
  function normalizeMessages(module2, keys2, values) {
    return keys2.reduce((res, name, index2) => {
      res[module2 + name] = values[index2];
      return res;
    }, {});
  }
  const initI18nShowToastMsgsOnce = /* @__PURE__ */ once(() => {
    const name = "uni.showToast.";
    const keys2 = ["unpaired"];
    {
      useI18n().add(
        LOCALE_EN,
        normalizeMessages(name, keys2, [
          "Please note showToast must be paired with hideToast"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ES,
        normalizeMessages(name, keys2, [
          "Tenga en cuenta que showToast debe estar emparejado con hideToast"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_FR,
        normalizeMessages(name, keys2, [
          "Veuillez noter que showToast doit être associé à hideToast"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANS,
        normalizeMessages(name, keys2, [
          "请注意 showToast 与 hideToast 必须配对使用"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANT,
        normalizeMessages(name, keys2, [
          "請注意 showToast 與 hideToast 必須配對使用"
        ]),
        false
      );
    }
  });
  const initI18nShowLoadingMsgsOnce = /* @__PURE__ */ once(() => {
    const name = "uni.showLoading.";
    const keys2 = ["unpaired"];
    {
      useI18n().add(
        LOCALE_EN,
        normalizeMessages(name, keys2, [
          "Please note showLoading must be paired with hideLoading"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ES,
        normalizeMessages(name, keys2, [
          "Tenga en cuenta que showLoading debe estar emparejado con hideLoading"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_FR,
        normalizeMessages(name, keys2, [
          "Veuillez noter que showLoading doit être associé à hideLoading"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANS,
        normalizeMessages(name, keys2, [
          "请注意 showLoading 与 hideLoading 必须配对使用"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANT,
        normalizeMessages(name, keys2, [
          "請注意 showLoading 與 hideLoading 必須配對使用"
        ]),
        false
      );
    }
  });
  const initI18nShowModalMsgsOnce = /* @__PURE__ */ once(() => {
    const name = "uni.showModal.";
    const keys2 = ["cancel", "confirm"];
    {
      useI18n().add(
        LOCALE_EN,
        normalizeMessages(name, keys2, ["Cancel", "OK"]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ES,
        normalizeMessages(name, keys2, ["Cancelar", "OK"]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_FR,
        normalizeMessages(name, keys2, ["Annuler", "OK"]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANS,
        normalizeMessages(name, keys2, ["取消", "确定"]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANT,
        normalizeMessages(name, keys2, ["取消", "確定"]),
        false
      );
    }
  });
  const initI18nChooseFileMsgsOnce = /* @__PURE__ */ once(() => {
    const name = "uni.chooseFile.";
    const keys2 = ["notUserActivation"];
    {
      useI18n().add(
        LOCALE_EN,
        normalizeMessages(name, keys2, [
          "File chooser dialog can only be shown with a user activation"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ES,
        normalizeMessages(name, keys2, [
          "El cuadro de diálogo del selector de archivos solo se puede mostrar con la activación del usuario"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_FR,
        normalizeMessages(name, keys2, [
          "La boîte de dialogue du sélecteur de fichier ne peut être affichée qu'avec une activation par l'utilisateur"
        ]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANS,
        normalizeMessages(name, keys2, ["文件选择器对话框只能在由用户激活时显示"]),
        false
      );
    }
    {
      useI18n().add(
        LOCALE_ZH_HANT,
        normalizeMessages(name, keys2, ["文件選擇器對話框只能在由用戶激活時顯示"]),
        false
      );
    }
  });
  function initBridge(subscribeNamespace) {
    const emitter2 = new E$1();
    return {
      on(event, callback) {
        return emitter2.on(event, callback);
      },
      once(event, callback) {
        return emitter2.once(event, callback);
      },
      off(event, callback) {
        return emitter2.off(event, callback);
      },
      emit(event, ...args) {
        return emitter2.emit(event, ...args);
      },
      subscribe(event, callback, once2 = false) {
        emitter2[once2 ? "once" : "on"](`${subscribeNamespace}.${event}`, callback);
      },
      unsubscribe(event, callback) {
        emitter2.off(`${subscribeNamespace}.${event}`, callback);
      },
      subscribeHandler(event, args, pageId) {
        emitter2.emit(`${subscribeNamespace}.${event}`, args, pageId);
      }
    };
  }
  const INVOKE_VIEW_API = "invokeViewApi";
  const INVOKE_SERVICE_API = "invokeServiceApi";
  let invokeServiceMethodId = 1;
  const invokeServiceMethod = (name, args, callback) => {
    const { subscribe, publishHandler } = UniViewJSBridge$1;
    const id2 = callback ? invokeServiceMethodId++ : 0;
    callback && subscribe(INVOKE_SERVICE_API + "." + id2, callback, true);
    publishHandler(INVOKE_SERVICE_API, { id: id2, name, args });
  };
  const viewMethods = /* @__PURE__ */ Object.create(null);
  function normalizeViewMethodName(pageId, name) {
    return pageId + "." + name;
  }
  function registerViewMethod(pageId, name, fn) {
    name = normalizeViewMethodName(pageId, name);
    if (!viewMethods[name]) {
      viewMethods[name] = fn;
    }
  }
  const ViewJSBridge = /* @__PURE__ */ extend(
    /* @__PURE__ */ initBridge("service"),
    {
      invokeServiceMethod
    }
  );
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  var attrs = ["top", "left", "right", "bottom"];
  var inited$1;
  var elementComputedStyle = {};
  var support;
  function getSupport() {
    if (!("CSS" in window) || typeof CSS.supports != "function") {
      support = "";
    } else if (CSS.supports("top: env(safe-area-inset-top)")) {
      support = "env";
    } else if (CSS.supports("top: constant(safe-area-inset-top)")) {
      support = "constant";
    } else {
      support = "";
    }
    return support;
  }
  function init() {
    support = typeof support === "string" ? support : getSupport();
    if (!support) {
      attrs.forEach(function(attr2) {
        elementComputedStyle[attr2] = 0;
      });
      return;
    }
    function setStyle(el, style) {
      var elStyle = el.style;
      Object.keys(style).forEach(function(key) {
        var val = style[key];
        elStyle[key] = val;
      });
    }
    var cbs = [];
    function parentReady(callback) {
      if (callback) {
        cbs.push(callback);
      } else {
        cbs.forEach(function(cb) {
          cb();
        });
      }
    }
    var passiveEvents = false;
    try {
      var opts = Object.defineProperty({}, "passive", {
        get: function() {
          passiveEvents = { passive: true };
        }
      });
      window.addEventListener("test", null, opts);
    } catch (e2) {
    }
    function addChild(parent, attr2) {
      var a1 = document.createElement("div");
      var a2 = document.createElement("div");
      var a1Children = document.createElement("div");
      var a2Children = document.createElement("div");
      var W = 100;
      var MAX = 1e4;
      var aStyle = {
        position: "absolute",
        width: W + "px",
        height: "200px",
        boxSizing: "border-box",
        overflow: "hidden",
        paddingBottom: support + "(safe-area-inset-" + attr2 + ")"
      };
      setStyle(a1, aStyle);
      setStyle(a2, aStyle);
      setStyle(a1Children, {
        transition: "0s",
        animation: "none",
        width: "400px",
        height: "400px"
      });
      setStyle(a2Children, {
        transition: "0s",
        animation: "none",
        width: "250%",
        height: "250%"
      });
      a1.appendChild(a1Children);
      a2.appendChild(a2Children);
      parent.appendChild(a1);
      parent.appendChild(a2);
      parentReady(function() {
        a1.scrollTop = a2.scrollTop = MAX;
        var a1LastScrollTop = a1.scrollTop;
        var a2LastScrollTop = a2.scrollTop;
        function onScroll() {
          if (this.scrollTop === (this === a1 ? a1LastScrollTop : a2LastScrollTop)) {
            return;
          }
          a1.scrollTop = a2.scrollTop = MAX;
          a1LastScrollTop = a1.scrollTop;
          a2LastScrollTop = a2.scrollTop;
          attrChange(attr2);
        }
        a1.addEventListener("scroll", onScroll, passiveEvents);
        a2.addEventListener("scroll", onScroll, passiveEvents);
      });
      var computedStyle = getComputedStyle(a1);
      Object.defineProperty(elementComputedStyle, attr2, {
        configurable: true,
        get: function() {
          return parseFloat(computedStyle.paddingBottom);
        }
      });
    }
    var parentDiv = document.createElement("div");
    setStyle(parentDiv, {
      position: "absolute",
      left: "0",
      top: "0",
      width: "0",
      height: "0",
      zIndex: "-1",
      overflow: "hidden",
      visibility: "hidden"
    });
    attrs.forEach(function(key) {
      addChild(parentDiv, key);
    });
    document.body.appendChild(parentDiv);
    parentReady();
    inited$1 = true;
  }
  function getAttr(attr2) {
    if (!inited$1) {
      init();
    }
    return elementComputedStyle[attr2];
  }
  var changeAttrs = [];
  function attrChange(attr2) {
    if (!changeAttrs.length) {
      setTimeout(function() {
        var style = {};
        changeAttrs.forEach(function(attr3) {
          style[attr3] = elementComputedStyle[attr3];
        });
        changeAttrs.length = 0;
        callbacks.forEach(function(callback) {
          callback(style);
        });
      }, 0);
    }
    changeAttrs.push(attr2);
  }
  var callbacks = [];
  function onChange(callback) {
    if (!getSupport()) {
      return;
    }
    if (!inited$1) {
      init();
    }
    if (typeof callback === "function") {
      callbacks.push(callback);
    }
  }
  function offChange(callback) {
    var index2 = callbacks.indexOf(callback);
    if (index2 >= 0) {
      callbacks.splice(index2, 1);
    }
  }
  var safeAreaInsets = {
    get support() {
      return (typeof support === "string" ? support : getSupport()).length != 0;
    },
    get top() {
      return getAttr("top");
    },
    get left() {
      return getAttr("left");
    },
    get right() {
      return getAttr("right");
    },
    get bottom() {
      return getAttr("bottom");
    },
    onChange,
    offChange
  };
  var out = safeAreaInsets;
  const safeAreaInsets$1 = /* @__PURE__ */ getDefaultExportFromCjs(out);
  const onEventPrevent = /* @__PURE__ */ vue.withModifiers(() => {
  }, ["prevent"]);
  const onEventStop = /* @__PURE__ */ vue.withModifiers(() => {
  }, ["stop"]);
  function getWindowOffsetCssVar(style, name) {
    return parseInt((style.getPropertyValue(name).match(/\d+/) || ["0"])[0]);
  }
  function getWindowTop() {
    const style = document.documentElement.style;
    const top = getWindowOffsetCssVar(style, "--window-top");
    return top ? top + safeAreaInsets$1.top : 0;
  }
  function getWindowOffset() {
    const style = document.documentElement.style;
    const top = getWindowTop();
    const bottom = getWindowOffsetCssVar(style, "--window-bottom");
    const left = getWindowOffsetCssVar(style, "--window-left");
    const right = getWindowOffsetCssVar(style, "--window-right");
    const topWindowHeight = getWindowOffsetCssVar(style, "--top-window-height");
    return {
      top,
      bottom: bottom ? bottom + safeAreaInsets$1.bottom : 0,
      left: left ? left + safeAreaInsets$1.left : 0,
      right: right ? right + safeAreaInsets$1.right : 0,
      topWindowHeight: topWindowHeight || 0
    };
  }
  function PolySymbol(name) {
    return Symbol(name);
  }
  function hasRpx(str) {
    str = str + "";
    return str.indexOf("rpx") !== -1 || str.indexOf("upx") !== -1;
  }
  function rpx2px(str, replace = false) {
    if (replace) {
      return rpx2pxWithReplace(str);
    }
    if (isString$1(str)) {
      const res = parseInt(str) || 0;
      if (hasRpx(str)) {
        return upx2px(res);
      }
      return res;
    }
    return str;
  }
  function rpx2pxWithReplace(str) {
    if (!hasRpx(str)) {
      return str;
    }
    return str.replace(/(\d+(\.\d+)?)[ru]px/g, (_a2, b) => {
      return upx2px(parseFloat(b)) + "px";
    });
  }
  const ICON_PATH_SUCCESS_NO_CIRCLE = "M1.952 18.080q-0.32-0.352-0.416-0.88t0.128-0.976l0.16-0.352q0.224-0.416 0.64-0.528t0.8 0.176l6.496 4.704q0.384 0.288 0.912 0.272t0.88-0.336l17.312-14.272q0.352-0.288 0.848-0.256t0.848 0.352l-0.416-0.416q0.32 0.352 0.32 0.816t-0.32 0.816l-18.656 18.912q-0.32 0.352-0.8 0.352t-0.8-0.32l-7.936-8.064z";
  const ICON_PATH_WARN = "M15.808 0.16q-4.224 0-7.872 2.176-3.552 2.112-5.632 5.728-2.144 3.744-2.144 8.128 0 4.192 2.144 7.872 2.112 3.52 5.632 5.632 3.68 2.144 7.872 2.144 4.384 0 8.128-2.144 3.616-2.080 5.728-5.632 2.176-3.648 2.176-7.872 0-4.384-2.176-8.128-2.112-3.616-5.728-5.728-3.744-2.176-8.128-2.176zM15.136 8.672h1.728q0.128 0 0.224 0.096t0.096 0.256l-0.384 10.24q0 0.064-0.048 0.112t-0.112 0.048h-1.248q-0.096 0-0.144-0.048t-0.048-0.112l-0.384-10.24q0-0.16 0.096-0.256t0.224-0.096zM16 23.328q-0.48 0-0.832-0.352t-0.352-0.848 0.352-0.848 0.832-0.352 0.832 0.352 0.352 0.848-0.352 0.848-0.832 0.352z";
  const ICON_PATH_BACK = "M21.781 7.844l-9.063 8.594 9.063 8.594q0.25 0.25 0.25 0.609t-0.25 0.578q-0.25 0.25-0.578 0.25t-0.578-0.25l-9.625-9.125q-0.156-0.125-0.203-0.297t-0.047-0.359q0-0.156 0.047-0.328t0.203-0.297l9.625-9.125q0.25-0.25 0.578-0.25t0.578 0.25q0.25 0.219 0.25 0.578t-0.25 0.578z";
  const ICON_PATH_CLOSE = "M17.25 16.156l7.375-7.313q0.281-0.281 0.281-0.641t-0.281-0.641q-0.25-0.25-0.625-0.25t-0.625 0.25l-7.375 7.344-7.313-7.344q-0.25-0.25-0.625-0.25t-0.625 0.25q-0.281 0.25-0.281 0.625t0.281 0.625l7.313 7.344-7.375 7.344q-0.281 0.25-0.281 0.625t0.281 0.625q0.125 0.125 0.281 0.188t0.344 0.063q0.156 0 0.328-0.063t0.297-0.188l7.375-7.344 7.375 7.406q0.125 0.156 0.297 0.219t0.328 0.063q0.188 0 0.344-0.078t0.281-0.203q0.281-0.25 0.281-0.609t-0.281-0.641l-7.375-7.406z";
  function createSvgIconVNode(path, color2 = "#000", size = 27) {
    return vue.createVNode(
      "svg",
      {
        width: size,
        height: size,
        viewBox: "0 0 32 32"
      },
      [
        vue.createVNode(
          "path",
          {
            d: path,
            fill: color2
          },
          null,
          8,
          ["d", "fill"]
        )
      ],
      8,
      ["width", "height"]
    );
  }
  function useCurrentPageId() {
    {
      const { $pageInstance } = vue.getCurrentInstance();
      return $pageInstance && $pageInstance.proxy.$page.id;
    }
  }
  function getPageIdByVm(instance2) {
    const vm = resolveComponentInstance(instance2);
    if (vm.$page) {
      return vm.$page.id;
    }
    if (!vm.$) {
      return;
    }
    {
      const { $pageInstance } = vm.$;
      return $pageInstance && $pageInstance.proxy.$page.id;
    }
  }
  function getCurrentPage() {
    const pages2 = getCurrentPages$1();
    const len = pages2.length;
    if (len) {
      return pages2[len - 1];
    }
  }
  function getCurrentPageMeta() {
    const page2 = getCurrentPage();
    if (page2) {
      return page2.$page.meta;
    }
  }
  function getCurrentPageId() {
    const meta = getCurrentPageMeta();
    if (meta) {
      return meta.id;
    }
    return -1;
  }
  function getCurrentPageVm() {
    const page2 = getCurrentPage();
    if (page2) {
      return page2.$vm;
    }
  }
  const PAGE_META_KEYS = ["navigationBar", "pullToRefresh"];
  function initGlobalStyle() {
    return JSON.parse(JSON.stringify(__uniConfig.globalStyle || {}));
  }
  function initRouteMeta(pageMeta, id2) {
    const globalStyle = initGlobalStyle();
    const res = extend({ id: id2 }, globalStyle, pageMeta);
    PAGE_META_KEYS.forEach((name) => {
      res[name] = extend({}, globalStyle[name], pageMeta[name]);
    });
    const { navigationBar } = res;
    navigationBar.titleText && navigationBar.titleImage && (navigationBar.titleText = "");
    return res;
  }
  function invokeHook(vm, name, args) {
    if (isString$1(vm)) {
      args = name;
      name = vm;
      vm = getCurrentPageVm();
    } else if (typeof vm === "number") {
      const page2 = getCurrentPages$1().find((page22) => page22.$page.id === vm);
      if (page2) {
        vm = page2.$vm;
      } else {
        vm = getCurrentPageVm();
      }
    }
    if (!vm) {
      return;
    }
    const hooks = vm.$[name];
    return hooks && invokeArrayFns(hooks, args);
  }
  function normalizeRoute(toRoute) {
    if (toRoute.indexOf("/") === 0) {
      return toRoute;
    }
    let fromRoute = "";
    const pages2 = getCurrentPages$1();
    if (pages2.length) {
      fromRoute = pages2[pages2.length - 1].$page.route;
    }
    return getRealRoute(fromRoute, toRoute);
  }
  function getRealRoute(fromRoute, toRoute) {
    if (toRoute.indexOf("/") === 0) {
      return toRoute;
    }
    if (toRoute.indexOf("./") === 0) {
      return getRealRoute(fromRoute, toRoute.slice(2));
    }
    const toRouteArray = toRoute.split("/");
    const toRouteLength = toRouteArray.length;
    let i = 0;
    for (; i < toRouteLength && toRouteArray[i] === ".."; i++) {
    }
    toRouteArray.splice(0, i);
    toRoute = toRouteArray.join("/");
    const fromRouteArray = fromRoute.length > 0 ? fromRoute.split("/") : [];
    fromRouteArray.splice(fromRouteArray.length - i - 1, i + 1);
    return addLeadingSlash(fromRouteArray.concat(toRouteArray).join("/"));
  }
  function getRouteOptions(path, alias = false) {
    if (alias) {
      return __uniRoutes.find(
        (route2) => route2.path === path || route2.alias === path
      );
    }
    return __uniRoutes.find((route2) => route2.path === path);
  }
  const invokeOnCallback = (name, res) => UniServiceJSBridge$1.emit("api." + name, res);
  let invokeViewMethodId = 1;
  function publishViewMethodName(pageId) {
    return (pageId || getCurrentPageId()) + "." + INVOKE_VIEW_API;
  }
  const invokeViewMethod = (name, args, pageId, callback) => {
    const { subscribe, publishHandler } = UniServiceJSBridge$1;
    const id2 = callback ? invokeViewMethodId++ : 0;
    callback && subscribe(INVOKE_VIEW_API + "." + id2, callback, true);
    publishHandler(publishViewMethodName(pageId), { id: id2, name, args }, pageId);
  };
  const invokeViewMethodKeepAlive = (name, args, callback, pageId) => {
    const { subscribe, unsubscribe, publishHandler } = UniServiceJSBridge$1;
    const id2 = invokeViewMethodId++;
    const subscribeName = INVOKE_VIEW_API + "." + id2;
    subscribe(subscribeName, callback);
    publishHandler(publishViewMethodName(pageId), { id: id2, name, args }, pageId);
    return () => {
      unsubscribe(subscribeName);
    };
  };
  const ServiceJSBridge = /* @__PURE__ */ extend(
    /* @__PURE__ */ initBridge(
      "view"
      /* view 指的是 service 层订阅的是 view 层事件 */
    ),
    {
      invokeOnCallback,
      invokeViewMethod,
      invokeViewMethodKeepAlive
    }
  );
  function converPx(value) {
    if (/^-?\d+[ur]px$/i.test(value)) {
      return value.replace(/(^-?\d+)[ur]px$/i, (text2, num) => {
        return `${upx2px(parseFloat(num))}px`;
      });
    } else if (/^-?[\d\.]+$/.test(value)) {
      return `${value}px`;
    }
    return value || "";
  }
  function converType(type2) {
    return type2.replace(/[A-Z]/g, (text2) => {
      return `-${text2.toLowerCase()}`;
    }).replace("webkit", "-webkit");
  }
  function getStyle(action) {
    const animateTypes12 = [
      "matrix",
      "matrix3d",
      "scale",
      "scale3d",
      "rotate3d",
      "skew",
      "translate",
      "translate3d"
    ];
    const animateTypes22 = [
      "scaleX",
      "scaleY",
      "scaleZ",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "skewX",
      "skewY",
      "translateX",
      "translateY",
      "translateZ"
    ];
    const animateTypes32 = ["opacity", "background-color"];
    const animateTypes4 = ["width", "height", "left", "right", "top", "bottom"];
    const animates = action.animates;
    const option = action.option;
    const transition = option.transition;
    const style = {};
    const transform = [];
    animates.forEach((animate) => {
      let type2 = animate.type;
      let args = [...animate.args];
      if (animateTypes12.concat(animateTypes22).includes(type2)) {
        if (type2.startsWith("rotate") || type2.startsWith("skew")) {
          args = args.map((value) => parseFloat(value) + "deg");
        } else if (type2.startsWith("translate")) {
          args = args.map(converPx);
        }
        if (animateTypes22.indexOf(type2) >= 0) {
          args.length = 1;
        }
        transform.push(`${type2}(${args.join(",")})`);
      } else if (animateTypes32.concat(animateTypes4).includes(args[0])) {
        type2 = args[0];
        const value = args[1];
        style[type2] = animateTypes4.includes(type2) ? converPx(value) : value;
      }
    });
    style.transform = style.webkitTransform = transform.join(" ");
    style.transition = style.webkitTransition = Object.keys(style).map(
      (type2) => `${converType(type2)} ${transition.duration}ms ${transition.timingFunction} ${transition.delay}ms`
    ).join(",");
    style.transformOrigin = style.webkitTransformOrigin = option.transformOrigin;
    return style;
  }
  function startAnimation(context) {
    const animation2 = context.animation;
    if (!animation2 || !animation2.actions || !animation2.actions.length) {
      return;
    }
    let index2 = 0;
    const actions = animation2.actions;
    const length = animation2.actions.length;
    function animate() {
      const action = actions[index2];
      const transition = action.option.transition;
      const style = getStyle(action);
      Object.keys(style).forEach((key) => {
        context.$el.style[key] = style[key];
      });
      index2 += 1;
      if (index2 < length) {
        setTimeout(animate, transition.duration + transition.delay);
      }
    }
    setTimeout(() => {
      animate();
    }, 0);
  }
  const animation = {
    props: ["animation"],
    watch: {
      animation: {
        deep: true,
        handler() {
          startAnimation(this);
        }
      }
    },
    mounted() {
      startAnimation(this);
    }
  };
  const defineBuiltInComponent = (options) => {
    options.__reserved = true;
    const { props: props2, mixins } = options;
    if (!props2 || !props2.animation) {
      (mixins || (options.mixins = [])).push(animation);
    }
    return defineSystemComponent(options);
  };
  const defineSystemComponent = (options) => {
    options.__reserved = true;
    options.compatConfig = {
      MODE: 3
      // 标记为vue3
    };
    return vue.defineComponent(options);
  };
  const hoverProps = {
    hoverClass: {
      type: String,
      default: "none"
    },
    hoverStopPropagation: {
      type: Boolean,
      default: false
    },
    hoverStartTime: {
      type: [Number, String],
      default: 50
    },
    hoverStayTime: {
      type: [Number, String],
      default: 400
    }
  };
  function useHover(props2) {
    const hovering = vue.ref(false);
    let hoverTouch = false;
    let hoverStartTimer;
    let hoverStayTimer;
    function hoverReset() {
      requestAnimationFrame(() => {
        clearTimeout(hoverStayTimer);
        hoverStayTimer = setTimeout(() => {
          hovering.value = false;
        }, parseInt(props2.hoverStayTime));
      });
    }
    function onTouchstartPassive(evt) {
      if (evt.touches.length > 1) {
        return;
      }
      handleHoverStart(evt);
    }
    function onMousedown(evt) {
      if (hoverTouch) {
        return;
      }
      handleHoverStart(evt);
      window.addEventListener("mouseup", handlePCHoverEnd);
    }
    function handleHoverStart(evt) {
      if (evt._hoverPropagationStopped) {
        return;
      }
      if (!props2.hoverClass || props2.hoverClass === "none" || props2.disabled) {
        return;
      }
      if (props2.hoverStopPropagation) {
        evt._hoverPropagationStopped = true;
      }
      hoverTouch = true;
      hoverStartTimer = setTimeout(() => {
        hovering.value = true;
        if (!hoverTouch) {
          hoverReset();
        }
      }, parseInt(props2.hoverStartTime));
    }
    function onTouchend() {
      handleHoverEnd();
    }
    function onMouseup() {
      if (!hoverTouch) {
        return;
      }
      handlePCHoverEnd();
    }
    function handleHoverEnd() {
      hoverTouch = false;
      if (hovering.value) {
        hoverReset();
      }
    }
    function handlePCHoverEnd() {
      handleHoverEnd();
      window.removeEventListener("mouseup", handlePCHoverEnd);
    }
    function onTouchcancel() {
      hoverTouch = false;
      hovering.value = false;
      clearTimeout(hoverStartTimer);
    }
    return {
      hovering,
      binding: {
        onTouchstartPassive,
        onMousedown,
        onTouchend,
        onMouseup,
        onTouchcancel
      }
    };
  }
  function useBooleanAttr(props2, keys2) {
    if (isString$1(keys2)) {
      keys2 = [keys2];
    }
    return keys2.reduce((res, key) => {
      if (props2[key]) {
        res[key] = true;
      }
      return res;
    }, /* @__PURE__ */ Object.create(null));
  }
  function withWebEvent(fn) {
    return fn.__wwe = true, fn;
  }
  function useCustomEvent(ref2, emit2) {
    return (name, evt, detail) => {
      if (ref2.value) {
        emit2(name, normalizeCustomEvent(name, evt, ref2.value, detail || {}));
      }
    };
  }
  function normalizeCustomEvent(name, domEvt, el, detail) {
    const target = normalizeTarget(el);
    return {
      type: detail.type || name,
      timeStamp: domEvt.timeStamp || 0,
      target,
      currentTarget: target,
      detail
    };
  }
  const uniFormKey = PolySymbol("uf");
  const uniLabelKey = PolySymbol("ul");
  function useListeners$1(props2, listeners2) {
    _addListeners(props2.id, listeners2);
    vue.watch(
      () => props2.id,
      (newId, oldId) => {
        _removeListeners(oldId, listeners2, true);
        _addListeners(newId, listeners2, true);
      }
    );
    vue.onUnmounted(() => {
      _removeListeners(props2.id, listeners2);
    });
  }
  function _addListeners(id2, listeners2, watch2) {
    const pageId = useCurrentPageId();
    if (watch2 && !id2) {
      return;
    }
    if (!isPlainObject(listeners2)) {
      return;
    }
    Object.keys(listeners2).forEach((name) => {
      if (watch2) {
        if (name.indexOf("@") !== 0 && name.indexOf("uni-") !== 0) {
          UniViewJSBridge$1.on(`uni-${name}-${pageId}-${id2}`, listeners2[name]);
        }
      } else {
        if (name.indexOf("uni-") === 0) {
          UniViewJSBridge$1.on(name, listeners2[name]);
        } else if (id2) {
          UniViewJSBridge$1.on(`uni-${name}-${pageId}-${id2}`, listeners2[name]);
        }
      }
    });
  }
  function _removeListeners(id2, listeners2, watch2) {
    const pageId = useCurrentPageId();
    if (watch2 && !id2) {
      return;
    }
    if (!isPlainObject(listeners2)) {
      return;
    }
    Object.keys(listeners2).forEach((name) => {
      if (watch2) {
        if (name.indexOf("@") !== 0 && name.indexOf("uni-") !== 0) {
          UniViewJSBridge$1.off(`uni-${name}-${pageId}-${id2}`, listeners2[name]);
        }
      } else {
        if (name.indexOf("uni-") === 0) {
          UniViewJSBridge$1.off(name, listeners2[name]);
        } else if (id2) {
          UniViewJSBridge$1.off(`uni-${name}-${pageId}-${id2}`, listeners2[name]);
        }
      }
    });
  }
  const buttonProps = {
    id: {
      type: String,
      default: ""
    },
    hoverClass: {
      type: String,
      default: "button-hover"
    },
    hoverStartTime: {
      type: [Number, String],
      default: 20
    },
    hoverStayTime: {
      type: [Number, String],
      default: 70
    },
    hoverStopPropagation: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: [Boolean, String],
      default: false
    },
    formType: {
      type: String,
      default: ""
    },
    openType: {
      type: String,
      default: ""
    },
    loading: {
      type: [Boolean, String],
      default: false
    },
    plain: {
      type: [Boolean, String],
      default: false
    }
  };
  const index$x = /* @__PURE__ */ defineBuiltInComponent({
    name: "Button",
    props: buttonProps,
    setup(props2, {
      slots
    }) {
      const rootRef = vue.ref(null);
      const uniForm2 = vue.inject(uniFormKey, false);
      const {
        hovering,
        binding
      } = useHover(props2);
      useI18n();
      const onClick = withWebEvent((e2, isLabelClick) => {
        if (props2.disabled) {
          return e2.stopImmediatePropagation();
        }
        if (isLabelClick) {
          rootRef.value.click();
        }
        const formType = props2.formType;
        if (formType) {
          if (!uniForm2) {
            return;
          }
          if (formType === "submit") {
            uniForm2.submit(e2);
          } else if (formType === "reset") {
            uniForm2.reset(e2);
          }
          return;
        }
      });
      const uniLabel = vue.inject(uniLabelKey, false);
      if (uniLabel) {
        uniLabel.addHandler(onClick);
        vue.onBeforeUnmount(() => {
          uniLabel.removeHandler(onClick);
        });
      }
      useListeners$1(props2, {
        "label-click": onClick
      });
      return () => {
        const hoverClass = props2.hoverClass;
        const booleanAttrs = useBooleanAttr(props2, "disabled");
        const loadingAttrs = useBooleanAttr(props2, "loading");
        const plainAttrs = useBooleanAttr(props2, "plain");
        const hasHoverClass = hoverClass && hoverClass !== "none";
        return vue.createVNode("uni-button", vue.mergeProps({
          "ref": rootRef,
          "onClick": onClick,
          "class": hasHoverClass && hovering.value ? hoverClass : ""
        }, hasHoverClass && binding, booleanAttrs, loadingAttrs, plainAttrs), [slots.default && slots.default()], 16, ["onClick"]);
      };
    }
  });
  function addBase(filePath) {
    const { base: baseUrl } = __uniConfig.router;
    if (addLeadingSlash(filePath).indexOf(baseUrl) === 0) {
      return addLeadingSlash(filePath);
    }
    return baseUrl + filePath;
  }
  function getRealPath(filePath) {
    const { base, assets } = __uniConfig.router;
    if (base === "./") {
      if (filePath.indexOf("./static/") === 0 || assets && filePath.indexOf("./" + assets + "/") === 0) {
        filePath = filePath.slice(1);
      }
    }
    if (filePath.indexOf("/") === 0) {
      if (filePath.indexOf("//") === 0) {
        filePath = "https:" + filePath;
      } else {
        return addBase(filePath.slice(1));
      }
    }
    if (SCHEME_RE.test(filePath) || DATA_RE.test(filePath) || filePath.indexOf("blob:") === 0) {
      return filePath;
    }
    const pages2 = getCurrentPages$1();
    if (pages2.length) {
      return addBase(
        getRealRoute(pages2[pages2.length - 1].$page.route, filePath).slice(1)
      );
    }
    return filePath;
  }
  const ua = navigator.userAgent;
  const isAndroid = /* @__PURE__ */ /android/i.test(ua);
  const isIOS$1 = /* @__PURE__ */ /iphone|ipad|ipod/i.test(ua);
  const isWindows = /* @__PURE__ */ ua.match(/Windows NT ([\d|\d.\d]*)/i);
  const isMac = /* @__PURE__ */ /Macintosh|Mac/i.test(ua);
  const isLinux = /* @__PURE__ */ /Linux|X11/i.test(ua);
  const isIPadOS = isMac && navigator.maxTouchPoints > 0;
  function getScreenFix() {
    return /^Apple/.test(navigator.vendor) && typeof window.orientation === "number";
  }
  function isLandscape(screenFix) {
    return screenFix && Math.abs(window.orientation) === 90;
  }
  function getScreenWidth(screenFix, landscape) {
    return screenFix ? Math[landscape ? "max" : "min"](screen.width, screen.height) : screen.width;
  }
  function getScreenHeight(screenFix, landscape) {
    return screenFix ? Math[landscape ? "min" : "max"](screen.height, screen.width) : screen.height;
  }
  function getWindowWidth(screenWidth) {
    return Math.min(
      window.innerWidth,
      document.documentElement.clientWidth,
      screenWidth
    ) || screenWidth;
  }
  function getBaseSystemInfo() {
    const screenFix = getScreenFix();
    const windowWidth = getWindowWidth(
      getScreenWidth(screenFix, isLandscape(screenFix))
    );
    return {
      platform: isIOS$1 ? "ios" : "other",
      pixelRatio: window.devicePixelRatio,
      windowWidth
    };
  }
  function operateVideoPlayer(videoId, pageId, type2, data) {
    UniServiceJSBridge$1.invokeViewMethod(
      "video." + videoId,
      {
        videoId,
        type: type2,
        data
      },
      pageId
    );
  }
  function operateMap(id2, pageId, type2, data, operateMapCallback2) {
    UniServiceJSBridge$1.invokeViewMethod(
      "map." + id2,
      {
        type: type2,
        data
      },
      pageId,
      operateMapCallback2
    );
  }
  function getRootInfo(fields2) {
    const info = {};
    if (fields2.id) {
      info.id = "";
    }
    if (fields2.dataset) {
      info.dataset = {};
    }
    if (fields2.rect) {
      info.left = 0;
      info.right = 0;
      info.top = 0;
      info.bottom = 0;
    }
    if (fields2.size) {
      info.width = document.documentElement.clientWidth;
      info.height = document.documentElement.clientHeight;
    }
    if (fields2.scrollOffset) {
      const documentElement2 = document.documentElement;
      const body = document.body;
      info.scrollLeft = documentElement2.scrollLeft || body.scrollLeft || 0;
      info.scrollTop = documentElement2.scrollTop || body.scrollTop || 0;
      info.scrollHeight = documentElement2.scrollHeight || body.scrollHeight || 0;
      info.scrollWidth = documentElement2.scrollWidth || body.scrollWidth || 0;
    }
    return info;
  }
  function getNodeInfo(el, fields2) {
    const info = {};
    const { top, topWindowHeight } = getWindowOffset();
    if (fields2.id) {
      info.id = el.id;
    }
    if (fields2.dataset) {
      info.dataset = getCustomDataset(el);
    }
    if (fields2.rect || fields2.size) {
      const rect = el.getBoundingClientRect();
      if (fields2.rect) {
        info.left = rect.left;
        info.right = rect.right;
        info.top = rect.top - top - topWindowHeight;
        info.bottom = rect.bottom - top - topWindowHeight;
      }
      if (fields2.size) {
        info.width = rect.width;
        info.height = rect.height;
      }
    }
    if (isArray$a(fields2.properties)) {
      fields2.properties.forEach((prop) => {
        prop = prop.replace(/-([a-z])/g, function(e2, t2) {
          return t2.toUpperCase();
        });
      });
    }
    if (fields2.scrollOffset) {
      if (el.tagName === "UNI-SCROLL-VIEW") {
        const scroll = el.children[0].children[0];
        info.scrollLeft = scroll.scrollLeft;
        info.scrollTop = scroll.scrollTop;
        info.scrollHeight = scroll.scrollHeight;
        info.scrollWidth = scroll.scrollWidth;
      } else {
        info.scrollLeft = 0;
        info.scrollTop = 0;
        info.scrollHeight = 0;
        info.scrollWidth = 0;
      }
    }
    if (isArray$a(fields2.computedStyle)) {
      const sytle = getComputedStyle(el);
      fields2.computedStyle.forEach((name) => {
        info[name] = sytle[name];
      });
    }
    if (fields2.context) {
      info.contextInfo = getContextInfo(el);
    }
    return info;
  }
  function findElm(component, pageVm) {
    if (!component) {
      return pageVm.$el;
    }
    return component.$el;
  }
  function matches(element, selectors) {
    const matches2 = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || function(selectors2) {
      const matches3 = this.parentElement.querySelectorAll(
        selectors2
      );
      let i = matches3.length;
      while (--i >= 0 && matches3.item(i) !== this) {
      }
      return i > -1;
    };
    return matches2.call(element, selectors);
  }
  function getNodesInfo(pageVm, component, selector, single, fields2) {
    const selfElement = findElm(component, pageVm);
    const parentElement = selfElement.parentElement;
    if (!parentElement) {
      return single ? null : [];
    }
    const { nodeType } = selfElement;
    const maybeFragment = nodeType === 3 || nodeType === 8;
    if (single) {
      const node = maybeFragment ? parentElement.querySelector(selector) : matches(selfElement, selector) ? selfElement : selfElement.querySelector(selector);
      if (node) {
        return getNodeInfo(node, fields2);
      }
      return null;
    } else {
      let infos = [];
      const nodeList = (maybeFragment ? parentElement : selfElement).querySelectorAll(selector);
      if (nodeList && nodeList.length) {
        [].forEach.call(nodeList, (node) => {
          infos.push(getNodeInfo(node, fields2));
        });
      }
      if (!maybeFragment && matches(selfElement, selector)) {
        infos.unshift(getNodeInfo(selfElement, fields2));
      }
      return infos;
    }
  }
  function requestComponentInfo(page2, reqs, callback) {
    const result = [];
    reqs.forEach(({ component, selector, single, fields: fields2 }) => {
      if (component === null) {
        result.push(getRootInfo(fields2));
      } else {
        result.push(getNodesInfo(page2, component, selector, single, fields2));
      }
    });
    callback(result);
  }
  const CHOOSE_SIZE_TYPES = ["original", "compressed"];
  const CHOOSE_SOURCE_TYPES = ["album", "camera"];
  const HTTP_METHODS = [
    "GET",
    "OPTIONS",
    "HEAD",
    "POST",
    "PUT",
    "DELETE",
    "TRACE",
    "CONNECT",
    "PATCH"
  ];
  function elemInArray(str, arr) {
    if (!str || arr.indexOf(str) === -1) {
      return arr[0];
    }
    return str;
  }
  function elemsInArray(strArr, optionalVal) {
    if (!isArray$a(strArr) || strArr.length === 0 || strArr.find((val) => optionalVal.indexOf(val) === -1)) {
      return optionalVal;
    }
    return strArr;
  }
  function tryCatch(fn) {
    return function() {
      try {
        return fn.apply(fn, arguments);
      } catch (e2) {
        console.error(e2);
      }
    };
  }
  let invokeCallbackId = 1;
  const invokeCallbacks = {};
  function addInvokeCallback(id2, name, callback, keepAlive = false) {
    invokeCallbacks[id2] = {
      name,
      keepAlive,
      callback
    };
    return id2;
  }
  function invokeCallback(id2, res, extras) {
    if (typeof id2 === "number") {
      const opts = invokeCallbacks[id2];
      if (opts) {
        if (!opts.keepAlive) {
          delete invokeCallbacks[id2];
        }
        return opts.callback(res, extras);
      }
    }
    return res;
  }
  const API_SUCCESS = "success";
  const API_FAIL = "fail";
  const API_COMPLETE = "complete";
  function getApiCallbacks(args) {
    const apiCallbacks = {};
    for (const name in args) {
      const fn = args[name];
      if (isFunction$3(fn)) {
        apiCallbacks[name] = tryCatch(fn);
        delete args[name];
      }
    }
    return apiCallbacks;
  }
  function normalizeErrMsg$1(errMsg, name) {
    if (!errMsg || errMsg.indexOf(":fail") === -1) {
      return name + ":ok";
    }
    return name + errMsg.substring(errMsg.indexOf(":fail"));
  }
  function createAsyncApiCallback(name, args = {}, { beforeAll, beforeSuccess } = {}) {
    if (!isPlainObject(args)) {
      args = {};
    }
    const { success, fail, complete } = getApiCallbacks(args);
    const hasSuccess = isFunction$3(success);
    const hasFail = isFunction$3(fail);
    const hasComplete = isFunction$3(complete);
    const callbackId = invokeCallbackId++;
    addInvokeCallback(callbackId, name, (res) => {
      res = res || {};
      res.errMsg = normalizeErrMsg$1(res.errMsg, name);
      isFunction$3(beforeAll) && beforeAll(res);
      if (res.errMsg === name + ":ok") {
        isFunction$3(beforeSuccess) && beforeSuccess(res, args);
        hasSuccess && success(res);
      } else {
        hasFail && fail(res);
      }
      hasComplete && complete(res);
    });
    return callbackId;
  }
  const HOOK_SUCCESS = "success";
  const HOOK_FAIL = "fail";
  const HOOK_COMPLETE = "complete";
  const globalInterceptors = {};
  const scopedInterceptors = {};
  function wrapperHook(hook, params) {
    return function(data) {
      return hook(data, params) || data;
    };
  }
  function queue(hooks, data, params) {
    let promise2 = false;
    for (let i = 0; i < hooks.length; i++) {
      const hook = hooks[i];
      if (promise2) {
        promise2 = Promise.resolve(wrapperHook(hook, params));
      } else {
        const res = hook(data, params);
        if (isPromise(res)) {
          promise2 = Promise.resolve(res);
        }
        if (res === false) {
          return {
            then() {
            },
            catch() {
            }
          };
        }
      }
    }
    return promise2 || {
      then(callback) {
        return callback(data);
      },
      catch() {
      }
    };
  }
  function wrapperOptions(interceptors2, options = {}) {
    [HOOK_SUCCESS, HOOK_FAIL, HOOK_COMPLETE].forEach((name) => {
      const hooks = interceptors2[name];
      if (!isArray$a(hooks)) {
        return;
      }
      const oldCallback = options[name];
      options[name] = function callbackInterceptor(res) {
        queue(hooks, res, options).then((res2) => {
          return isFunction$3(oldCallback) && oldCallback(res2) || res2;
        });
      };
    });
    return options;
  }
  function wrapperReturnValue(method2, returnValue) {
    const returnValueHooks = [];
    if (isArray$a(globalInterceptors.returnValue)) {
      returnValueHooks.push(...globalInterceptors.returnValue);
    }
    const interceptor = scopedInterceptors[method2];
    if (interceptor && isArray$a(interceptor.returnValue)) {
      returnValueHooks.push(...interceptor.returnValue);
    }
    returnValueHooks.forEach((hook) => {
      returnValue = hook(returnValue) || returnValue;
    });
    return returnValue;
  }
  function getApiInterceptorHooks(method2) {
    const interceptor = /* @__PURE__ */ Object.create(null);
    Object.keys(globalInterceptors).forEach((hook) => {
      if (hook !== "returnValue") {
        interceptor[hook] = globalInterceptors[hook].slice();
      }
    });
    const scopedInterceptor = scopedInterceptors[method2];
    if (scopedInterceptor) {
      Object.keys(scopedInterceptor).forEach((hook) => {
        if (hook !== "returnValue") {
          interceptor[hook] = (interceptor[hook] || []).concat(
            scopedInterceptor[hook]
          );
        }
      });
    }
    return interceptor;
  }
  function invokeApi(method2, api2, options, params) {
    const interceptor = getApiInterceptorHooks(method2);
    if (interceptor && Object.keys(interceptor).length) {
      if (isArray$a(interceptor.invoke)) {
        const res = queue(interceptor.invoke, options);
        return res.then((options2) => {
          return api2(
            wrapperOptions(getApiInterceptorHooks(method2), options2),
            ...params
          );
        });
      } else {
        return api2(wrapperOptions(interceptor, options), ...params);
      }
    }
    return api2(options, ...params);
  }
  function hasCallback(args) {
    if (isPlainObject(args) && [API_SUCCESS, API_FAIL, API_COMPLETE].find(
      (cb) => isFunction$3(args[cb])
    )) {
      return true;
    }
    return false;
  }
  function handlePromise(promise2) {
    return promise2;
  }
  function promisify(name, fn) {
    return (args = {}, ...rest) => {
      if (hasCallback(args)) {
        return wrapperReturnValue(name, invokeApi(name, fn, args, rest));
      }
      return wrapperReturnValue(
        name,
        handlePromise(
          new Promise((resolve, reject) => {
            invokeApi(
              name,
              fn,
              extend(args, { success: resolve, fail: reject }),
              rest
            );
          })
        )
      );
    };
  }
  function formatApiArgs(args, options) {
    const params = args[0];
    if (!options || !isPlainObject(options.formatArgs) && isPlainObject(params)) {
      return;
    }
    const formatArgs = options.formatArgs;
    const keys2 = Object.keys(formatArgs);
    for (let i = 0; i < keys2.length; i++) {
      const name = keys2[i];
      const formatterOrDefaultValue = formatArgs[name];
      if (isFunction$3(formatterOrDefaultValue)) {
        const errMsg = formatterOrDefaultValue(args[0][name], params);
        if (isString$1(errMsg)) {
          return errMsg;
        }
      } else {
        if (!hasOwn$1(params, name)) {
          params[name] = formatterOrDefaultValue;
        }
      }
    }
  }
  function invokeSuccess(id2, name, res) {
    return invokeCallback(
      id2,
      extend(res || {}, { errMsg: name + ":ok" })
    );
  }
  function invokeFail(id2, name, errMsg, errRes) {
    return invokeCallback(
      id2,
      extend({ errMsg: name + ":fail" + (errMsg ? " " + errMsg : "") }, errRes)
    );
  }
  function beforeInvokeApi(name, args, protocol, options) {
    if (options && options.beforeInvoke) {
      const errMsg2 = options.beforeInvoke(args);
      if (isString$1(errMsg2)) {
        return errMsg2;
      }
    }
    const errMsg = formatApiArgs(args, options);
    if (errMsg) {
      return errMsg;
    }
  }
  function normalizeErrMsg(errMsg) {
    if (!errMsg || isString$1(errMsg)) {
      return errMsg;
    }
    if (errMsg.stack) {
      console.error(errMsg.message + LINEFEED + errMsg.stack);
      return errMsg.message;
    }
    return errMsg;
  }
  function wrapperTaskApi(name, fn, protocol, options) {
    return (args) => {
      const id2 = createAsyncApiCallback(name, args, options);
      const errMsg = beforeInvokeApi(name, [args], protocol, options);
      if (errMsg) {
        return invokeFail(id2, name, errMsg);
      }
      return fn(args, {
        resolve: (res) => invokeSuccess(id2, name, res),
        reject: (errMsg2, errRes) => invokeFail(id2, name, normalizeErrMsg(errMsg2), errRes)
      });
    };
  }
  function wrapperSyncApi(name, fn, protocol, options) {
    return (...args) => {
      const errMsg = beforeInvokeApi(name, args, protocol, options);
      if (errMsg) {
        throw new Error(errMsg);
      }
      return fn.apply(null, args);
    };
  }
  function wrapperAsyncApi(name, fn, protocol, options) {
    return wrapperTaskApi(name, fn, protocol, options);
  }
  function defineTaskApi(name, fn, protocol, options) {
    return promisify(
      name,
      wrapperTaskApi(name, fn, void 0, options)
    );
  }
  function defineSyncApi(name, fn, protocol, options) {
    return wrapperSyncApi(
      name,
      fn,
      void 0,
      options
    );
  }
  function defineAsyncApi(name, fn, protocol, options) {
    return promisify(
      name,
      wrapperAsyncApi(name, fn, void 0, options)
    );
  }
  const API_UPX2PX = "upx2px";
  const EPS = 1e-4;
  const BASE_DEVICE_WIDTH = 750;
  let isIOS = false;
  let deviceWidth = 0;
  let deviceDPR = 0;
  let maxWidth = 960;
  let baseWidth = 375;
  let includeWidth = 750;
  function checkDeviceWidth() {
    const { platform, pixelRatio: pixelRatio2, windowWidth } = getBaseSystemInfo();
    deviceWidth = windowWidth;
    deviceDPR = pixelRatio2;
    isIOS = platform === "ios";
  }
  function checkValue(value, defaultValue) {
    const newValue = Number(value);
    return isNaN(newValue) ? defaultValue : newValue;
  }
  function checkMaxWidth() {
    const config2 = __uniConfig.globalStyle || {};
    maxWidth = checkValue(config2.rpxCalcMaxDeviceWidth, 960);
    baseWidth = checkValue(config2.rpxCalcBaseDeviceWidth, 375);
    includeWidth = checkValue(config2.rpxCalcBaseDeviceWidth, 750);
  }
  const upx2px = /* @__PURE__ */ defineSyncApi(
    API_UPX2PX,
    (number2, newDeviceWidth) => {
      if (deviceWidth === 0) {
        checkDeviceWidth();
        {
          checkMaxWidth();
        }
      }
      number2 = Number(number2);
      if (number2 === 0) {
        return 0;
      }
      let width = newDeviceWidth || deviceWidth;
      {
        width = number2 === includeWidth || width <= maxWidth ? width : baseWidth;
      }
      let result = number2 / BASE_DEVICE_WIDTH * width;
      if (result < 0) {
        result = -result;
      }
      result = Math.floor(result + EPS);
      if (result === 0) {
        if (deviceDPR === 1 || !isIOS) {
          result = 1;
        } else {
          result = 0.5;
        }
      }
      return number2 < 0 ? -result : result;
    }
  );
  const API_EMIT = "$emit";
  const emitter = new E$1();
  const $emit = /* @__PURE__ */ defineSyncApi(
    API_EMIT,
    (name, ...args) => {
      emitter.emit(name, ...args);
    }
  );
  const RATES = [0.5, 0.8, 1, 1.25, 1.5, 2];
  class VideoContext {
    constructor(id2, pageId) {
      this.id = id2;
      this.pageId = pageId;
    }
    play() {
      operateVideoPlayer(this.id, this.pageId, "play");
    }
    pause() {
      operateVideoPlayer(this.id, this.pageId, "pause");
    }
    stop() {
      operateVideoPlayer(this.id, this.pageId, "stop");
    }
    seek(position) {
      operateVideoPlayer(this.id, this.pageId, "seek", {
        position
      });
    }
    sendDanmu(args) {
      operateVideoPlayer(this.id, this.pageId, "sendDanmu", args);
    }
    playbackRate(rate) {
      if (!~RATES.indexOf(rate)) {
        rate = 1;
      }
      operateVideoPlayer(this.id, this.pageId, "playbackRate", {
        rate
      });
    }
    requestFullScreen(args = {}) {
      operateVideoPlayer(this.id, this.pageId, "requestFullScreen", args);
    }
    exitFullScreen() {
      operateVideoPlayer(this.id, this.pageId, "exitFullScreen");
    }
    showStatusBar() {
      operateVideoPlayer(this.id, this.pageId, "showStatusBar");
    }
    hideStatusBar() {
      operateVideoPlayer(this.id, this.pageId, "hideStatusBar");
    }
  }
  const operateMapCallback = (options, res) => {
    const errMsg = res.errMsg || "";
    if (new RegExp("\\:\\s*fail").test(errMsg)) {
      options.fail && options.fail(res);
    } else {
      options.success && options.success(res);
    }
    options.complete && options.complete(res);
  };
  const operateMapWrap = (id2, pageId, type2, options) => {
    operateMap(id2, pageId, type2, options, (res) => {
      options && operateMapCallback(options, res);
    });
  };
  class MapContext {
    constructor(id2, pageId) {
      this.id = id2;
      this.pageId = pageId;
    }
    getCenterLocation(options) {
      operateMapWrap(this.id, this.pageId, "getCenterLocation", options);
    }
    moveToLocation(options) {
      operateMapWrap(this.id, this.pageId, "moveToLocation", options);
    }
    getScale(options) {
      operateMapWrap(this.id, this.pageId, "getScale", options);
    }
    getRegion(options) {
      operateMapWrap(this.id, this.pageId, "getRegion", options);
    }
    includePoints(options) {
      operateMapWrap(this.id, this.pageId, "includePoints", options);
    }
    translateMarker(options) {
      operateMapWrap(this.id, this.pageId, "translateMarker", options);
    }
    $getAppMap() {
    }
    addCustomLayer(options) {
      operateMapWrap(this.id, this.pageId, "addCustomLayer", options);
    }
    removeCustomLayer(options) {
      operateMapWrap(this.id, this.pageId, "removeCustomLayer", options);
    }
    addGroundOverlay(options) {
      operateMapWrap(this.id, this.pageId, "addGroundOverlay", options);
    }
    removeGroundOverlay(options) {
      operateMapWrap(this.id, this.pageId, "removeGroundOverlay", options);
    }
    updateGroundOverlay(options) {
      operateMapWrap(this.id, this.pageId, "updateGroundOverlay", options);
    }
    initMarkerCluster(options) {
      operateMapWrap(this.id, this.pageId, "initMarkerCluster", options);
    }
    addMarkers(options) {
      operateMapWrap(this.id, this.pageId, "addMarkers", options);
    }
    removeMarkers(options) {
      operateMapWrap(this.id, this.pageId, "removeMarkers", options);
    }
    moveAlong(options) {
      operateMapWrap(this.id, this.pageId, "moveAlong", options);
    }
    setLocMarkerIcon(options) {
      operateMapWrap(this.id, this.pageId, "setLocMarkerIcon", options);
    }
    openMapApp(options) {
      operateMapWrap(this.id, this.pageId, "openMapApp", options);
    }
    on(options) {
      operateMapWrap(this.id, this.pageId, "on", options);
    }
  }
  function operateCanvas(canvasId, pageId, type2, data, callback) {
    UniServiceJSBridge$1.invokeViewMethod(
      `canvas.${canvasId}`,
      {
        type: type2,
        data
      },
      pageId,
      (data2) => {
        if (callback)
          callback(data2);
      }
    );
  }
  function measureText(text2, font2) {
    const canvas = document.createElement("canvas");
    const c2d = canvas.getContext("2d");
    c2d.font = font2;
    return c2d.measureText(text2).width || 0;
  }
  const predefinedColor = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgrey: "#a9a9a9",
    darkgreen: "#006400",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    grey: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgrey: "#d3d3d3",
    lightgreen: "#90ee90",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32",
    transparent: "#00000000"
  };
  function checkColor(e2) {
    e2 = e2 || "#000000";
    var t2 = null;
    if ((t2 = /^#([0-9|A-F|a-f]{6})$/.exec(e2)) != null) {
      const n = parseInt(t2[1].slice(0, 2), 16);
      const o2 = parseInt(t2[1].slice(2, 4), 16);
      const r = parseInt(t2[1].slice(4), 16);
      return [n, o2, r, 255];
    }
    if ((t2 = /^#([0-9|A-F|a-f]{3})$/.exec(e2)) != null) {
      let n = t2[1].slice(0, 1);
      let o2 = t2[1].slice(1, 2);
      let r = t2[1].slice(2, 3);
      n = parseInt(n + n, 16);
      o2 = parseInt(o2 + o2, 16);
      r = parseInt(r + r, 16);
      return [n, o2, r, 255];
    }
    if ((t2 = /^rgb\((.+)\)$/.exec(e2)) != null) {
      return t2[1].split(",").map(function(e22) {
        return Math.min(255, parseInt(e22.trim()));
      }).concat(255);
    }
    if ((t2 = /^rgba\((.+)\)$/.exec(e2)) != null) {
      return t2[1].split(",").map(function(e22, t22) {
        return t22 === 3 ? Math.floor(255 * parseFloat(e22.trim())) : Math.min(255, parseInt(e22.trim()));
      });
    }
    var i = e2.toLowerCase();
    if (hasOwn$1(predefinedColor, i)) {
      t2 = /^#([0-9|A-F|a-f]{6,8})$/.exec(predefinedColor[i]);
      const n = parseInt(t2[1].slice(0, 2), 16);
      const o2 = parseInt(t2[1].slice(2, 4), 16);
      const r = parseInt(t2[1].slice(4, 6), 16);
      let a2 = parseInt(t2[1].slice(6, 8), 16);
      a2 = a2 >= 0 ? a2 : 255;
      return [n, o2, r, a2];
    }
    console.error("unsupported color:" + e2);
    return [0, 0, 0, 255];
  }
  class CanvasGradient {
    constructor(type2, data) {
      this.type = type2;
      this.data = data;
      this.colorStop = [];
    }
    addColorStop(position, color2) {
      this.colorStop.push([position, checkColor(color2)]);
    }
  }
  class Pattern {
    constructor(image2, repetition) {
      this.type = "pattern";
      this.data = image2;
      this.colorStop = repetition;
    }
  }
  class TextMetrics {
    constructor(width) {
      this.width = width;
    }
  }
  class CanvasContext {
    constructor(id2, pageId) {
      this.id = id2;
      this.pageId = pageId;
      this.actions = [];
      this.path = [];
      this.subpath = [];
      this.drawingState = [];
      this.state = {
        lineDash: [0, 0],
        shadowOffsetX: 0,
        shadowOffsetY: 0,
        shadowBlur: 0,
        shadowColor: [0, 0, 0, 0],
        font: "10px sans-serif",
        fontSize: 10,
        fontWeight: "normal",
        fontStyle: "normal",
        fontFamily: "sans-serif"
      };
    }
    draw(reserve = false, callback) {
      var actions = [...this.actions];
      this.actions = [];
      this.path = [];
      operateCanvas(
        this.id,
        this.pageId,
        "actionsChanged",
        {
          actions,
          reserve
        },
        callback
      );
    }
    createLinearGradient(x0, y0, x1, y1) {
      return new CanvasGradient("linear", [x0, y0, x1, y1]);
    }
    createCircularGradient(x, y, r) {
      return new CanvasGradient("radial", [x, y, r]);
    }
    createPattern(image2, repetition) {
      if (void 0 === repetition) {
        console.error(
          "Failed to execute 'createPattern' on 'CanvasContext': 2 arguments required, but only 1 present."
        );
      } else if (["repeat", "repeat-x", "repeat-y", "no-repeat"].indexOf(repetition) < 0) {
        console.error(
          "Failed to execute 'createPattern' on 'CanvasContext': The provided type ('" + repetition + "') is not one of 'repeat', 'no-repeat', 'repeat-x', or 'repeat-y'."
        );
      } else {
        return new Pattern(image2, repetition);
      }
    }
    measureText(text2) {
      const font2 = this.state.font;
      let width = 0;
      {
        width = measureText(text2, font2);
      }
      return new TextMetrics(width);
    }
    save() {
      this.actions.push({
        method: "save",
        data: []
      });
      this.drawingState.push(this.state);
    }
    restore() {
      this.actions.push({
        method: "restore",
        data: []
      });
      this.state = this.drawingState.pop() || {
        lineDash: [0, 0],
        shadowOffsetX: 0,
        shadowOffsetY: 0,
        shadowBlur: 0,
        shadowColor: [0, 0, 0, 0],
        font: "10px sans-serif",
        fontSize: 10,
        fontWeight: "normal",
        fontStyle: "normal",
        fontFamily: "sans-serif"
      };
    }
    beginPath() {
      this.path = [];
      this.subpath = [];
      this.path.push({
        method: "beginPath",
        data: []
      });
    }
    moveTo(x, y) {
      this.path.push({
        method: "moveTo",
        data: [x, y]
      });
      this.subpath = [[x, y]];
    }
    lineTo(x, y) {
      if (this.path.length === 0 && this.subpath.length === 0) {
        this.path.push({
          method: "moveTo",
          data: [x, y]
        });
      } else {
        this.path.push({
          method: "lineTo",
          data: [x, y]
        });
      }
      this.subpath.push([x, y]);
    }
    quadraticCurveTo(cpx, cpy, x, y) {
      this.path.push({
        method: "quadraticCurveTo",
        data: [cpx, cpy, x, y]
      });
      this.subpath.push([x, y]);
    }
    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
      this.path.push({
        method: "bezierCurveTo",
        data: [cp1x, cp1y, cp2x, cp2y, x, y]
      });
      this.subpath.push([x, y]);
    }
    arc(x, y, r, sAngle, eAngle, counterclockwise = false) {
      this.path.push({
        method: "arc",
        data: [x, y, r, sAngle, eAngle, counterclockwise]
      });
      this.subpath.push([x, y]);
    }
    rect(x, y, width, height) {
      this.path.push({
        method: "rect",
        data: [x, y, width, height]
      });
      this.subpath = [[x, y]];
    }
    arcTo(x1, y1, x2, y2, radius) {
      this.path.push({
        method: "arcTo",
        data: [x1, y1, x2, y2, radius]
      });
      this.subpath.push([x2, y2]);
    }
    clip() {
      this.actions.push({
        method: "clip",
        data: [...this.path]
      });
    }
    closePath() {
      this.path.push({
        method: "closePath",
        data: []
      });
      if (this.subpath.length) {
        this.subpath = [this.subpath.shift()];
      }
    }
    clearActions() {
      this.actions = [];
      this.path = [];
      this.subpath = [];
    }
    getActions() {
      var actions = [...this.actions];
      this.clearActions();
      return actions;
    }
    set lineDashOffset(value) {
      this.actions.push({
        method: "setLineDashOffset",
        data: [value]
      });
    }
    set globalCompositeOperation(type2) {
      this.actions.push({
        method: "setGlobalCompositeOperation",
        data: [type2]
      });
    }
    set shadowBlur(level) {
      this.actions.push({
        method: "setShadowBlur",
        data: [level]
      });
    }
    set shadowColor(color2) {
      this.actions.push({
        method: "setShadowColor",
        data: [color2]
      });
    }
    set shadowOffsetX(x) {
      this.actions.push({
        method: "setShadowOffsetX",
        data: [x]
      });
    }
    set shadowOffsetY(y) {
      this.actions.push({
        method: "setShadowOffsetY",
        data: [y]
      });
    }
    set font(value) {
      var self2 = this;
      this.state.font = value;
      var fontFormat = value.match(
        /^(([\w\-]+\s)*)(\d+r?px)(\/(\d+\.?\d*(r?px)?))?\s+(.*)/
      );
      if (fontFormat) {
        var style = fontFormat[1].trim().split(/\s/);
        var fontSize = parseFloat(fontFormat[3]);
        var fontFamily = fontFormat[7];
        var actions = [];
        style.forEach(function(value2, index2) {
          if (["italic", "oblique", "normal"].indexOf(value2) > -1) {
            actions.push({
              method: "setFontStyle",
              data: [value2]
            });
            self2.state.fontStyle = value2;
          } else if (["bold", "normal"].indexOf(value2) > -1) {
            actions.push({
              method: "setFontWeight",
              data: [value2]
            });
            self2.state.fontWeight = value2;
          } else if (index2 === 0) {
            actions.push({
              method: "setFontStyle",
              data: ["normal"]
            });
            self2.state.fontStyle = "normal";
          } else if (index2 === 1) {
            pushAction();
          }
        });
        if (style.length === 1) {
          pushAction();
        }
        style = actions.map(function(action) {
          return action.data[0];
        }).join(" ");
        this.state.fontSize = fontSize;
        this.state.fontFamily = fontFamily;
        this.actions.push({
          method: "setFont",
          data: [`${style} ${fontSize}px ${fontFamily}`]
        });
      } else {
        console.warn("Failed to set 'font' on 'CanvasContext': invalid format.");
      }
      function pushAction() {
        actions.push({
          method: "setFontWeight",
          data: ["normal"]
        });
        self2.state.fontWeight = "normal";
      }
    }
    get font() {
      return this.state.font;
    }
    set fillStyle(color2) {
      this.setFillStyle(color2);
    }
    set strokeStyle(color2) {
      this.setStrokeStyle(color2);
    }
    set globalAlpha(value) {
      value = Math.floor(255 * parseFloat(value));
      this.actions.push({
        method: "setGlobalAlpha",
        data: [value]
      });
    }
    set textAlign(align2) {
      this.actions.push({
        method: "setTextAlign",
        data: [align2]
      });
    }
    set lineCap(type2) {
      this.actions.push({
        method: "setLineCap",
        data: [type2]
      });
    }
    set lineJoin(type2) {
      this.actions.push({
        method: "setLineJoin",
        data: [type2]
      });
    }
    set lineWidth(value) {
      this.actions.push({
        method: "setLineWidth",
        data: [value]
      });
    }
    set miterLimit(value) {
      this.actions.push({
        method: "setMiterLimit",
        data: [value]
      });
    }
    set textBaseline(type2) {
      this.actions.push({
        method: "setTextBaseline",
        data: [type2]
      });
    }
  }
  let index$w = 0;
  let optionsCache = {};
  function operateEditor(componentId, pageId, type2, options) {
    const data = { options };
    const needCallOptions = options && ("success" in options || "fail" in options || "complete" in options);
    if (needCallOptions) {
      const callbackId = String(index$w++);
      data.callbackId = callbackId;
      optionsCache[callbackId] = options;
    }
    UniServiceJSBridge$1.invokeViewMethod(
      `editor.${componentId}`,
      {
        type: type2,
        data
      },
      pageId,
      ({ callbackId, data: data2 }) => {
        if (needCallOptions) {
          callOptions(optionsCache[callbackId], data2);
          delete optionsCache[callbackId];
        }
      }
    );
  }
  class EditorContext {
    constructor(id2, pageId) {
      this.id = id2;
      this.pageId = pageId;
    }
    format(name, value) {
      this._exec("format", {
        name,
        value
      });
    }
    insertDivider() {
      this._exec("insertDivider");
    }
    insertImage(options) {
      this._exec("insertImage", options);
    }
    insertText(options) {
      this._exec("insertText", options);
    }
    setContents(options) {
      this._exec("setContents", options);
    }
    getContents(options) {
      this._exec("getContents", options);
    }
    clear(options) {
      this._exec("clear", options);
    }
    removeFormat(options) {
      this._exec("removeFormat", options);
    }
    undo(options) {
      this._exec("undo", options);
    }
    redo(options) {
      this._exec("redo", options);
    }
    blur(options) {
      this._exec("blur", options);
    }
    getSelectionText(options) {
      this._exec("getSelectionText", options);
    }
    scrollIntoView(options) {
      this._exec("scrollIntoView", options);
    }
    _exec(method2, options) {
      operateEditor(this.id, this.pageId, method2, options);
    }
  }
  const ContextClasss = {
    canvas: CanvasContext,
    map: MapContext,
    video: VideoContext,
    editor: EditorContext
  };
  function convertContext(result) {
    if (result && result.contextInfo) {
      const { id: id2, type: type2, page: page2 } = result.contextInfo;
      const ContextClass = ContextClasss[type2];
      result.context = new ContextClass(id2, page2);
      delete result.contextInfo;
    }
  }
  class NodesRef {
    constructor(selectorQuery, component, selector, single) {
      this._selectorQuery = selectorQuery;
      this._component = component;
      this._selector = selector;
      this._single = single;
    }
    boundingClientRect(callback) {
      this._selectorQuery._push(
        this._selector,
        this._component,
        this._single,
        {
          id: true,
          dataset: true,
          rect: true,
          size: true
        },
        callback
      );
      return this._selectorQuery;
    }
    fields(fields2, callback) {
      this._selectorQuery._push(
        this._selector,
        this._component,
        this._single,
        fields2,
        callback
      );
      return this._selectorQuery;
    }
    scrollOffset(callback) {
      this._selectorQuery._push(
        this._selector,
        this._component,
        this._single,
        {
          id: true,
          dataset: true,
          scrollOffset: true
        },
        callback
      );
      return this._selectorQuery;
    }
    context(callback) {
      this._selectorQuery._push(
        this._selector,
        this._component,
        this._single,
        {
          context: true
        },
        callback
      );
      return this._selectorQuery;
    }
    node(_callback) {
      return this._selectorQuery;
    }
  }
  class SelectorQuery {
    constructor(page2) {
      this._component = void 0;
      this._page = page2;
      this._queue = [];
      this._queueCb = [];
    }
    exec(callback) {
      requestComponentInfo(
        this._page,
        this._queue,
        (res) => {
          const queueCbs = this._queueCb;
          res.forEach((result, index2) => {
            if (isArray$a(result)) {
              result.forEach(convertContext);
            } else {
              convertContext(result);
            }
            const queueCb = queueCbs[index2];
            if (isFunction$3(queueCb)) {
              queueCb.call(this, result);
            }
          });
          if (isFunction$3(callback)) {
            callback.call(this, res);
          }
        }
      );
      return this._nodesRef;
    }
    in(component) {
      this._component = resolveComponentInstance(component);
      return this;
    }
    select(selector) {
      return this._nodesRef = new NodesRef(
        this,
        this._component,
        selector,
        true
      );
    }
    selectAll(selector) {
      return this._nodesRef = new NodesRef(
        this,
        this._component,
        selector,
        false
      );
    }
    selectViewport() {
      return this._nodesRef = new NodesRef(this, null, "", true);
    }
    _push(selector, component, single, fields2, callback) {
      this._queue.push({
        component,
        selector,
        single,
        fields: fields2
      });
      this._queueCb.push(callback);
    }
  }
  const createSelectorQuery = /* @__PURE__ */ defineSyncApi("createSelectorQuery", (context) => {
    context = resolveComponentInstance(context);
    if (context && !getPageIdByVm(context)) {
      context = null;
    }
    return new SelectorQuery(context || getCurrentPageVm());
  });
  const API_CREATE_ANIMATION = "createAnimation";
  const CreateAnimationOptions = {
    // 目前参数校验不支持此api校验
    formatArgs: {
      /* duration: 400,
      timingFunction(timingFunction, params) {
        params.timingFunction = elemInArray(timingFunction, timingFunctions)
      },
      delay: 0,
      transformOrigin: '50% 50% 0', */
    }
  };
  const CreateAnimationProtocol = {
    duration: Number,
    timingFunction: String,
    delay: Number,
    transformOrigin: String
  };
  const defaultOption = {
    duration: 400,
    timingFunction: "linear",
    delay: 0,
    transformOrigin: "50% 50% 0"
  };
  let MPAnimation$1 = class MPAnimation {
    constructor(option) {
      this.actions = [];
      this.currentTransform = {};
      this.currentStepAnimates = [];
      this.option = extend({}, defaultOption, option);
    }
    _getOption(option) {
      const _option = {
        transition: extend({}, this.option, option),
        transformOrigin: ""
      };
      _option.transformOrigin = _option.transition.transformOrigin;
      delete _option.transition.transformOrigin;
      return _option;
    }
    _pushAnimates(type2, args) {
      this.currentStepAnimates.push({
        type: type2,
        args
      });
    }
    _converType(type2) {
      return type2.replace(/[A-Z]/g, (text2) => {
        return `-${text2.toLowerCase()}`;
      });
    }
    _getValue(value) {
      return typeof value === "number" ? `${value}px` : value;
    }
    export() {
      const actions = this.actions;
      this.actions = [];
      return {
        actions
      };
    }
    step(option) {
      this.currentStepAnimates.forEach((animate) => {
        if (animate.type !== "style") {
          this.currentTransform[animate.type] = animate;
        } else {
          this.currentTransform[`${animate.type}.${animate.args[0]}`] = animate;
        }
      });
      this.actions.push({
        animates: Object.values(
          this.currentTransform
        ),
        option: this._getOption(option)
      });
      this.currentStepAnimates = [];
      return this;
    }
  };
  const initAnimationProperty = /* @__PURE__ */ once(() => {
    const animateTypes12 = [
      "matrix",
      "matrix3d",
      "rotate",
      "rotate3d",
      "rotateX",
      "rotateY",
      "rotateZ",
      "scale",
      "scale3d",
      "scaleX",
      "scaleY",
      "scaleZ",
      "skew",
      "skewX",
      "skewY",
      "translate",
      "translate3d",
      "translateX",
      "translateY",
      "translateZ"
    ];
    const animateTypes22 = ["opacity", "backgroundColor"];
    const animateTypes32 = ["width", "height", "left", "right", "top", "bottom"];
    animateTypes12.concat(animateTypes22, animateTypes32).forEach((type2) => {
      MPAnimation$1.prototype[type2] = function(...args) {
        if (animateTypes22.concat(animateTypes32).includes(type2)) {
          this._pushAnimates("style", [
            this._converType(type2),
            animateTypes32.includes(type2) ? this._getValue(args[0]) : args[0]
          ]);
        } else {
          this._pushAnimates(type2, args);
        }
        return this;
      };
    });
  });
  const createAnimation$1 = /* @__PURE__ */ defineSyncApi(
    API_CREATE_ANIMATION,
    (option) => {
      initAnimationProperty();
      return new MPAnimation$1(option);
    },
    CreateAnimationProtocol,
    CreateAnimationOptions
  );
  const API_GET_LOCALE = "getLocale";
  const getLocale = /* @__PURE__ */ defineSyncApi(
    API_GET_LOCALE,
    () => {
      return useI18n().getLocale();
    }
  );
  const API_VIBRATE_SHORT = "vibrateShort";
  const API_GET_STORAGE_SYNC = "getStorageSync";
  const API_SET_STORAGE = "setStorage";
  const API_SET_STORAGE_SYNC = "setStorageSync";
  const API_REMOVE_STORAGE = "removeStorage";
  const API_HIDE_KEYBOARD = "hideKeyboard";
  const API_CHOOSE_IMAGE = "chooseImage";
  const ChooseImageOptions = {
    formatArgs: {
      count(value, params) {
        if (!value || value <= 0) {
          params.count = 9;
        }
      },
      sizeType(sizeType, params) {
        params.sizeType = elemsInArray(sizeType, CHOOSE_SIZE_TYPES);
      },
      sourceType(sourceType, params) {
        params.sourceType = elemsInArray(sourceType, CHOOSE_SOURCE_TYPES);
      },
      extension(extension, params) {
        if (extension instanceof Array && extension.length === 0) {
          return "param extension should not be empty.";
        }
        if (!extension)
          params.extension = ["*"];
      }
    }
  };
  const ChooseImageProtocol = {
    count: Number,
    sizeType: [Array, String],
    sourceType: Array,
    extension: Array
  };
  const API_PREVIEW_IMAGE = "previewImage";
  const PreviewImageOptions = {
    formatArgs: {
      urls(urls, params) {
        params.urls = urls.map(
          (url2) => isString$1(url2) && url2 ? getRealPath(url2) : ""
        );
      },
      current(current, params) {
        if (typeof current === "number") {
          params.current = current > 0 && current < params.urls.length ? current : 0;
        } else if (isString$1(current) && current) {
          params.current = getRealPath(current);
        }
      }
    }
  };
  const PreviewImageProtocol = {
    urls: {
      type: Array,
      required: true
    },
    current: {
      type: [Number, String]
    }
  };
  const API_REQUEST = "request";
  const dataType = {
    JSON: "json"
  };
  const RESPONSE_TYPE = ["text", "arraybuffer"];
  const DEFAULT_RESPONSE_TYPE = "text";
  const encode = encodeURIComponent;
  function stringifyQuery(url2, data) {
    let str = url2.split("#");
    const hash = str[1] || "";
    str = str[0].split("?");
    let query = str[1] || "";
    url2 = str[0];
    const search = query.split("&").filter((item) => item);
    const params = {};
    search.forEach((item) => {
      const part = item.split("=");
      params[part[0]] = part[1];
    });
    for (const key in data) {
      if (hasOwn$1(data, key)) {
        let v2 = data[key];
        if (typeof v2 === "undefined" || v2 === null) {
          v2 = "";
        } else if (isPlainObject(v2)) {
          v2 = JSON.stringify(v2);
        }
        params[encode(key)] = encode(v2);
      }
    }
    query = Object.keys(params).map((item) => `${item}=${params[item]}`).join("&");
    return url2 + (query ? "?" + query : "") + (hash ? "#" + hash : "");
  }
  const RequestProtocol = {
    method: String,
    data: [Object, String, Array, ArrayBuffer],
    url: {
      type: String,
      required: true
    },
    header: Object,
    dataType: String,
    responseType: String,
    withCredentials: Boolean
  };
  const RequestOptions = {
    formatArgs: {
      method(value, params) {
        params.method = elemInArray(
          (value || "").toUpperCase(),
          HTTP_METHODS
        );
      },
      data(value, params) {
        params.data = value || "";
      },
      url(value, params) {
        if (params.method === HTTP_METHODS[0] && isPlainObject(params.data) && Object.keys(params.data).length) {
          params.url = stringifyQuery(value, params.data);
        }
      },
      header(value, params) {
        const header = params.header = value || {};
        if (params.method !== HTTP_METHODS[0]) {
          if (!Object.keys(header).find(
            (key) => key.toLowerCase() === "content-type"
          )) {
            header["Content-Type"] = "application/json";
          }
        }
      },
      dataType(value, params) {
        params.dataType = (value || dataType.JSON).toLowerCase();
      },
      responseType(value, params) {
        params.responseType = (value || "").toLowerCase();
        if (RESPONSE_TYPE.indexOf(params.responseType) === -1) {
          params.responseType = DEFAULT_RESPONSE_TYPE;
        }
      }
    }
  };
  const API_UPLOAD_FILE = "uploadFile";
  const UploadFileOptions = {
    formatArgs: {
      filePath(filePath, params) {
        if (filePath) {
          params.filePath = getRealPath(filePath);
        }
      },
      header(value, params) {
        params.header = value || {};
      },
      formData(value, params) {
        params.formData = value || {};
      }
    }
  };
  const UploadFileProtocol = {
    url: {
      type: String,
      required: true
    },
    files: Array,
    filePath: String,
    name: String,
    header: Object,
    formData: Object,
    timeout: Number
  };
  function encodeQueryString(url2) {
    if (!isString$1(url2)) {
      return url2;
    }
    const index2 = url2.indexOf("?");
    if (index2 === -1) {
      return url2;
    }
    const query = url2.slice(index2 + 1).trim().replace(/^(\?|#|&)/, "");
    if (!query) {
      return url2;
    }
    url2 = url2.slice(0, index2);
    const params = [];
    query.split("&").forEach((param) => {
      const parts = param.replace(/\+/g, " ").split("=");
      const key = parts.shift();
      const val = parts.length > 0 ? parts.join("=") : "";
      params.push(key + "=" + encodeURIComponent(val));
    });
    return params.length ? url2 + "?" + params.join("&") : url2;
  }
  const ANIMATION_IN$1 = [
    "slide-in-right",
    "slide-in-left",
    "slide-in-top",
    "slide-in-bottom",
    "fade-in",
    "zoom-out",
    "zoom-fade-out",
    "pop-in",
    "none"
  ];
  const ANIMATION_OUT$1 = [
    "slide-out-right",
    "slide-out-left",
    "slide-out-top",
    "slide-out-bottom",
    "fade-out",
    "zoom-in",
    "zoom-fade-in",
    "pop-out",
    "none"
  ];
  const BaseRouteProtocol = {
    url: {
      type: String,
      required: true
    }
  };
  const API_NAVIGATE_TO = "navigateTo";
  const API_REDIRECT_TO = "redirectTo";
  const API_RE_LAUNCH = "reLaunch";
  const API_SWITCH_TAB = "switchTab";
  const API_NAVIGATE_BACK = "navigateBack";
  const API_PRELOAD_PAGE = "preloadPage";
  const API_UN_PRELOAD_PAGE = "unPreloadPage";
  const NavigateToProtocol = /* @__PURE__ */ extend(
    {},
    BaseRouteProtocol,
    createAnimationProtocol(ANIMATION_IN$1)
  );
  const NavigateBackProtocol = /* @__PURE__ */ extend(
    {
      delta: {
        type: Number
      }
    },
    createAnimationProtocol(ANIMATION_OUT$1)
  );
  const RedirectToProtocol = BaseRouteProtocol;
  const ReLaunchProtocol = BaseRouteProtocol;
  const SwitchTabProtocol = BaseRouteProtocol;
  const NavigateToOptions = /* @__PURE__ */ createRouteOptions(API_NAVIGATE_TO);
  const RedirectToOptions = /* @__PURE__ */ createRouteOptions(API_REDIRECT_TO);
  const ReLaunchOptions = /* @__PURE__ */ createRouteOptions(API_RE_LAUNCH);
  const SwitchTabOptions = /* @__PURE__ */ createRouteOptions(API_SWITCH_TAB);
  const NavigateBackOptions = {
    formatArgs: {
      delta(value, params) {
        value = parseInt(value + "") || 1;
        params.delta = Math.min(getCurrentPages$1().length - 1, value);
      }
    }
  };
  function createAnimationProtocol(animationTypes) {
    return {
      animationType: {
        type: String,
        validator(type2) {
          if (type2 && animationTypes.indexOf(type2) === -1) {
            return "`" + type2 + "` is not supported for `animationType` (supported values are: `" + animationTypes.join("`|`") + "`)";
          }
        }
      },
      animationDuration: {
        type: Number
      }
    };
  }
  let navigatorLock;
  function beforeRoute() {
    navigatorLock = "";
  }
  function createRouteOptions(type2) {
    return {
      formatArgs: {
        url: createNormalizeUrl(type2)
      },
      beforeAll: beforeRoute
    };
  }
  function createNormalizeUrl(type2) {
    return function normalizeUrl(url2, params) {
      if (!url2) {
        return `Missing required args: "url"`;
      }
      url2 = normalizeRoute(url2);
      const pagePath = url2.split("?")[0];
      const routeOptions = getRouteOptions(pagePath, true);
      if (!routeOptions) {
        return "page `" + url2 + "` is not found";
      }
      if (type2 === API_NAVIGATE_TO || type2 === API_REDIRECT_TO) {
        if (routeOptions.meta.isTabBar) {
          return `can not ${type2} a tabbar page`;
        }
      } else if (type2 === API_SWITCH_TAB) {
        if (!routeOptions.meta.isTabBar) {
          return "can not switch to no-tabBar page";
        }
      }
      if ((type2 === API_SWITCH_TAB || type2 === API_PRELOAD_PAGE) && routeOptions.meta.isTabBar && params.openType !== "appLaunch") {
        url2 = pagePath;
      }
      if (routeOptions.meta.isEntry) {
        url2 = url2.replace(routeOptions.alias, "/");
      }
      params.url = encodeQueryString(url2);
      if (type2 === API_UN_PRELOAD_PAGE) {
        return;
      } else if (type2 === API_PRELOAD_PAGE) {
        if (routeOptions.meta.isTabBar) {
          const pages2 = getCurrentPages$1();
          const tabBarPagePath = routeOptions.path.slice(1);
          if (pages2.find((page2) => page2.route === tabBarPagePath)) {
            return "tabBar page `" + tabBarPagePath + "` already exists";
          }
        }
        return;
      }
      if (navigatorLock === url2 && params.openType !== "appLaunch") {
        return `${navigatorLock} locked`;
      }
      if (__uniConfig.ready) {
        navigatorLock = url2;
      }
    };
  }
  const API_HIDE_LOADING = "hideLoading";
  const API_SHOW_LOADING = "showLoading";
  const ShowLoadingProtocol = {
    title: String,
    mask: Boolean
  };
  const ShowLoadingOptions = {
    formatArgs: {
      title: "",
      mask: false
    }
  };
  const API_SHOW_MODAL = "showModal";
  const ShowModalProtocol = {
    title: String,
    content: String,
    showCancel: Boolean,
    cancelText: String,
    cancelColor: String,
    confirmText: String,
    confirmColor: String
  };
  const ShowModalOptions = {
    beforeInvoke() {
      initI18nShowModalMsgsOnce();
    },
    formatArgs: {
      title: "",
      content: "",
      placeholderText: "",
      showCancel: true,
      editable: false,
      cancelText(_value, params) {
        if (!hasOwn$1(params, "cancelText")) {
          const { t: t2 } = useI18n();
          params.cancelText = t2("uni.showModal.cancel");
        }
      },
      cancelColor: "#000",
      confirmText(_value, params) {
        if (!hasOwn$1(params, "confirmText")) {
          const { t: t2 } = useI18n();
          params.confirmText = t2("uni.showModal.confirm");
        }
      },
      confirmColor: PRIMARY_COLOR
    }
  };
  const API_SHOW_TOAST = "showToast";
  const SHOW_TOAST_ICON = [
    "success",
    "loading",
    "none",
    "error"
  ];
  const ShowToastProtocol = {
    title: String,
    icon: String,
    image: String,
    duration: Number,
    mask: Boolean
  };
  const ShowToastOptions = {
    formatArgs: {
      title: "",
      icon(type2, params) {
        params.icon = elemInArray(type2, SHOW_TOAST_ICON);
      },
      image(value, params) {
        if (value) {
          params.image = getRealPath(value);
        } else {
          params.image = "";
        }
      },
      duration: 1500,
      mask: false
    }
  };
  const IndexOptions = {
    beforeInvoke() {
      const pageMeta = getCurrentPageMeta();
      if (pageMeta && !pageMeta.isTabBar) {
        return "not TabBar page";
      }
    },
    formatArgs: {
      index(value) {
        if (!__uniConfig.tabBar.list[value]) {
          return "tabbar item not found";
        }
      }
    }
  };
  ({
    beforeInvoke: IndexOptions.beforeInvoke,
    formatArgs: /* @__PURE__ */ extend(
      {
        pagePath(value, params) {
          if (value) {
            params.pagePath = removeLeadingSlash(value);
          }
        }
      },
      IndexOptions.formatArgs
    )
  });
  const GRADIENT_RE = /^(linear|radial)-gradient\(.+?\);?$/;
  ({
    beforeInvoke: IndexOptions.beforeInvoke,
    formatArgs: {
      backgroundImage(value, params) {
        if (value && !GRADIENT_RE.test(value)) {
          params.backgroundImage = getRealPath(value);
        }
      },
      borderStyle(value, params) {
        if (value) {
          params.borderStyle = value === "white" ? "white" : "black";
        }
      }
    }
  });
  ({
    beforeInvoke: IndexOptions.beforeInvoke,
    formatArgs: /* @__PURE__ */ extend(
      {
        text(value, params) {
          if (getLen(value) >= 4) {
            params.text = "...";
          }
        }
      },
      IndexOptions.formatArgs
    )
  });
  const files = {};
  function urlToFile(url2, local) {
    const file = files[url2];
    if (file) {
      return Promise.resolve(file);
    }
    if (/^data:[a-z-]+\/[a-z-]+;base64,/.test(url2)) {
      return Promise.resolve(base64ToFile(url2));
    }
    if (local) {
      return Promise.reject(new Error("not find"));
    }
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url2, true);
      xhr.responseType = "blob";
      xhr.onload = function() {
        resolve(this.response);
      };
      xhr.onerror = reject;
      xhr.send();
    });
  }
  function base64ToFile(base64) {
    const base64Array = base64.split(",");
    const res = base64Array[0].match(/:(.*?);/);
    const type2 = res ? res[1] : "";
    const str = atob(base64Array[1]);
    let n = str.length;
    const array2 = new Uint8Array(n);
    while (n--) {
      array2[n] = str.charCodeAt(n);
    }
    return blobToFile(array2, type2);
  }
  function getExtname(type2) {
    const extname = type2.split("/")[1];
    return extname ? `.${extname}` : "";
  }
  function blobToFile(blob, type2) {
    let file;
    if (blob instanceof File) {
      file = blob;
    } else {
      type2 = type2 || blob.type || "";
      const filename = `${Date.now()}${getExtname(type2)}`;
      try {
        file = new File([blob], filename, { type: type2 });
      } catch (error2) {
        blob = blob instanceof Blob ? blob : new Blob([blob], { type: type2 });
        file = blob;
        file.name = file.name || filename;
      }
    }
    return file;
  }
  function fileToUrl(file) {
    for (const key in files) {
      if (hasOwn$1(files, key)) {
        const oldFile = files[key];
        if (oldFile === file) {
          return key;
        }
      }
    }
    var url2 = (window.URL || window.webkitURL).createObjectURL(file);
    files[url2] = file;
    return url2;
  }
  const ResizeSensor = /* @__PURE__ */ defineBuiltInComponent({
    name: "ResizeSensor",
    props: {
      initial: {
        type: Boolean,
        default: false
      }
    },
    emits: ["resize"],
    setup(props2, {
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const reset = useResizeSensorReset(rootRef);
      const update = useResizeSensorUpdate(rootRef, emit2, reset);
      useResizeSensorLifecycle(rootRef, props2, update, reset);
      return () => vue.createVNode("uni-resize-sensor", {
        "ref": rootRef,
        "onAnimationstartOnce": update
      }, [vue.createVNode("div", {
        "onScroll": update
      }, [vue.createVNode("div", null, null)], 40, ["onScroll"]), vue.createVNode("div", {
        "onScroll": update
      }, [vue.createVNode("div", null, null)], 40, ["onScroll"])], 40, ["onAnimationstartOnce"]);
    }
  });
  function useResizeSensorUpdate(rootRef, emit2, reset) {
    const size = vue.reactive({
      width: -1,
      height: -1
    });
    vue.watch(() => extend({}, size), (value) => emit2("resize", value));
    return () => {
      const rootEl = rootRef.value;
      size.width = rootEl.offsetWidth;
      size.height = rootEl.offsetHeight;
      reset();
    };
  }
  function useResizeSensorReset(rootRef) {
    return () => {
      const {
        firstElementChild,
        lastElementChild
      } = rootRef.value;
      firstElementChild.scrollLeft = 1e5;
      firstElementChild.scrollTop = 1e5;
      lastElementChild.scrollLeft = 1e5;
      lastElementChild.scrollTop = 1e5;
    };
  }
  function useResizeSensorLifecycle(rootRef, props2, update, reset) {
    vue.onActivated(reset);
    vue.onMounted(() => {
      if (props2.initial) {
        vue.nextTick(update);
      }
      const rootEl = rootRef.value;
      if (rootEl.offsetParent !== rootEl.parentElement) {
        rootEl.parentElement.style.position = "relative";
      }
      if (!("AnimationEvent" in window)) {
        reset();
      }
    });
  }
  let resetTimer;
  function iosHideKeyboard() {
  }
  const props$u = {
    cursorSpacing: {
      type: [Number, String],
      default: 0
    },
    showConfirmBar: {
      type: [Boolean, String],
      default: "auto"
    },
    adjustPosition: {
      type: [Boolean, String],
      default: true
    },
    autoBlur: {
      type: [Boolean, String],
      default: false
    }
  };
  const emit$1 = ["keyboardheightchange"];
  function useKeyboard$1(props2, elRef, trigger) {
    function initKeyboard(el) {
      const isApple = vue.computed(
        () => String(navigator.vendor).indexOf("Apple") === 0
      );
      el.addEventListener("focus", () => {
        clearTimeout(resetTimer);
        document.addEventListener("click", iosHideKeyboard, false);
      });
      const onKeyboardHide = () => {
        document.removeEventListener("click", iosHideKeyboard, false);
        if (isApple.value) {
          document.documentElement.scrollTo(
            document.documentElement.scrollLeft,
            document.documentElement.scrollTop
          );
        }
      };
      el.addEventListener("blur", () => {
        if (isApple.value) {
          el.blur();
        }
        onKeyboardHide();
      });
    }
    vue.watch(
      () => elRef.value,
      (el) => el && initKeyboard(el)
    );
  }
  const props$s = {
    src: {
      type: String,
      default: ""
    },
    mode: {
      type: String,
      default: "scaleToFill"
    },
    lazyLoad: {
      type: [Boolean, String],
      default: false
    },
    draggable: {
      type: Boolean,
      default: false
    }
  };
  const FIX_MODES = {
    widthFix: ["offsetWidth", "height", (value, ratio) => value / ratio],
    heightFix: ["offsetHeight", "width", (value, ratio) => value * ratio]
  };
  const IMAGE_MODES = {
    aspectFit: ["center center", "contain"],
    aspectFill: ["center center", "cover"],
    widthFix: [, "100% 100%"],
    heightFix: [, "100% 100%"],
    top: ["center top"],
    bottom: ["center bottom"],
    center: ["center center"],
    left: ["left center"],
    right: ["right center"],
    "top left": ["left top"],
    "top right": ["right top"],
    "bottom left": ["left bottom"],
    "bottom right": ["right bottom"]
  };
  const index$q = /* @__PURE__ */ defineBuiltInComponent({
    name: "Image",
    props: props$s,
    setup(props2, {
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const state2 = useImageState(rootRef, props2);
      const trigger = useCustomEvent(rootRef, emit2);
      const {
        fixSize
      } = useImageSize(rootRef, props2, state2);
      useImageLoader(state2, props2, rootRef, fixSize, trigger);
      return () => {
        return vue.createVNode("uni-image", {
          "ref": rootRef
        }, [vue.createVNode("div", {
          "style": state2.modeStyle
        }, null, 4), FIX_MODES[props2.mode] ? (
          // @ts-ignore
          vue.createVNode(ResizeSensor, {
            "onResize": fixSize
          }, null, 8, ["onResize"])
        ) : vue.createVNode("span", null, null)], 512);
      };
    }
  });
  function useImageState(rootRef, props2) {
    const imgSrc = vue.ref("");
    const modeStyleRef = vue.computed(() => {
      let size = "auto";
      let position = "";
      const opts = IMAGE_MODES[props2.mode];
      if (!opts) {
        position = "0% 0%";
        size = "100% 100%";
      } else {
        opts[0] && (position = opts[0]);
        opts[1] && (size = opts[1]);
      }
      return `background-image:${imgSrc.value ? 'url("' + imgSrc.value + '")' : "none"};background-position:${position};background-size:${size};`;
    });
    const state2 = vue.reactive({
      rootEl: rootRef,
      src: vue.computed(() => props2.src ? getRealPath(props2.src) : ""),
      origWidth: 0,
      origHeight: 0,
      origStyle: {
        width: "",
        height: ""
      },
      modeStyle: modeStyleRef,
      imgSrc
    });
    vue.onMounted(() => {
      const rootEl = rootRef.value;
      const style = rootEl.style;
      state2.origWidth = Number(style.width) || 0;
      state2.origHeight = Number(style.height) || 0;
    });
    return state2;
  }
  function useImageLoader(state2, props2, rootRef, fixSize, trigger) {
    let img;
    let draggableImg;
    const setState = (width = 0, height = 0, imgSrc = "") => {
      state2.origWidth = width;
      state2.origHeight = height;
      state2.imgSrc = imgSrc;
    };
    const loadImage = (src) => {
      if (!src) {
        resetImage();
        setState();
        return;
      }
      img = img || new Image();
      img.onload = (evt) => {
        const {
          width,
          height
        } = img;
        setState(width, height, src);
        fixSize();
        img.draggable = props2.draggable;
        if (draggableImg) {
          draggableImg.remove();
        }
        draggableImg = img;
        rootRef.value.appendChild(img);
        resetImage();
        trigger("load", evt, {
          width,
          height
        });
      };
      img.onerror = (evt) => {
        setState();
        resetImage();
        trigger("error", evt, {
          errMsg: `GET ${state2.src} 404 (Not Found)`
        });
      };
      img.src = src;
    };
    const resetImage = () => {
      if (img) {
        img.onload = null;
        img.onerror = null;
        img = null;
      }
    };
    vue.watch(() => state2.src, (value) => loadImage(value));
    vue.watch(() => state2.imgSrc, (value) => {
      if (!value && draggableImg) {
        draggableImg.remove();
        draggableImg = null;
      }
    });
    vue.onMounted(() => loadImage(state2.src));
    vue.onBeforeUnmount(() => resetImage());
  }
  const isChrome = navigator.vendor === "Google Inc.";
  function fixNumber(num) {
    if (isChrome && num > 10) {
      num = Math.round(num / 2) * 2;
    }
    return num;
  }
  function useImageSize(rootRef, props2, state2) {
    const fixSize = () => {
      const {
        mode: mode2
      } = props2;
      const names = FIX_MODES[mode2];
      if (!names) {
        return;
      }
      const {
        origWidth,
        origHeight
      } = state2;
      const ratio = origWidth && origHeight ? origWidth / origHeight : 0;
      if (!ratio) {
        return;
      }
      const rootEl = rootRef.value;
      const value = rootEl[names[0]];
      if (value) {
        rootEl.style[names[1]] = fixNumber(names[2](value, ratio)) + "px";
      }
    };
    const resetSize = () => {
      const {
        style
      } = rootRef.value;
      const {
        origStyle: {
          width,
          height
        }
      } = state2;
      style.width = width;
      style.height = height;
    };
    vue.watch(() => props2.mode, (value, oldValue) => {
      if (FIX_MODES[oldValue]) {
        resetSize();
      }
      if (FIX_MODES[value]) {
        fixSize();
      }
    });
    return {
      fixSize,
      resetSize
    };
  }
  function throttle$1(fn, wait) {
    let last = 0;
    let timeout2;
    let waitCallback;
    const newFn = function(...arg) {
      const now = Date.now();
      clearTimeout(timeout2);
      waitCallback = () => {
        waitCallback = null;
        last = now;
        fn.apply(this, arg);
      };
      if (now - last < wait) {
        timeout2 = setTimeout(waitCallback, wait - (now - last));
        return;
      }
      waitCallback();
    };
    newFn.cancel = function() {
      clearTimeout(timeout2);
      waitCallback = null;
    };
    newFn.flush = function() {
      clearTimeout(timeout2);
      waitCallback && waitCallback();
    };
    return newFn;
  }
  const passiveOptions$1 = /* @__PURE__ */ passive(true);
  const states = [];
  let userInteract = 0;
  let inited;
  const setUserAction = (userAction) => states.forEach((vm) => vm.userAction = userAction);
  function addInteractListener(vm = { userAction: false }) {
    if (!inited) {
      const eventNames = [
        "touchstart",
        "touchmove",
        "touchend",
        "mousedown",
        "mouseup"
      ];
      eventNames.forEach((eventName) => {
        document.addEventListener(
          eventName,
          function() {
            !userInteract && setUserAction(true);
            userInteract++;
            setTimeout(() => {
              !--userInteract && setUserAction(false);
            }, 0);
          },
          passiveOptions$1
        );
      });
      inited = true;
    }
    states.push(vm);
  }
  function removeInteractListener(vm) {
    const index2 = states.indexOf(vm);
    if (index2 >= 0) {
      states.splice(index2, 1);
    }
  }
  const getInteractStatus = () => !!userInteract;
  function useUserAction() {
    const state2 = vue.reactive({
      /**
       * 是否用户激活
       */
      userAction: false
    });
    vue.onMounted(() => {
      addInteractListener(state2);
    });
    vue.onBeforeUnmount(() => {
      removeInteractListener(state2);
    });
    return {
      state: state2
    };
  }
  function useScopedAttrs() {
    const state2 = vue.reactive({
      attrs: {}
    });
    vue.onMounted(() => {
      let instance2 = vue.getCurrentInstance();
      while (instance2) {
        const scopeId = instance2.type.__scopeId;
        if (scopeId) {
          state2.attrs[scopeId] = "";
        }
        instance2 = instance2.proxy && instance2.proxy.$mpType === "page" ? null : instance2.parent;
      }
    });
    return {
      state: state2
    };
  }
  function useFormField(nameKey, value) {
    const uniForm2 = vue.inject(
      uniFormKey,
      false
      // remove warning
    );
    if (!uniForm2) {
      return;
    }
    const instance2 = vue.getCurrentInstance();
    const ctx = {
      submit() {
        const proxy = instance2.proxy;
        return [
          proxy[nameKey],
          isString$1(value) ? proxy[value] : value.value
        ];
      },
      reset() {
        if (isString$1(value)) {
          instance2.proxy[value] = "";
        } else {
          value.value = "";
        }
      }
    };
    uniForm2.addField(ctx);
    vue.onBeforeUnmount(() => {
      uniForm2.removeField(ctx);
    });
  }
  function getSelectedTextRange(_, resolve) {
    const activeElement = document.activeElement;
    if (!activeElement) {
      return resolve({});
    }
    const data = {};
    if (["input", "textarea"].includes(activeElement.tagName.toLowerCase())) {
      data.start = activeElement.selectionStart;
      data.end = activeElement.selectionEnd;
    }
    resolve(data);
  }
  const UniViewJSBridgeSubscribe = function() {
    registerViewMethod(
      getCurrentPageId(),
      "getSelectedTextRange",
      getSelectedTextRange
    );
  };
  function getValueString(value, type2) {
    if (type2 === "number" && isNaN(Number(value))) {
      value = "";
    }
    return value === null ? "" : String(value);
  }
  const INPUT_MODES = [
    "none",
    "text",
    "decimal",
    "numeric",
    "tel",
    "search",
    "email",
    "url"
  ];
  const props$r = /* @__PURE__ */ extend(
    {},
    {
      name: {
        type: String,
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      value: {
        type: [String, Number],
        default: ""
      },
      disabled: {
        type: [Boolean, String],
        default: false
      },
      /**
       * 已废弃属性，用于历史兼容
       */
      autoFocus: {
        type: [Boolean, String],
        default: false
      },
      focus: {
        type: [Boolean, String],
        default: false
      },
      cursor: {
        type: [Number, String],
        default: -1
      },
      selectionStart: {
        type: [Number, String],
        default: -1
      },
      selectionEnd: {
        type: [Number, String],
        default: -1
      },
      type: {
        type: String,
        default: "text"
      },
      password: {
        type: [Boolean, String],
        default: false
      },
      placeholder: {
        type: String,
        default: ""
      },
      placeholderStyle: {
        type: String,
        default: ""
      },
      placeholderClass: {
        type: String,
        default: ""
      },
      maxlength: {
        type: [Number, String],
        default: 140
      },
      confirmType: {
        type: String,
        default: "done"
      },
      confirmHold: {
        type: Boolean,
        default: false
      },
      ignoreCompositionEvent: {
        type: Boolean,
        default: true
      },
      step: {
        type: String,
        default: "0.000000000000000001"
      },
      inputmode: {
        type: String,
        default: void 0,
        validator: (value) => !!~INPUT_MODES.indexOf(value)
      }
    },
    props$u
  );
  const emit = [
    "input",
    "focus",
    "blur",
    "update:value",
    "update:modelValue",
    "update:focus",
    "compositionstart",
    "compositionupdate",
    "compositionend",
    ...emit$1
  ];
  function useBase(props2, rootRef, emit2) {
    const fieldRef = vue.ref(null);
    const trigger = useCustomEvent(rootRef, emit2);
    const selectionStart = vue.computed(() => {
      const selectionStart2 = Number(props2.selectionStart);
      return isNaN(selectionStart2) ? -1 : selectionStart2;
    });
    const selectionEnd = vue.computed(() => {
      const selectionEnd2 = Number(props2.selectionEnd);
      return isNaN(selectionEnd2) ? -1 : selectionEnd2;
    });
    const cursor = vue.computed(() => {
      const cursor2 = Number(props2.cursor);
      return isNaN(cursor2) ? -1 : cursor2;
    });
    const maxlength = vue.computed(() => {
      var maxlength2 = Number(props2.maxlength);
      return isNaN(maxlength2) ? 140 : maxlength2;
    });
    const value = getValueString(props2.modelValue, props2.type) || getValueString(props2.value, props2.type);
    const state2 = vue.reactive({
      value,
      valueOrigin: value,
      maxlength,
      focus: props2.focus,
      composing: false,
      selectionStart,
      selectionEnd,
      cursor
    });
    vue.watch(
      () => state2.focus,
      (val) => emit2("update:focus", val)
    );
    vue.watch(
      () => state2.maxlength,
      (val) => state2.value = state2.value.slice(0, val)
    );
    return {
      fieldRef,
      state: state2,
      trigger
    };
  }
  function useValueSync(props2, state2, emit2, trigger) {
    const valueChangeFn = debounce$1(
      (val) => {
        state2.value = getValueString(val, props2.type);
      },
      100,
      { setTimeout, clearTimeout }
    );
    vue.watch(() => props2.modelValue, valueChangeFn);
    vue.watch(() => props2.value, valueChangeFn);
    const triggerInputFn = throttle$1((event, detail) => {
      valueChangeFn.cancel();
      emit2("update:modelValue", detail.value);
      emit2("update:value", detail.value);
      trigger("input", event, detail);
    }, 100);
    const triggerInput = (event, detail, force) => {
      valueChangeFn.cancel();
      triggerInputFn(event, detail);
      if (force) {
        triggerInputFn.flush();
      }
    };
    vue.onBeforeMount(() => {
      valueChangeFn.cancel();
      triggerInputFn.cancel();
    });
    return {
      trigger,
      triggerInput
    };
  }
  function useAutoFocus(props2, fieldRef) {
    useUserAction();
    const needFocus = vue.computed(() => props2.autoFocus || props2.focus);
    function focus() {
      if (!needFocus.value) {
        return;
      }
      const field = fieldRef.value;
      if (!field || false) {
        setTimeout(focus, 100);
        return;
      }
      {
        field.focus();
      }
    }
    function blur() {
      const field = fieldRef.value;
      if (field) {
        field.blur();
      }
    }
    vue.watch(
      () => props2.focus,
      (value) => {
        if (value) {
          focus();
        } else {
          blur();
        }
      }
    );
    vue.onMounted(() => {
      if (needFocus.value) {
        vue.nextTick(focus);
      }
    });
  }
  function useEvent(fieldRef, state2, props2, trigger, triggerInput, beforeInput) {
    function checkSelection() {
      const field = fieldRef.value;
      if (field && state2.focus && state2.selectionStart > -1 && state2.selectionEnd > -1 && field.type !== "number") {
        field.selectionStart = state2.selectionStart;
        field.selectionEnd = state2.selectionEnd;
      }
    }
    function checkCursor() {
      const field = fieldRef.value;
      if (field && state2.focus && state2.selectionStart < 0 && state2.selectionEnd < 0 && state2.cursor > -1 && field.type !== "number") {
        field.selectionEnd = field.selectionStart = state2.cursor;
      }
    }
    function getFieldSelectionEnd(field) {
      if (field.type === "number") {
        return null;
      } else {
        return field.selectionEnd;
      }
    }
    function initField() {
      const field = fieldRef.value;
      if (!field)
        return;
      const onFocus = function(event) {
        state2.focus = true;
        trigger("focus", event, {
          value: state2.value
        });
        checkSelection();
        checkCursor();
      };
      const onInput = function(event, force) {
        event.stopPropagation();
        if (isFunction$3(beforeInput) && beforeInput(event, state2) === false) {
          return;
        }
        state2.value = field.value;
        if (!state2.composing || !props2.ignoreCompositionEvent) {
          triggerInput(
            event,
            {
              value: field.value,
              cursor: getFieldSelectionEnd(field)
            },
            force
          );
        }
      };
      const onBlur = function(event) {
        if (state2.composing) {
          state2.composing = false;
          onInput(event, true);
        }
        state2.focus = false;
        trigger("blur", event, {
          value: state2.value,
          cursor: getFieldSelectionEnd(event.target)
        });
      };
      field.addEventListener("change", (event) => event.stopPropagation());
      field.addEventListener("focus", onFocus);
      field.addEventListener("blur", onBlur);
      field.addEventListener("input", onInput);
      field.addEventListener("compositionstart", (event) => {
        event.stopPropagation();
        state2.composing = true;
        _onComposition(event);
      });
      field.addEventListener("compositionend", (event) => {
        event.stopPropagation();
        if (state2.composing) {
          state2.composing = false;
          onInput(event);
        }
        _onComposition(event);
      });
      field.addEventListener("compositionupdate", _onComposition);
      function _onComposition(event) {
        if (!props2.ignoreCompositionEvent) {
          trigger(event.type, event, {
            value: event.data
          });
        }
      }
    }
    vue.watch([() => state2.selectionStart, () => state2.selectionEnd], checkSelection);
    vue.watch(() => state2.cursor, checkCursor);
    vue.watch(() => fieldRef.value, initField);
  }
  function useField(props2, rootRef, emit2, beforeInput) {
    UniViewJSBridgeSubscribe();
    const { fieldRef, state: state2, trigger } = useBase(props2, rootRef, emit2);
    const { triggerInput } = useValueSync(props2, state2, emit2, trigger);
    useAutoFocus(props2, fieldRef);
    useKeyboard$1(props2, fieldRef);
    const { state: scopedAttrsState } = useScopedAttrs();
    useFormField("name", state2);
    useEvent(fieldRef, state2, props2, trigger, triggerInput, beforeInput);
    const fixDisabledColor = String(navigator.vendor).indexOf("Apple") === 0 && CSS.supports("image-orientation:from-image");
    return {
      fieldRef,
      state: state2,
      scopedAttrsState,
      fixDisabledColor,
      trigger
    };
  }
  const props$q = /* @__PURE__ */ extend({}, props$r, {
    placeholderClass: {
      type: String,
      default: "input-placeholder"
    },
    textContentType: {
      type: String,
      default: ""
    }
  });
  const Input = /* @__PURE__ */ defineBuiltInComponent({
    name: "Input",
    props: props$q,
    emits: ["confirm", ...emit],
    setup(props2, {
      emit: emit2
    }) {
      const INPUT_TYPES = ["text", "number", "idcard", "digit", "password", "tel"];
      const AUTOCOMPLETES = ["off", "one-time-code"];
      const type2 = vue.computed(() => {
        let type22 = "";
        switch (props2.type) {
          case "text":
            if (props2.confirmType === "search") {
              type22 = "search";
            }
            break;
          case "idcard":
            type22 = "text";
            break;
          case "digit":
            type22 = "number";
            break;
          default:
            type22 = ~INPUT_TYPES.includes(props2.type) ? props2.type : "text";
            break;
        }
        return props2.password ? "password" : type22;
      });
      const autocomplete = vue.computed(() => {
        const camelizeIndex = AUTOCOMPLETES.indexOf(props2.textContentType);
        const kebabCaseIndex = AUTOCOMPLETES.indexOf(hyphenate(props2.textContentType));
        const index2 = camelizeIndex !== -1 ? camelizeIndex : kebabCaseIndex !== -1 ? kebabCaseIndex : 0;
        return AUTOCOMPLETES[index2];
      });
      let cache = vue.ref("");
      let resetCache;
      const rootRef = vue.ref(null);
      const {
        fieldRef,
        state: state2,
        scopedAttrsState,
        fixDisabledColor,
        trigger
      } = useField(props2, rootRef, emit2, (event, state3) => {
        const input2 = event.target;
        if (type2.value === "number") {
          if (resetCache) {
            input2.removeEventListener("blur", resetCache);
            resetCache = null;
          }
          if (input2.validity && !input2.validity.valid) {
            if ((!cache.value || !input2.value) && event.data === "-" || cache.value[0] === "-" && event.inputType === "deleteContentBackward") {
              cache.value = "-";
              state3.value = "";
              resetCache = () => {
                cache.value = input2.value = "";
              };
              input2.addEventListener("blur", resetCache);
              return false;
            }
            if (cache.value) {
              if (cache.value.indexOf(".") !== -1) {
                if (event.data !== "." && event.inputType === "deleteContentBackward") {
                  const dotIndex = cache.value.indexOf(".");
                  cache.value = input2.value = state3.value = cache.value.slice(0, dotIndex);
                  return true;
                }
              } else if (event.data === ".") {
                cache.value += ".";
                resetCache = () => {
                  cache.value = input2.value = cache.value.slice(0, -1);
                };
                input2.addEventListener("blur", resetCache);
                return false;
              }
            }
            cache.value = state3.value = input2.value = cache.value === "-" ? "" : cache.value;
            return false;
          } else {
            cache.value = input2.value;
          }
          const maxlength = state3.maxlength;
          if (maxlength > 0 && input2.value.length > maxlength) {
            input2.value = input2.value.slice(0, maxlength);
            state3.value = input2.value;
            return false;
          }
        }
      });
      vue.watch(() => state2.value, (value) => {
        if (props2.type === "number" && !(cache.value === "-" && value === "")) {
          cache.value = value;
        }
      });
      const NUMBER_TYPES = ["number", "digit"];
      const step = vue.computed(() => NUMBER_TYPES.includes(props2.type) ? props2.step : "");
      function onKeyUpEnter(event) {
        if (event.key !== "Enter") {
          return;
        }
        const input2 = event.target;
        event.stopPropagation();
        trigger("confirm", event, {
          value: input2.value
        });
        !props2.confirmHold && input2.blur();
      }
      return () => {
        let inputNode = props2.disabled && fixDisabledColor ? vue.createVNode("input", {
          "key": "disabled-input",
          "ref": fieldRef,
          "value": state2.value,
          "tabindex": "-1",
          "readonly": !!props2.disabled,
          "type": type2.value,
          "maxlength": state2.maxlength,
          "step": step.value,
          "class": "uni-input-input",
          "onFocus": (event) => event.target.blur()
        }, null, 40, ["value", "readonly", "type", "maxlength", "step", "onFocus"]) : vue.withDirectives(vue.createVNode("input", {
          "key": "input",
          "ref": fieldRef,
          "onUpdate:modelValue": ($event) => state2.value = $event,
          "disabled": !!props2.disabled,
          "type": type2.value,
          "maxlength": state2.maxlength,
          "step": step.value,
          "enterkeyhint": props2.confirmType,
          "pattern": props2.type === "number" ? "[0-9]*" : void 0,
          "class": "uni-input-input",
          "autocomplete": autocomplete.value,
          "onKeyup": onKeyUpEnter,
          "inputmode": props2.inputmode
        }, null, 40, ["onUpdate:modelValue", "disabled", "type", "maxlength", "step", "enterkeyhint", "pattern", "autocomplete", "onKeyup", "inputmode"]), [[vue.vModelDynamic, state2.value]]);
        return vue.createVNode("uni-input", {
          "ref": rootRef
        }, [vue.createVNode("div", {
          "class": "uni-input-wrapper"
        }, [vue.withDirectives(vue.createVNode("div", vue.mergeProps(scopedAttrsState.attrs, {
          "style": props2.placeholderStyle,
          "class": ["uni-input-placeholder", props2.placeholderClass]
        }), [props2.placeholder], 16), [[vue.vShow, !(state2.value.length || cache.value === "-")]]), props2.confirmType === "search" ? vue.createVNode("form", {
          "action": "",
          "onSubmit": (event) => event.preventDefault(),
          "class": "uni-input-form"
        }, [inputNode], 40, ["onSubmit"]) : inputNode])], 512);
      };
    }
  });
  function entries(obj) {
    return Object.keys(obj).map((key) => [key, obj[key]]);
  }
  const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
  const LISTENER_PREFIX = /^on[A-Z]+/;
  const useAttrs = (params = {}) => {
    const { excludeListeners = false, excludeKeys = [] } = params;
    const instance2 = vue.getCurrentInstance();
    const attrs2 = vue.shallowRef({});
    const listeners2 = vue.shallowRef({});
    const excludeAttrs = vue.shallowRef({});
    const allExcludeKeys = excludeKeys.concat(DEFAULT_EXCLUDE_KEYS);
    instance2.attrs = vue.reactive(instance2.attrs);
    vue.watchEffect(() => {
      const res = entries(instance2.attrs).reduce(
        (acc, [key, val]) => {
          if (allExcludeKeys.includes(key)) {
            acc.exclude[key] = val;
          } else if (LISTENER_PREFIX.test(key)) {
            if (!excludeListeners) {
              acc.attrs[key] = val;
            }
            acc.listeners[key] = val;
          } else {
            acc.attrs[key] = val;
          }
          return acc;
        },
        {
          exclude: {},
          attrs: {},
          listeners: {}
        }
      );
      attrs2.value = res.attrs;
      listeners2.value = res.listeners;
      excludeAttrs.value = res.exclude;
    });
    return { $attrs: attrs2, $listeners: listeners2, $excludeAttrs: excludeAttrs };
  };
  function flatVNode(nodes) {
    const array2 = [];
    if (isArray$a(nodes)) {
      nodes.forEach((vnode) => {
        if (vue.isVNode(vnode)) {
          if (vnode.type === vue.Fragment) {
            array2.push(...flatVNode(vnode.children));
          } else {
            array2.push(vnode);
          }
        } else if (isArray$a(vnode)) {
          array2.push(...flatVNode(vnode));
        }
      });
    }
    return array2;
  }
  const movableAreaProps = {
    scaleArea: {
      type: Boolean,
      default: false
    }
  };
  const MovableArea = /* @__PURE__ */ defineBuiltInComponent({
    inheritAttrs: false,
    name: "MovableArea",
    props: movableAreaProps,
    setup(props2, {
      slots
    }) {
      const rootRef = vue.ref(null);
      const _isMounted = vue.ref(false);
      let {
        setContexts,
        events: movableAreaEvents
      } = useMovableAreaState(props2, rootRef);
      const {
        $listeners,
        $attrs,
        $excludeAttrs
      } = useAttrs();
      const _listeners = $listeners.value;
      let events = ["onTouchstart", "onTouchmove", "onTouchend"];
      events.forEach((event) => {
        let existing = _listeners[event];
        let ours = movableAreaEvents[`_${event}`];
        _listeners[event] = existing ? [].concat(existing, ours) : ours;
      });
      vue.onMounted(() => {
        movableAreaEvents._resize();
        _isMounted.value = true;
      });
      let movableViewItems = [];
      const originMovableViewContexts = [];
      function updateMovableViewContexts() {
        const contexts = [];
        for (let index2 = 0; index2 < movableViewItems.length; index2++) {
          let movableViewItem = movableViewItems[index2];
          {
            movableViewItem = movableViewItem.el;
          }
          const movableViewContext = originMovableViewContexts.find((context) => movableViewItem === context.rootRef.value);
          if (movableViewContext) {
            contexts.push(vue.markRaw(movableViewContext));
          }
        }
        setContexts(contexts);
      }
      const addMovableViewContext = (movableViewContext) => {
        originMovableViewContexts.push(movableViewContext);
        updateMovableViewContexts();
      };
      const removeMovableViewContext = (movableViewContext) => {
        const index2 = originMovableViewContexts.indexOf(movableViewContext);
        if (index2 >= 0) {
          originMovableViewContexts.splice(index2, 1);
          updateMovableViewContexts();
        }
      };
      vue.provide("_isMounted", _isMounted);
      vue.provide("movableAreaRootRef", rootRef);
      vue.provide("addMovableViewContext", addMovableViewContext);
      vue.provide("removeMovableViewContext", removeMovableViewContext);
      return () => {
        const defaultSlots = slots.default && slots.default();
        {
          movableViewItems = flatVNode(defaultSlots);
        }
        return vue.createVNode("uni-movable-area", vue.mergeProps({
          "ref": rootRef
        }, $attrs.value, $excludeAttrs.value, _listeners), [vue.createVNode(ResizeSensor, {
          "onResize": movableAreaEvents._resize
        }, null, 8, ["onResize"]), movableViewItems], 16);
      };
    }
  });
  function calc(e2) {
    return Math.sqrt(e2.x * e2.x + e2.y * e2.y);
  }
  function useMovableAreaState(props2, rootRef) {
    const width = vue.ref(0);
    const height = vue.ref(0);
    const gapV = vue.reactive({
      x: null,
      y: null
    });
    const pinchStartLen = vue.ref(null);
    let _scaleMovableView = null;
    let movableViewContexts = [];
    function _updateScale(e2) {
      if (e2 && e2 !== 1) {
        if (props2.scaleArea) {
          movableViewContexts.forEach(function(item) {
            item._setScale(e2);
          });
        } else {
          if (_scaleMovableView) {
            _scaleMovableView._setScale(e2);
          }
        }
      }
    }
    function _find(target, items = movableViewContexts) {
      let root2 = rootRef.value;
      function get(node) {
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          if (node === item.rootRef.value) {
            return item;
          }
        }
        if (node === root2 || node === document.body || node === document) {
          return null;
        }
        return get(node.parentNode);
      }
      return get(target);
    }
    const _onTouchstart = withWebEvent((t2) => {
      let i = t2.touches;
      if (i) {
        if (i.length > 1) {
          let r = {
            x: i[1].pageX - i[0].pageX,
            y: i[1].pageY - i[0].pageY
          };
          pinchStartLen.value = calc(r);
          gapV.x = r.x;
          gapV.y = r.y;
          if (!props2.scaleArea) {
            let touch0 = _find(i[0].target);
            let touch1 = _find(i[1].target);
            _scaleMovableView = touch0 && touch0 === touch1 ? touch0 : null;
          }
        }
      }
    });
    const _onTouchmove = withWebEvent((t2) => {
      let n = t2.touches;
      if (n) {
        if (n.length > 1) {
          t2.preventDefault();
          let i = {
            x: n[1].pageX - n[0].pageX,
            y: n[1].pageY - n[0].pageY
          };
          if (gapV.x !== null && pinchStartLen.value && pinchStartLen.value > 0) {
            let r = calc(i) / pinchStartLen.value;
            _updateScale(r);
          }
          gapV.x = i.x;
          gapV.y = i.y;
        }
      }
    });
    const _onTouchend = withWebEvent((e2) => {
      let t2 = e2.touches;
      if (!(t2 && t2.length)) {
        if (e2.changedTouches) {
          gapV.x = 0;
          gapV.y = 0;
          pinchStartLen.value = null;
          if (props2.scaleArea) {
            movableViewContexts.forEach(function(item) {
              item._endScale();
            });
          } else {
            if (_scaleMovableView) {
              _scaleMovableView._endScale();
            }
          }
        }
      }
    });
    function _resize() {
      _getWH();
      movableViewContexts.forEach(function(item, index2) {
        item.setParent();
      });
    }
    function _getWH() {
      let style = window.getComputedStyle(rootRef.value);
      let rect = rootRef.value.getBoundingClientRect();
      width.value = rect.width - ["Left", "Right"].reduce(function(all, item) {
        const LEFT = "border" + item + "Width";
        const RIGHT = "padding" + item;
        return all + parseFloat(style[LEFT]) + parseFloat(style[RIGHT]);
      }, 0);
      height.value = rect.height - ["Top", "Bottom"].reduce(function(all, item) {
        const TOP = "border" + item + "Width";
        const BOTTOM = "padding" + item;
        return all + parseFloat(style[TOP]) + parseFloat(style[BOTTOM]);
      }, 0);
    }
    vue.provide("movableAreaWidth", width);
    vue.provide("movableAreaHeight", height);
    return {
      setContexts(contexts) {
        movableViewContexts = contexts;
      },
      events: {
        _onTouchstart,
        _onTouchmove,
        _onTouchend,
        _resize
      }
    };
  }
  const addListenerToElement = function(element, type2, callback, capture) {
    element.addEventListener(
      type2,
      ($event) => {
        if (isFunction$3(callback)) {
          if (callback($event) === false) {
            if (typeof $event.cancelable !== "undefined" ? $event.cancelable : true) {
              $event.preventDefault();
            }
            $event.stopPropagation();
          }
        }
      },
      {
        passive: false
      }
    );
  };
  let __mouseMoveEventListener;
  let __mouseUpEventListener;
  function useTouchtrack(element, method2, useCancel) {
    vue.onBeforeUnmount(() => {
      document.removeEventListener("mousemove", __mouseMoveEventListener);
      document.removeEventListener("mouseup", __mouseUpEventListener);
    });
    let x0 = 0;
    let y0 = 0;
    let x1 = 0;
    let y1 = 0;
    const fn = function($event, state2, x, y) {
      if (method2({
        // @ts-expect-error
        cancelable: $event.cancelable,
        target: $event.target,
        currentTarget: $event.currentTarget,
        preventDefault: $event.preventDefault.bind($event),
        stopPropagation: $event.stopPropagation.bind($event),
        touches: $event.touches,
        changedTouches: $event.changedTouches,
        detail: {
          state: state2,
          x,
          y,
          dx: x - x0,
          dy: y - y0,
          ddx: x - x1,
          ddy: y - y1,
          timeStamp: $event.timeStamp
        }
      }) === false) {
        return false;
      }
    };
    let $eventOld = null;
    let hasTouchStart;
    let hasMouseDown;
    addListenerToElement(element, "touchstart", function($event) {
      hasTouchStart = true;
      if ($event.touches.length === 1 && !$eventOld) {
        $eventOld = $event;
        x0 = x1 = $event.touches[0].pageX;
        y0 = y1 = $event.touches[0].pageY;
        return fn($event, "start", x0, y0);
      }
    });
    addListenerToElement(element, "mousedown", function($event) {
      hasMouseDown = true;
      if (!hasTouchStart && !$eventOld) {
        $eventOld = $event;
        x0 = x1 = $event.pageX;
        y0 = y1 = $event.pageY;
        return fn($event, "start", x0, y0);
      }
    });
    addListenerToElement(element, "touchmove", function($event) {
      if ($event.touches.length === 1 && $eventOld) {
        const res = fn(
          $event,
          "move",
          $event.touches[0].pageX,
          $event.touches[0].pageY
        );
        x1 = $event.touches[0].pageX;
        y1 = $event.touches[0].pageY;
        return res;
      }
    });
    const mouseMoveEventListener = __mouseMoveEventListener = function($event) {
      if (!hasTouchStart && hasMouseDown && $eventOld) {
        const res = fn($event, "move", $event.pageX, $event.pageY);
        x1 = $event.pageX;
        y1 = $event.pageY;
        return res;
      }
    };
    document.addEventListener("mousemove", mouseMoveEventListener);
    addListenerToElement(element, "touchend", function($event) {
      if ($event.touches.length === 0 && $eventOld) {
        hasTouchStart = false;
        $eventOld = null;
        return fn(
          $event,
          "end",
          $event.changedTouches[0].pageX,
          $event.changedTouches[0].pageY
        );
      }
    });
    const mouseUpEventListener = __mouseUpEventListener = function($event) {
      hasMouseDown = false;
      if (!hasTouchStart && $eventOld) {
        $eventOld = null;
        return fn($event, "end", $event.pageX, $event.pageY);
      }
    };
    document.addEventListener("mouseup", mouseUpEventListener);
    addListenerToElement(element, "touchcancel", function($event) {
      if ($eventOld) {
        hasTouchStart = false;
        const $eventTemp = $eventOld;
        $eventOld = null;
        return fn(
          $event,
          useCancel ? "cancel" : "end",
          $eventTemp.touches[0].pageX,
          $eventTemp.touches[0].pageY
        );
      }
    });
  }
  function e(e2, t2, n) {
    return e2 > t2 - n && e2 < t2 + n;
  }
  function t(t2, n) {
    return e(t2, 0, n);
  }
  function Decline() {
  }
  Decline.prototype.x = function(e2) {
    return Math.sqrt(e2);
  };
  function Friction$1(e2, t2) {
    this._m = e2;
    this._f = 1e3 * t2;
    this._startTime = 0;
    this._v = 0;
  }
  Friction$1.prototype.setV = function(x, y) {
    const n = Math.pow(Math.pow(x, 2) + Math.pow(y, 2), 0.5);
    this._x_v = x;
    this._y_v = y;
    this._x_a = -this._f * this._x_v / n;
    this._y_a = -this._f * this._y_v / n;
    this._t = Math.abs(x / this._x_a) || Math.abs(y / this._y_a);
    this._lastDt = null;
    this._startTime = (/* @__PURE__ */ new Date()).getTime();
  };
  Friction$1.prototype.setS = function(x, y) {
    this._x_s = x;
    this._y_s = y;
  };
  Friction$1.prototype.s = function(t2) {
    if (void 0 === t2) {
      t2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
    }
    if (t2 > this._t) {
      t2 = this._t;
      this._lastDt = t2;
    }
    let x = this._x_v * t2 + 0.5 * this._x_a * Math.pow(t2, 2) + this._x_s;
    let y = this._y_v * t2 + 0.5 * this._y_a * Math.pow(t2, 2) + this._y_s;
    if (this._x_a > 0 && x < this._endPositionX || this._x_a < 0 && x > this._endPositionX) {
      x = this._endPositionX;
    }
    if (this._y_a > 0 && y < this._endPositionY || this._y_a < 0 && y > this._endPositionY) {
      y = this._endPositionY;
    }
    return {
      x,
      y
    };
  };
  Friction$1.prototype.ds = function(t2) {
    if (void 0 === t2) {
      t2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
    }
    if (t2 > this._t) {
      t2 = this._t;
    }
    return {
      dx: this._x_v + this._x_a * t2,
      dy: this._y_v + this._y_a * t2
    };
  };
  Friction$1.prototype.delta = function() {
    return {
      x: -1.5 * Math.pow(this._x_v, 2) / this._x_a || 0,
      y: -1.5 * Math.pow(this._y_v, 2) / this._y_a || 0
    };
  };
  Friction$1.prototype.dt = function() {
    return -this._x_v / this._x_a;
  };
  Friction$1.prototype.done = function() {
    const t2 = e(this.s().x, this._endPositionX) || e(this.s().y, this._endPositionY) || this._lastDt === this._t;
    this._lastDt = null;
    return t2;
  };
  Friction$1.prototype.setEnd = function(x, y) {
    this._endPositionX = x;
    this._endPositionY = y;
  };
  Friction$1.prototype.reconfigure = function(m, f2) {
    this._m = m;
    this._f = 1e3 * f2;
  };
  function Spring$1(m, k, c) {
    this._m = m;
    this._k = k;
    this._c = c;
    this._solution = null;
    this._endPosition = 0;
    this._startTime = 0;
  }
  Spring$1.prototype._solve = function(e2, t2) {
    const n = this._c;
    const i = this._m;
    const r = this._k;
    const o2 = n * n - 4 * i * r;
    if (o2 === 0) {
      const a2 = -n / (2 * i);
      const s = e2;
      const l = t2 / (a2 * e2);
      return {
        x: function(e3) {
          return (s + l * e3) * Math.pow(Math.E, a2 * e3);
        },
        dx: function(e3) {
          const t3 = Math.pow(Math.E, a2 * e3);
          return a2 * (s + l * e3) * t3 + l * t3;
        }
      };
    }
    if (o2 > 0) {
      const c = (-n - Math.sqrt(o2)) / (2 * i);
      const u = (-n + Math.sqrt(o2)) / (2 * i);
      const d = (t2 - c * e2) / (u - c);
      const h2 = e2 - d;
      return {
        x: function(e3) {
          let t3;
          let n2;
          if (e3 === this._t) {
            t3 = this._powER1T;
            n2 = this._powER2T;
          }
          this._t = e3;
          if (!t3) {
            t3 = this._powER1T = Math.pow(Math.E, c * e3);
          }
          if (!n2) {
            n2 = this._powER2T = Math.pow(Math.E, u * e3);
          }
          return h2 * t3 + d * n2;
        },
        dx: function(e3) {
          let t3;
          let n2;
          if (e3 === this._t) {
            t3 = this._powER1T;
            n2 = this._powER2T;
          }
          this._t = e3;
          if (!t3) {
            t3 = this._powER1T = Math.pow(Math.E, c * e3);
          }
          if (!n2) {
            n2 = this._powER2T = Math.pow(Math.E, u * e3);
          }
          return h2 * c * t3 + d * u * n2;
        }
      };
    }
    const p2 = Math.sqrt(4 * i * r - n * n) / (2 * i);
    const f2 = -n / 2 * i;
    const v2 = e2;
    const g2 = (t2 - f2 * e2) / p2;
    return {
      x: function(e3) {
        return Math.pow(Math.E, f2 * e3) * (v2 * Math.cos(p2 * e3) + g2 * Math.sin(p2 * e3));
      },
      dx: function(e3) {
        const t3 = Math.pow(Math.E, f2 * e3);
        const n2 = Math.cos(p2 * e3);
        const i2 = Math.sin(p2 * e3);
        return t3 * (g2 * p2 * n2 - v2 * p2 * i2) + f2 * t3 * (g2 * i2 + v2 * n2);
      }
    };
  };
  Spring$1.prototype.x = function(e2) {
    if (void 0 === e2) {
      e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
    }
    return this._solution ? this._endPosition + this._solution.x(e2) : 0;
  };
  Spring$1.prototype.dx = function(e2) {
    if (void 0 === e2) {
      e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
    }
    return this._solution ? this._solution.dx(e2) : 0;
  };
  Spring$1.prototype.setEnd = function(e2, n, i) {
    if (!i) {
      i = (/* @__PURE__ */ new Date()).getTime();
    }
    if (e2 !== this._endPosition || !t(n, 0.1)) {
      n = n || 0;
      let r = this._endPosition;
      if (this._solution) {
        if (t(n, 0.1)) {
          n = this._solution.dx((i - this._startTime) / 1e3);
        }
        r = this._solution.x((i - this._startTime) / 1e3);
        if (t(n, 0.1)) {
          n = 0;
        }
        if (t(r, 0.1)) {
          r = 0;
        }
        r += this._endPosition;
      }
      if (!(this._solution && t(r - e2, 0.1) && t(n, 0.1))) {
        this._endPosition = e2;
        this._solution = this._solve(r - this._endPosition, n);
        this._startTime = i;
      }
    }
  };
  Spring$1.prototype.snap = function(e2) {
    this._startTime = (/* @__PURE__ */ new Date()).getTime();
    this._endPosition = e2;
    this._solution = {
      x: function() {
        return 0;
      },
      dx: function() {
        return 0;
      }
    };
  };
  Spring$1.prototype.done = function(n) {
    if (!n) {
      n = (/* @__PURE__ */ new Date()).getTime();
    }
    return e(this.x(), this._endPosition, 0.1) && t(this.dx(), 0.1);
  };
  Spring$1.prototype.reconfigure = function(m, t2, c) {
    this._m = m;
    this._k = t2;
    this._c = c;
    if (!this.done()) {
      this._solution = this._solve(this.x() - this._endPosition, this.dx());
      this._startTime = (/* @__PURE__ */ new Date()).getTime();
    }
  };
  Spring$1.prototype.springConstant = function() {
    return this._k;
  };
  Spring$1.prototype.damping = function() {
    return this._c;
  };
  Spring$1.prototype.configuration = function() {
    function e2(e3, t3) {
      e3.reconfigure(1, t3, e3.damping());
    }
    function t2(e3, t3) {
      e3.reconfigure(1, e3.springConstant(), t3);
    }
    return [
      {
        label: "Spring Constant",
        read: this.springConstant.bind(this),
        write: e2.bind(this, this),
        min: 100,
        max: 1e3
      },
      {
        label: "Damping",
        read: this.damping.bind(this),
        write: t2.bind(this, this),
        min: 1,
        max: 500
      }
    ];
  };
  function STD(e2, t2, n) {
    this._springX = new Spring$1(e2, t2, n);
    this._springY = new Spring$1(e2, t2, n);
    this._springScale = new Spring$1(e2, t2, n);
    this._startTime = 0;
  }
  STD.prototype.setEnd = function(e2, t2, n, i) {
    const r = (/* @__PURE__ */ new Date()).getTime();
    this._springX.setEnd(e2, i, r);
    this._springY.setEnd(t2, i, r);
    this._springScale.setEnd(n, i, r);
    this._startTime = r;
  };
  STD.prototype.x = function() {
    const e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
    return {
      x: this._springX.x(e2),
      y: this._springY.x(e2),
      scale: this._springScale.x(e2)
    };
  };
  STD.prototype.done = function() {
    const e2 = (/* @__PURE__ */ new Date()).getTime();
    return this._springX.done(e2) && this._springY.done(e2) && this._springScale.done(e2);
  };
  STD.prototype.reconfigure = function(e2, t2, n) {
    this._springX.reconfigure(e2, t2, n);
    this._springY.reconfigure(e2, t2, n);
    this._springScale.reconfigure(e2, t2, n);
  };
  const movableViewProps = {
    direction: {
      type: String,
      default: "none"
    },
    inertia: {
      type: [Boolean, String],
      default: false
    },
    outOfBounds: {
      type: [Boolean, String],
      default: false
    },
    x: {
      type: [Number, String],
      default: 0
    },
    y: {
      type: [Number, String],
      default: 0
    },
    damping: {
      type: [Number, String],
      default: 20
    },
    friction: {
      type: [Number, String],
      default: 2
    },
    disabled: {
      type: [Boolean, String],
      default: false
    },
    scale: {
      type: [Boolean, String],
      default: false
    },
    scaleMin: {
      type: [Number, String],
      default: 0.5
    },
    scaleMax: {
      type: [Number, String],
      default: 10
    },
    scaleValue: {
      type: [Number, String],
      default: 1
    },
    animation: {
      type: [Boolean, String],
      default: true
    }
  };
  function v(a2, b) {
    return +((1e3 * a2 - 1e3 * b) / 1e3).toFixed(1);
  }
  const MovableView = /* @__PURE__ */ defineBuiltInComponent({
    name: "MovableView",
    props: movableViewProps,
    emits: ["change", "scale"],
    setup(props2, {
      slots,
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const trigger = useCustomEvent(rootRef, emit2);
      const {
        setParent
      } = useMovableViewState(props2, trigger, rootRef);
      return () => {
        return vue.createVNode("uni-movable-view", {
          "ref": rootRef
        }, [vue.createVNode(ResizeSensor, {
          "onResize": setParent
        }, null, 8, ["onResize"]), slots.default && slots.default()], 512);
      };
    }
  });
  let requesting = false;
  function _requestAnimationFrame(e2) {
    if (!requesting) {
      requesting = true;
      requestAnimationFrame(function() {
        e2();
        requesting = false;
      });
    }
  }
  function p(t2, n) {
    if (t2 === n) {
      return 0;
    }
    let i = t2.offsetLeft;
    return t2.offsetParent ? i += p(t2.offsetParent, n) : 0;
  }
  function f(t2, n) {
    if (t2 === n) {
      return 0;
    }
    let i = t2.offsetTop;
    return t2.offsetParent ? i += f(t2.offsetParent, n) : 0;
  }
  function g(friction, execute, endCallback) {
    let record = {
      id: 0,
      cancelled: false
    };
    let cancel = function(record2) {
      if (record2 && record2.id) {
        cancelAnimationFrame(record2.id);
      }
      if (record2) {
        record2.cancelled = true;
      }
    };
    function fn(record2, friction2, execute2, endCallback2) {
      if (!record2 || !record2.cancelled) {
        execute2(friction2);
        let isDone = friction2.done();
        if (!isDone) {
          if (!record2.cancelled) {
            record2.id = requestAnimationFrame(fn.bind(null, record2, friction2, execute2, endCallback2));
          }
        }
        if (isDone && endCallback2) {
          endCallback2(friction2);
        }
      }
    }
    fn(record, friction, execute, endCallback);
    return {
      cancel: cancel.bind(null, record),
      model: friction
    };
  }
  function _getPx(val) {
    if (/\d+[ur]px$/i.test(val)) {
      return upx2px(parseFloat(val));
    }
    return Number(val) || 0;
  }
  function useMovableViewLayout(rootRef, _scale, _adjustScale) {
    const movableAreaWidth = vue.inject("movableAreaWidth", vue.ref(0));
    const movableAreaHeight = vue.inject("movableAreaHeight", vue.ref(0));
    const movableAreaRootRef = vue.inject("movableAreaRootRef");
    const _offset = {
      x: 0,
      y: 0
    };
    const _scaleOffset = {
      x: 0,
      y: 0
    };
    const width = vue.ref(0);
    const height = vue.ref(0);
    const minX = vue.ref(0);
    const minY = vue.ref(0);
    const maxX = vue.ref(0);
    const maxY = vue.ref(0);
    function _updateBoundary() {
      let x = 0 - _offset.x + _scaleOffset.x;
      let _width = movableAreaWidth.value - width.value - _offset.x - _scaleOffset.x;
      minX.value = Math.min(x, _width);
      maxX.value = Math.max(x, _width);
      let y = 0 - _offset.y + _scaleOffset.y;
      let _height = movableAreaHeight.value - height.value - _offset.y - _scaleOffset.y;
      minY.value = Math.min(y, _height);
      maxY.value = Math.max(y, _height);
    }
    function _updateOffset() {
      _offset.x = p(rootRef.value, movableAreaRootRef.value);
      _offset.y = f(rootRef.value, movableAreaRootRef.value);
    }
    function _updateWH(scale) {
      scale = scale || _scale.value;
      scale = _adjustScale(scale);
      let rect = rootRef.value.getBoundingClientRect();
      height.value = rect.height / _scale.value;
      width.value = rect.width / _scale.value;
      let _height = height.value * scale;
      let _width = width.value * scale;
      _scaleOffset.x = (_width - width.value) / 2;
      _scaleOffset.y = (_height - height.value) / 2;
    }
    return {
      _updateBoundary,
      _updateOffset,
      _updateWH,
      _scaleOffset,
      minX,
      minY,
      maxX,
      maxY
    };
  }
  function useMovableViewTransform(rootRef, props2, _scaleOffset, _scale, maxX, maxY, minX, minY, _translateX, _translateY, _SFA, _FA, _adjustScale, trigger) {
    const dampingNumber = vue.computed(() => {
      let val = Number(props2.damping);
      return isNaN(val) ? 20 : val;
    });
    const xMove = vue.computed(() => props2.direction === "all" || props2.direction === "horizontal");
    const yMove = vue.computed(() => props2.direction === "all" || props2.direction === "vertical");
    const xSync = vue.ref(_getPx(props2.x));
    const ySync = vue.ref(_getPx(props2.y));
    vue.watch(() => props2.x, (val) => {
      xSync.value = _getPx(val);
    });
    vue.watch(() => props2.y, (val) => {
      ySync.value = _getPx(val);
    });
    vue.watch(xSync, (val) => {
      _setX(val);
    });
    vue.watch(ySync, (val) => {
      _setY(val);
    });
    const _STD = new STD(1, 9 * Math.pow(dampingNumber.value, 2) / 40, dampingNumber.value);
    function _getLimitXY(x, y) {
      let outOfBounds = false;
      if (x > maxX.value) {
        x = maxX.value;
        outOfBounds = true;
      } else {
        if (x < minX.value) {
          x = minX.value;
          outOfBounds = true;
        }
      }
      if (y > maxY.value) {
        y = maxY.value;
        outOfBounds = true;
      } else {
        if (y < minY.value) {
          y = minY.value;
          outOfBounds = true;
        }
      }
      return {
        x,
        y,
        outOfBounds
      };
    }
    function FAandSFACancel() {
      if (_FA) {
        _FA.cancel();
      }
      if (_SFA) {
        _SFA.cancel();
      }
    }
    function _animationTo(x, y, scale, source, r, o2) {
      FAandSFACancel();
      if (!xMove.value) {
        x = _translateX.value;
      }
      if (!yMove.value) {
        y = _translateY.value;
      }
      if (!props2.scale) {
        scale = _scale.value;
      }
      let limitXY = _getLimitXY(x, y);
      x = limitXY.x;
      y = limitXY.y;
      if (!props2.animation) {
        _setTransform(x, y, scale, source, r, o2);
        return;
      }
      _STD._springX._solution = null;
      _STD._springY._solution = null;
      _STD._springScale._solution = null;
      _STD._springX._endPosition = _translateX.value;
      _STD._springY._endPosition = _translateY.value;
      _STD._springScale._endPosition = _scale.value;
      _STD.setEnd(x, y, scale, 1);
      _SFA = g(_STD, function() {
        let data = _STD.x();
        let x2 = data.x;
        let y2 = data.y;
        let scale2 = data.scale;
        _setTransform(x2, y2, scale2, source, r, o2);
      }, function() {
        _SFA.cancel();
      });
    }
    function _setTransform(x, y, scale, source = "", r, o2) {
      if (!(x !== null && x.toString() !== "NaN" && typeof x === "number")) {
        x = _translateX.value || 0;
      }
      if (!(y !== null && y.toString() !== "NaN" && typeof y === "number")) {
        y = _translateY.value || 0;
      }
      x = Number(x.toFixed(1));
      y = Number(y.toFixed(1));
      scale = Number(scale.toFixed(1));
      if (!(_translateX.value === x && _translateY.value === y)) {
        if (!r) {
          trigger("change", {}, {
            x: v(x, _scaleOffset.x),
            y: v(y, _scaleOffset.y),
            source
          });
        }
      }
      if (!props2.scale) {
        scale = _scale.value;
      }
      scale = _adjustScale(scale);
      scale = +scale.toFixed(3);
      if (o2 && scale !== _scale.value) {
        trigger("scale", {}, {
          x,
          y,
          scale
        });
      }
      let transform = "translateX(" + x + "px) translateY(" + y + "px) translateZ(0px) scale(" + scale + ")";
      if (rootRef.value) {
        rootRef.value.style.transform = transform;
        rootRef.value.style.webkitTransform = transform;
        _translateX.value = x;
        _translateY.value = y;
        _scale.value = scale;
      }
    }
    function _revise(source) {
      let limitXY = _getLimitXY(_translateX.value, _translateY.value);
      let x = limitXY.x;
      let y = limitXY.y;
      let outOfBounds = limitXY.outOfBounds;
      if (outOfBounds) {
        _animationTo(x, y, _scale.value, source);
      }
      return outOfBounds;
    }
    function _setX(val) {
      if (xMove.value) {
        if (val + _scaleOffset.x === _translateX.value) {
          return _translateX;
        } else {
          if (_SFA) {
            _SFA.cancel();
          }
          _animationTo(val + _scaleOffset.x, ySync.value + _scaleOffset.y, _scale.value);
        }
      }
      return val;
    }
    function _setY(val) {
      if (yMove.value) {
        if (val + _scaleOffset.y === _translateY.value) {
          return _translateY;
        } else {
          if (_SFA) {
            _SFA.cancel();
          }
          _animationTo(xSync.value + _scaleOffset.x, val + _scaleOffset.y, _scale.value);
        }
      }
      return val;
    }
    return {
      FAandSFACancel,
      _getLimitXY,
      _animationTo,
      _setTransform,
      _revise,
      dampingNumber,
      xMove,
      yMove,
      xSync,
      ySync,
      _STD
    };
  }
  function useMovableViewInit(props2, rootRef, trigger, _scale, _oldScale, _isScaling, _translateX, _translateY, _SFA, _FA) {
    const scaleMinNumber = vue.computed(() => {
      let val = Number(props2.scaleMin);
      return isNaN(val) ? 0.5 : val;
    });
    const scaleMaxNumber = vue.computed(() => {
      let val = Number(props2.scaleMax);
      return isNaN(val) ? 10 : val;
    });
    const scaleValueSync = vue.ref(Number(props2.scaleValue) || 1);
    vue.watch(scaleValueSync, (val) => {
      _setScaleValue(val);
    });
    vue.watch(scaleMinNumber, () => {
      _setScaleMinOrMax();
    });
    vue.watch(scaleMaxNumber, () => {
      _setScaleMinOrMax();
    });
    vue.watch(() => props2.scaleValue, (val) => {
      scaleValueSync.value = Number(val) || 0;
    });
    const {
      _updateBoundary,
      _updateOffset,
      _updateWH,
      _scaleOffset,
      minX,
      minY,
      maxX,
      maxY
    } = useMovableViewLayout(rootRef, _scale, _adjustScale);
    const {
      FAandSFACancel,
      _getLimitXY,
      _animationTo,
      _setTransform,
      _revise,
      dampingNumber,
      xMove,
      yMove,
      xSync,
      ySync,
      _STD
    } = useMovableViewTransform(rootRef, props2, _scaleOffset, _scale, maxX, maxY, minX, minY, _translateX, _translateY, _SFA, _FA, _adjustScale, trigger);
    function _updateScale(scale, animat) {
      if (props2.scale) {
        scale = _adjustScale(scale);
        _updateWH(scale);
        _updateBoundary();
        const limitXY = _getLimitXY(_translateX.value, _translateY.value);
        const x = limitXY.x;
        const y = limitXY.y;
        if (animat) {
          _animationTo(x, y, scale, "", true, true);
        } else {
          _requestAnimationFrame(function() {
            _setTransform(x, y, scale, "", true, true);
          });
        }
      }
    }
    function _beginScale() {
      _isScaling.value = true;
    }
    function _updateOldScale(scale) {
      _oldScale.value = scale;
    }
    function _adjustScale(scale) {
      scale = Math.max(0.5, scaleMinNumber.value, scale);
      scale = Math.min(10, scaleMaxNumber.value, scale);
      return scale;
    }
    function _setScaleMinOrMax() {
      if (!props2.scale) {
        return false;
      }
      _updateScale(_scale.value, true);
      _updateOldScale(_scale.value);
    }
    function _setScaleValue(scale) {
      if (!props2.scale) {
        return false;
      }
      scale = _adjustScale(scale);
      _updateScale(scale, true);
      _updateOldScale(scale);
      return scale;
    }
    function _endScale() {
      _isScaling.value = false;
      _updateOldScale(_scale.value);
    }
    function _setScale(scale) {
      if (scale) {
        scale = _oldScale.value * scale;
        _beginScale();
        _updateScale(scale);
      }
    }
    return {
      // scale
      _updateOldScale,
      _endScale,
      _setScale,
      scaleValueSync,
      // layout
      _updateBoundary,
      _updateOffset,
      _updateWH,
      _scaleOffset,
      minX,
      minY,
      maxX,
      maxY,
      // transform
      FAandSFACancel,
      _getLimitXY,
      _animationTo,
      _setTransform,
      _revise,
      dampingNumber,
      xMove,
      yMove,
      xSync,
      ySync,
      _STD
    };
  }
  function useMovableViewState(props2, trigger, rootRef) {
    const _isMounted = vue.inject("_isMounted", vue.ref(false));
    const addMovableViewContext = vue.inject("addMovableViewContext", () => {
    });
    const removeMovableViewContext = vue.inject("removeMovableViewContext", () => {
    });
    let _scale = vue.ref(1);
    let _oldScale = vue.ref(1);
    let _isScaling = vue.ref(false);
    let _translateX = vue.ref(0);
    let _translateY = vue.ref(0);
    let _SFA = null;
    let _FA = null;
    let _isTouching = false;
    let __baseX;
    let __baseY;
    let _checkCanMove = null;
    let _firstMoveDirection = null;
    const _declineX = new Decline();
    const _declineY = new Decline();
    const __touchInfo = {
      historyX: [0, 0],
      historyY: [0, 0],
      historyT: [0, 0]
    };
    const frictionNumber = vue.computed(() => {
      let val = Number(props2.friction);
      return isNaN(val) || val <= 0 ? 2 : val;
    });
    const _friction = new Friction$1(1, frictionNumber.value);
    vue.watch(() => props2.disabled, () => {
      __handleTouchStart();
    });
    const {
      // scale
      _updateOldScale,
      _endScale,
      _setScale,
      scaleValueSync,
      // layout
      _updateBoundary,
      _updateOffset,
      _updateWH,
      _scaleOffset,
      minX,
      minY,
      maxX,
      maxY,
      // transform
      FAandSFACancel,
      _getLimitXY,
      _setTransform,
      _revise,
      dampingNumber,
      xMove,
      yMove,
      xSync,
      ySync,
      _STD
    } = useMovableViewInit(props2, rootRef, trigger, _scale, _oldScale, _isScaling, _translateX, _translateY, _SFA, _FA);
    function __handleTouchStart() {
      if (!_isScaling.value) {
        if (!props2.disabled) {
          FAandSFACancel();
          __touchInfo.historyX = [0, 0];
          __touchInfo.historyY = [0, 0];
          __touchInfo.historyT = [0, 0];
          if (xMove.value) {
            __baseX = _translateX.value;
          }
          if (yMove.value) {
            __baseY = _translateY.value;
          }
          rootRef.value.style.willChange = "transform";
          _checkCanMove = null;
          _firstMoveDirection = null;
          _isTouching = true;
        }
      }
    }
    function __handleTouchMove(event) {
      if (!_isScaling.value && !props2.disabled && _isTouching) {
        let x = _translateX.value;
        let y = _translateY.value;
        if (_firstMoveDirection === null) {
          _firstMoveDirection = Math.abs(event.detail.dx / event.detail.dy) > 1 ? "htouchmove" : "vtouchmove";
        }
        if (xMove.value) {
          x = event.detail.dx + __baseX;
          __touchInfo.historyX.shift();
          __touchInfo.historyX.push(x);
          if (!yMove.value && _checkCanMove === null) {
            _checkCanMove = Math.abs(event.detail.dx / event.detail.dy) < 1;
          }
        }
        if (yMove.value) {
          y = event.detail.dy + __baseY;
          __touchInfo.historyY.shift();
          __touchInfo.historyY.push(y);
          if (!xMove.value && _checkCanMove === null) {
            _checkCanMove = Math.abs(event.detail.dy / event.detail.dx) < 1;
          }
        }
        __touchInfo.historyT.shift();
        __touchInfo.historyT.push(event.detail.timeStamp);
        if (!_checkCanMove) {
          event.preventDefault();
          let source = "touch";
          if (x < minX.value) {
            if (props2.outOfBounds) {
              source = "touch-out-of-bounds";
              x = minX.value - _declineX.x(minX.value - x);
            } else {
              x = minX.value;
            }
          } else if (x > maxX.value) {
            if (props2.outOfBounds) {
              source = "touch-out-of-bounds";
              x = maxX.value + _declineX.x(x - maxX.value);
            } else {
              x = maxX.value;
            }
          }
          if (y < minY.value) {
            if (props2.outOfBounds) {
              source = "touch-out-of-bounds";
              y = minY.value - _declineY.x(minY.value - y);
            } else {
              y = minY.value;
            }
          } else {
            if (y > maxY.value) {
              if (props2.outOfBounds) {
                source = "touch-out-of-bounds";
                y = maxY.value + _declineY.x(y - maxY.value);
              } else {
                y = maxY.value;
              }
            }
          }
          _requestAnimationFrame(function() {
            _setTransform(x, y, _scale.value, source);
          });
        }
      }
    }
    function __handleTouchEnd() {
      if (!_isScaling.value && !props2.disabled && _isTouching) {
        rootRef.value.style.willChange = "auto";
        _isTouching = false;
        if (!_checkCanMove && !_revise("out-of-bounds") && props2.inertia) {
          const xv = 1e3 * (__touchInfo.historyX[1] - __touchInfo.historyX[0]) / (__touchInfo.historyT[1] - __touchInfo.historyT[0]);
          const yv = 1e3 * (__touchInfo.historyY[1] - __touchInfo.historyY[0]) / (__touchInfo.historyT[1] - __touchInfo.historyT[0]);
          const __translateX = _translateX.value;
          const __translateY = _translateY.value;
          _friction.setV(xv, yv);
          _friction.setS(__translateX, __translateY);
          const x0 = _friction.delta().x;
          const y0 = _friction.delta().y;
          let x = x0 + __translateX;
          let y = y0 + __translateY;
          if (x < minX.value) {
            x = minX.value;
            y = __translateY + (minX.value - __translateX) * y0 / x0;
          } else {
            if (x > maxX.value) {
              x = maxX.value;
              y = __translateY + (maxX.value - __translateX) * y0 / x0;
            }
          }
          if (y < minY.value) {
            y = minY.value;
            x = __translateX + (minY.value - __translateY) * x0 / y0;
          } else {
            if (y > maxY.value) {
              y = maxY.value;
              x = __translateX + (maxY.value - __translateY) * x0 / y0;
            }
          }
          _friction.setEnd(x, y);
          _FA = g(_friction, function() {
            let t2 = _friction.s();
            let x2 = t2.x;
            let y2 = t2.y;
            _setTransform(x2, y2, _scale.value, "friction");
          }, function() {
            _FA.cancel();
          });
        }
      }
      if (!props2.outOfBounds && !props2.inertia) {
        FAandSFACancel();
      }
    }
    function setParent() {
      if (!_isMounted.value) {
        return;
      }
      FAandSFACancel();
      let scale = props2.scale ? scaleValueSync.value : 1;
      _updateOffset();
      _updateWH(scale);
      _updateBoundary();
      let limitXY = _getLimitXY(xSync.value + _scaleOffset.x, ySync.value + _scaleOffset.y);
      let x = limitXY.x;
      let y = limitXY.y;
      _setTransform(x, y, scale, "", true);
      _updateOldScale(scale);
    }
    vue.onMounted(() => {
      useTouchtrack(rootRef.value, (event) => {
        switch (event.detail.state) {
          case "start":
            __handleTouchStart();
            break;
          case "move":
            __handleTouchMove(event);
            break;
          case "end":
            __handleTouchEnd();
        }
      });
      setParent();
      _friction.reconfigure(1, frictionNumber.value);
      _STD.reconfigure(1, 9 * Math.pow(dampingNumber.value, 2) / 40, dampingNumber.value);
      rootRef.value.style.transformOrigin = "center";
      const context = {
        rootRef,
        setParent,
        _endScale,
        _setScale
      };
      addMovableViewContext(context);
      vue.onUnmounted(() => {
        removeMovableViewContext(context);
      });
    });
    vue.onUnmounted(() => {
      FAandSFACancel();
    });
    return {
      setParent
    };
  }
  const OPEN_TYPES = [
    "navigate",
    "redirect",
    "switchTab",
    "reLaunch",
    "navigateBack"
  ];
  const ANIMATION_IN = [
    "slide-in-right",
    "slide-in-left",
    "slide-in-top",
    "slide-in-bottom",
    "fade-in",
    "zoom-out",
    "zoom-fade-out",
    "pop-in",
    "none"
  ];
  const ANIMATION_OUT = [
    "slide-out-right",
    "slide-out-left",
    "slide-out-top",
    "slide-out-bottom",
    "fade-out",
    "zoom-in",
    "zoom-fade-in",
    "pop-out",
    "none"
  ];
  const navigatorProps = {
    hoverClass: {
      type: String,
      default: "navigator-hover"
    },
    url: {
      type: String,
      default: ""
    },
    openType: {
      type: String,
      default: "navigate",
      validator(value) {
        return Boolean(~OPEN_TYPES.indexOf(value));
      }
    },
    delta: {
      type: Number,
      default: 1
    },
    hoverStartTime: {
      type: [Number, String],
      default: 50
    },
    hoverStayTime: {
      type: [Number, String],
      default: 600
    },
    exists: {
      type: String,
      default: ""
    },
    hoverStopPropagation: {
      type: Boolean,
      default: false
    },
    animationType: {
      type: String,
      default: "",
      validator(value) {
        return !value || ANIMATION_IN.concat(ANIMATION_OUT).includes(value);
      }
    },
    animationDuration: {
      type: [String, Number],
      default: 300
    }
  };
  function createNavigatorOnClick(props2) {
    return () => {
      if (props2.openType !== "navigateBack" && !props2.url) {
        console.error(
          "<navigator/> should have url attribute when using navigateTo, redirectTo, reLaunch or switchTab"
        );
        return;
      }
      const animationDuration = parseInt(props2.animationDuration);
      switch (props2.openType) {
        case "navigate":
          navigateTo({
            url: props2.url,
            animationType: props2.animationType || "pop-in",
            animationDuration
          });
          break;
        case "redirect":
          redirectTo({
            url: props2.url,
            // @ts-ignore
            exists: props2.exists
          });
          break;
        case "switchTab":
          switchTab({
            url: props2.url
          });
          break;
        case "reLaunch":
          reLaunch({
            url: props2.url
          });
          break;
        case "navigateBack":
          navigateBack({
            delta: props2.delta,
            animationType: props2.animationType || "pop-out",
            animationDuration
          });
          break;
      }
    };
  }
  /* @__PURE__ */ defineBuiltInComponent({
    name: "Navigator",
    inheritAttrs: false,
    compatConfig: {
      MODE: 3
    },
    props: extend({}, navigatorProps, {
      renderLink: {
        type: Boolean,
        default: true
      }
    }),
    setup(props2, {
      slots
    }) {
      const vm = vue.getCurrentInstance();
      const __scopeId = vm && vm.vnode.scopeId || "";
      const {
        hovering,
        binding
      } = useHover(props2);
      const onClick = createNavigatorOnClick(props2);
      return () => {
        const {
          hoverClass,
          url: url2
        } = props2;
        const hasHoverClass = props2.hoverClass && props2.hoverClass !== "none";
        const navigatorTsx = vue.createVNode("uni-navigator", vue.mergeProps({
          "class": hasHoverClass && hovering.value ? hoverClass : ""
        }, hasHoverClass && binding, vm ? vm.attrs : {}, {
          [__scopeId]: ""
        }, {
          "onClick": onClick
        }), [slots.default && slots.default()], 16, ["onClick"]);
        return props2.renderLink ? vue.createVNode("a", {
          "class": "navigator-wrap",
          "href": url2,
          "onClick": onEventPrevent,
          "onMousedown": onEventPrevent
        }, [navigatorTsx], 40, ["href", "onClick", "onMousedown"]) : navigatorTsx;
      };
    }
  });
  const pickerViewProps = {
    value: {
      type: Array,
      default() {
        return [];
      },
      validator: function(val) {
        return isArray$a(val) && val.filter((val2) => typeof val2 === "number").length === val.length;
      }
    },
    indicatorStyle: {
      type: String,
      default: ""
    },
    indicatorClass: {
      type: String,
      default: ""
    },
    maskStyle: {
      type: String,
      default: ""
    },
    maskClass: {
      type: String,
      default: ""
    }
  };
  function useState$4(props2) {
    const value = vue.reactive([...props2.value]);
    const state2 = vue.reactive({
      value,
      height: 34
    });
    vue.watch(() => props2.value, (val, oldVal) => {
      {
        state2.value.length = val.length;
        val.forEach((val2, index2) => {
          if (val2 !== state2.value[index2]) {
            state2.value.splice(index2, 1, val2);
          }
        });
      }
    });
    return state2;
  }
  const PickerView = /* @__PURE__ */ defineBuiltInComponent({
    name: "PickerView",
    props: pickerViewProps,
    emits: ["change", "pickstart", "pickend", "update:value"],
    setup(props2, {
      slots,
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const wrapperRef = vue.ref(null);
      const trigger = useCustomEvent(rootRef, emit2);
      const state2 = useState$4(props2);
      const resizeSensorRef = vue.ref(null);
      const onMountedCallback = () => {
        const resizeSensor2 = resizeSensorRef.value;
        resizeSensor2 && (state2.height = resizeSensor2.$el.offsetHeight);
      };
      {
        vue.onMounted(onMountedCallback);
      }
      let ColumnsPreRef = vue.ref([]);
      let columnsRef = vue.ref([]);
      function getItemIndex(vnode) {
        let columnVNodes = columnsRef.value;
        {
          columnVNodes = columnVNodes.filter((vnode2) => vnode2.type !== vue.Comment);
        }
        let index2 = columnVNodes.indexOf(vnode);
        return index2 !== -1 ? index2 : ColumnsPreRef.value.indexOf(vnode);
      }
      const getPickerViewColumn = function(columnInstance) {
        const ref2 = vue.computed({
          get() {
            const index2 = getItemIndex(columnInstance.vnode);
            return state2.value[index2] || 0;
          },
          set(current) {
            const index2 = getItemIndex(columnInstance.vnode);
            if (index2 < 0) {
              return;
            }
            const oldCurrent = state2.value[index2];
            if (oldCurrent !== current) {
              state2.value[index2] = current;
              const value = state2.value.map((val) => val);
              emit2("update:value", value);
              trigger("change", {}, {
                value
              });
            }
          }
        });
        return ref2;
      };
      vue.provide("getPickerViewColumn", getPickerViewColumn);
      vue.provide("pickerViewProps", props2);
      vue.provide("pickerViewState", state2);
      return () => {
        const defaultSlots = slots.default && slots.default();
        {
          const vnode = flatVNode(defaultSlots);
          ColumnsPreRef.value = vnode;
          vue.nextTick(() => {
            columnsRef.value = vnode;
          });
        }
        return vue.createVNode("uni-picker-view", {
          "ref": rootRef
        }, [vue.createVNode(ResizeSensor, {
          "ref": resizeSensorRef,
          "onResize": ({
            height
          }) => state2.height = height
        }, null, 8, ["onResize"]), vue.createVNode("div", {
          "ref": wrapperRef,
          "class": "uni-picker-view-wrapper"
        }, [defaultSlots], 512)], 512);
      };
    }
  });
  class Friction {
    constructor(drag) {
      this._drag = drag;
      this._dragLog = Math.log(drag);
      this._x = 0;
      this._v = 0;
      this._startTime = 0;
    }
    set(x, v2) {
      this._x = x;
      this._v = v2;
      this._startTime = (/* @__PURE__ */ new Date()).getTime();
    }
    setVelocityByEnd(e2) {
      this._v = (e2 - this._x) * this._dragLog / (Math.pow(this._drag, 100) - 1);
    }
    x(e2) {
      if (e2 === void 0) {
        e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
      }
      const t2 = e2 === this._dt && this._powDragDt ? this._powDragDt : this._powDragDt = Math.pow(this._drag, e2);
      this._dt = e2;
      return this._x + this._v * t2 / this._dragLog - this._v / this._dragLog;
    }
    dx(e2) {
      if (e2 === void 0) {
        e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
      }
      const t2 = e2 === this._dt && this._powDragDt ? this._powDragDt : this._powDragDt = Math.pow(this._drag, e2);
      this._dt = e2;
      return this._v * t2;
    }
    done() {
      return Math.abs(this.dx()) < 3;
    }
    reconfigure(e2) {
      const t2 = this.x();
      const n = this.dx();
      this._drag = e2;
      this._dragLog = Math.log(e2);
      this.set(t2, n);
    }
    configuration() {
      const e2 = this;
      return [
        {
          label: "Friction",
          read: function() {
            return e2._drag;
          },
          write: function(t2) {
            e2.reconfigure(t2);
          },
          min: 1e-3,
          max: 0.1,
          step: 1e-3
        }
      ];
    }
  }
  function o(e2, t2, n) {
    return e2 > t2 - n && e2 < t2 + n;
  }
  function a(e2, t2) {
    return o(e2, 0, t2);
  }
  class Spring {
    constructor(m, k, c) {
      this._m = m;
      this._k = k;
      this._c = c;
      this._solution = null;
      this._endPosition = 0;
      this._startTime = 0;
    }
    _solve(e2, t2) {
      const n = this._c;
      const i = this._m;
      const r = this._k;
      const o2 = n * n - 4 * i * r;
      if (o2 === 0) {
        const a3 = -n / (2 * i);
        const s2 = e2;
        const l2 = t2 / (a3 * e2);
        return {
          x: function(e22) {
            return (s2 + l2 * e22) * Math.pow(Math.E, a3 * e22);
          },
          dx: function(e22) {
            const t22 = Math.pow(Math.E, a3 * e22);
            return a3 * (s2 + l2 * e22) * t22 + l2 * t22;
          }
        };
      }
      if (o2 > 0) {
        const c = (-n - Math.sqrt(o2)) / (2 * i);
        const u = (-n + Math.sqrt(o2)) / (2 * i);
        const l2 = (t2 - c * e2) / (u - c);
        const s2 = e2 - l2;
        return {
          x: function(e22) {
            let t22;
            let n2;
            if (e22 === this._t) {
              t22 = this._powER1T;
              n2 = this._powER2T;
            }
            this._t = e22;
            if (!t22) {
              t22 = this._powER1T = Math.pow(Math.E, c * e22);
            }
            if (!n2) {
              n2 = this._powER2T = Math.pow(Math.E, u * e22);
            }
            return s2 * t22 + l2 * n2;
          },
          dx: function(e22) {
            let t22;
            let n2;
            if (e22 === this._t) {
              t22 = this._powER1T;
              n2 = this._powER2T;
            }
            this._t = e22;
            if (!t22) {
              t22 = this._powER1T = Math.pow(Math.E, c * e22);
            }
            if (!n2) {
              n2 = this._powER2T = Math.pow(Math.E, u * e22);
            }
            return s2 * c * t22 + l2 * u * n2;
          }
        };
      }
      const d = Math.sqrt(4 * i * r - n * n) / (2 * i);
      const a2 = -n / 2 * i;
      const s = e2;
      const l = (t2 - a2 * e2) / d;
      return {
        x: function(e22) {
          return Math.pow(Math.E, a2 * e22) * (s * Math.cos(d * e22) + l * Math.sin(d * e22));
        },
        dx: function(e22) {
          const t22 = Math.pow(Math.E, a2 * e22);
          const n2 = Math.cos(d * e22);
          const i2 = Math.sin(d * e22);
          return t22 * (l * d * n2 - s * d * i2) + a2 * t22 * (l * i2 + s * n2);
        }
      };
    }
    x(e2) {
      if (e2 === void 0) {
        e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
      }
      return this._solution ? this._endPosition + this._solution.x(e2) : 0;
    }
    dx(e2) {
      if (e2 === void 0) {
        e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
      }
      return this._solution ? this._solution.dx(e2) : 0;
    }
    setEnd(e2, t2, n) {
      if (!n) {
        n = (/* @__PURE__ */ new Date()).getTime();
      }
      if (e2 !== this._endPosition || !a(t2, 0.4)) {
        t2 = t2 || 0;
        let i = this._endPosition;
        if (this._solution) {
          if (a(t2, 0.4)) {
            t2 = this._solution.dx((n - this._startTime) / 1e3);
          }
          i = this._solution.x((n - this._startTime) / 1e3);
          if (a(t2, 0.4)) {
            t2 = 0;
          }
          if (a(i, 0.4)) {
            i = 0;
          }
          i += this._endPosition;
        }
        if (!(this._solution && a(i - e2, 0.4) && a(t2, 0.4))) {
          this._endPosition = e2;
          this._solution = this._solve(i - this._endPosition, t2);
          this._startTime = n;
        }
      }
    }
    snap(e2) {
      this._startTime = (/* @__PURE__ */ new Date()).getTime();
      this._endPosition = e2;
      this._solution = {
        x: function() {
          return 0;
        },
        dx: function() {
          return 0;
        }
      };
    }
    done(e2) {
      if (!e2) {
        e2 = (/* @__PURE__ */ new Date()).getTime();
      }
      return o(this.x(), this._endPosition, 0.4) && a(this.dx(), 0.4);
    }
    reconfigure(e2, t2, n) {
      this._m = e2;
      this._k = t2;
      this._c = n;
      if (!this.done()) {
        this._solution = this._solve(this.x() - this._endPosition, this.dx());
        this._startTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }
    springConstant() {
      return this._k;
    }
    damping() {
      return this._c;
    }
    configuration() {
      function e2(e22, t22) {
        e22.reconfigure(1, t22, e22.damping());
      }
      function t2(e22, t22) {
        e22.reconfigure(1, e22.springConstant(), t22);
      }
      return [
        {
          label: "Spring Constant",
          read: this.springConstant.bind(this),
          write: e2.bind(this, this),
          min: 100,
          max: 1e3
        },
        {
          label: "Damping",
          read: this.damping.bind(this),
          write: t2.bind(this, this),
          min: 1,
          max: 500
        }
      ];
    }
  }
  class Scroll {
    constructor(extent, friction, spring) {
      this._extent = extent;
      this._friction = friction || new Friction(0.01);
      this._spring = spring || new Spring(1, 90, 20);
      this._startTime = 0;
      this._springing = false;
      this._springOffset = 0;
    }
    snap(e2, t2) {
      this._springOffset = 0;
      this._springing = true;
      this._spring.snap(e2);
      this._spring.setEnd(t2);
    }
    set(e2, t2) {
      this._friction.set(e2, t2);
      if (e2 > 0 && t2 >= 0) {
        this._springOffset = 0;
        this._springing = true;
        this._spring.snap(e2);
        this._spring.setEnd(0);
      } else {
        if (e2 < -this._extent && t2 <= 0) {
          this._springOffset = 0;
          this._springing = true;
          this._spring.snap(e2);
          this._spring.setEnd(-this._extent);
        } else {
          this._springing = false;
        }
      }
      this._startTime = (/* @__PURE__ */ new Date()).getTime();
    }
    x(e2) {
      if (!this._startTime) {
        return 0;
      }
      if (!e2) {
        e2 = ((/* @__PURE__ */ new Date()).getTime() - this._startTime) / 1e3;
      }
      if (this._springing) {
        return this._spring.x() + this._springOffset;
      }
      let t2 = this._friction.x(e2);
      let n = this.dx(e2);
      if (t2 > 0 && n >= 0 || t2 < -this._extent && n <= 0) {
        this._springing = true;
        this._spring.setEnd(0, n);
        if (t2 < -this._extent) {
          this._springOffset = -this._extent;
        } else {
          this._springOffset = 0;
        }
        t2 = this._spring.x() + this._springOffset;
      }
      return t2;
    }
    dx(e2) {
      let t2;
      if (this._lastTime === e2) {
        t2 = this._lastDx;
      } else {
        t2 = this._springing ? this._spring.dx(e2) : this._friction.dx(e2);
      }
      this._lastTime = e2;
      this._lastDx = t2;
      return t2;
    }
    done() {
      return this._springing ? this._spring.done() : this._friction.done();
    }
    setVelocityByEnd(e2) {
      this._friction.setVelocityByEnd(e2);
    }
    configuration() {
      const e2 = this._friction.configuration();
      e2.push.apply(e2, this._spring.configuration());
      return e2;
    }
  }
  function createAnimation$2(scroll, onScroll, onEnd) {
    const state2 = {
      id: 0,
      cancelled: false
    };
    function startAnimation2(state22, scroll2, onScroll2, onEnd2) {
      if (!state22 || !state22.cancelled) {
        onScroll2(scroll2);
        const isDone = scroll2.done();
        if (!isDone) {
          if (!state22.cancelled) {
            state22.id = requestAnimationFrame(
              startAnimation2.bind(null, state22, scroll2, onScroll2, onEnd2)
            );
          }
        }
        if (isDone && onEnd2) {
          onEnd2(scroll2);
        }
      }
    }
    function cancel(state22) {
      if (state22 && state22.id) {
        cancelAnimationFrame(state22.id);
      }
      if (state22) {
        state22.cancelled = true;
      }
    }
    startAnimation2(state2, scroll, onScroll, onEnd);
    return {
      cancel: cancel.bind(null, state2),
      model: scroll
    };
  }
  class Scroller {
    constructor(element, options) {
      options = options || {};
      this._element = element;
      this._options = options;
      this._enableSnap = options.enableSnap || false;
      this._itemSize = options.itemSize || 0;
      this._enableX = options.enableX || false;
      this._enableY = options.enableY || false;
      this._shouldDispatchScrollEvent = !!options.onScroll;
      if (this._enableX) {
        this._extent = (options.scrollWidth || this._element.offsetWidth) - this._element.parentElement.offsetWidth;
        this._scrollWidth = options.scrollWidth;
      } else {
        this._extent = (options.scrollHeight || this._element.offsetHeight) - this._element.parentElement.offsetHeight;
        this._scrollHeight = options.scrollHeight;
      }
      this._position = 0;
      this._scroll = new Scroll(this._extent, options.friction, options.spring);
      this._onTransitionEnd = this.onTransitionEnd.bind(this);
      this.updatePosition();
    }
    onTouchStart() {
      this._startPosition = this._position;
      this._lastChangePos = this._startPosition;
      if (this._startPosition > 0) {
        this._startPosition /= 0.5;
      } else {
        if (this._startPosition < -this._extent) {
          this._startPosition = (this._startPosition + this._extent) / 0.5 - this._extent;
        }
      }
      if (this._animation) {
        this._animation.cancel();
        this._scrolling = false;
      }
      this.updatePosition();
    }
    onTouchMove(x, y) {
      let startPosition = this._startPosition;
      if (this._enableX) {
        startPosition += x;
      } else if (this._enableY) {
        startPosition += y;
      }
      if (startPosition > 0) {
        startPosition *= 0.5;
      } else if (startPosition < -this._extent) {
        startPosition = 0.5 * (startPosition + this._extent) - this._extent;
      }
      this._position = startPosition;
      this.updatePosition();
      this.dispatchScroll();
    }
    onTouchEnd(x, y, o2) {
      if (this._enableSnap && this._position > -this._extent && this._position < 0) {
        if (this._enableY && (Math.abs(y) < this._itemSize && Math.abs(o2.y) < 300 || Math.abs(o2.y) < 150)) {
          this.snap();
          return;
        }
        if (this._enableX && (Math.abs(x) < this._itemSize && Math.abs(o2.x) < 300 || Math.abs(o2.x) < 150)) {
          this.snap();
          return;
        }
      }
      if (this._enableX) {
        this._scroll.set(this._position, o2.x);
      } else if (this._enableY) {
        this._scroll.set(this._position, o2.y);
      }
      let c;
      if (this._enableSnap) {
        const s = this._scroll._friction.x(100);
        const l = s % this._itemSize;
        c = Math.abs(l) > this._itemSize / 2 ? s - (this._itemSize - Math.abs(l)) : s - l;
        if (c <= 0 && c >= -this._extent) {
          this._scroll.setVelocityByEnd(c);
        }
      }
      this._lastTime = Date.now();
      this._lastDelay = 0;
      this._scrolling = true;
      this._lastChangePos = this._position;
      this._lastIdx = Math.floor(Math.abs(this._position / this._itemSize));
      this._animation = createAnimation$2(
        this._scroll,
        () => {
          const e2 = Date.now();
          const i = (e2 - this._scroll._startTime) / 1e3;
          const r = this._scroll.x(i);
          this._position = r;
          this.updatePosition();
          const o22 = this._scroll.dx(i);
          if (this._shouldDispatchScrollEvent && e2 - this._lastTime > this._lastDelay) {
            this.dispatchScroll();
            this._lastDelay = Math.abs(2e3 / o22);
            this._lastTime = e2;
          }
        },
        () => {
          if (this._enableSnap) {
            if (c <= 0 && c >= -this._extent) {
              this._position = c;
              this.updatePosition();
            }
            if (isFunction$3(this._options.onSnap)) {
              this._options.onSnap(
                Math.floor(Math.abs(this._position) / this._itemSize)
              );
            }
          }
          if (this._shouldDispatchScrollEvent) {
            this.dispatchScroll();
          }
          this._scrolling = false;
        }
      );
    }
    onTransitionEnd() {
      this._element.style.webkitTransition = "";
      this._element.style.transition = "";
      this._element.removeEventListener("transitionend", this._onTransitionEnd);
      if (this._snapping) {
        this._snapping = false;
      }
      this.dispatchScroll();
    }
    snap() {
      const itemSize = this._itemSize;
      const position = this._position % itemSize;
      const i = Math.abs(position) > this._itemSize / 2 ? this._position - (itemSize - Math.abs(position)) : this._position - position;
      if (this._position !== i) {
        this._snapping = true;
        this.scrollTo(-i);
        if (isFunction$3(this._options.onSnap)) {
          this._options.onSnap(
            Math.floor(Math.abs(this._position) / this._itemSize)
          );
        }
      }
    }
    scrollTo(position, time) {
      if (this._animation) {
        this._animation.cancel();
        this._scrolling = false;
      }
      if (typeof position === "number") {
        this._position = -position;
      }
      if (this._position < -this._extent) {
        this._position = -this._extent;
      } else {
        if (this._position > 0) {
          this._position = 0;
        }
      }
      const transition = "transform " + (time || 0.2) + "s ease-out";
      this._element.style.webkitTransition = "-webkit-" + transition;
      this._element.style.transition = transition;
      this.updatePosition();
      this._element.addEventListener("transitionend", this._onTransitionEnd);
    }
    dispatchScroll() {
      if (isFunction$3(this._options.onScroll) && Math.round(Number(this._lastPos)) !== Math.round(this._position)) {
        this._lastPos = this._position;
        const event = {
          target: {
            scrollLeft: this._enableX ? -this._position : 0,
            scrollTop: this._enableY ? -this._position : 0,
            scrollHeight: this._scrollHeight || this._element.offsetHeight,
            scrollWidth: this._scrollWidth || this._element.offsetWidth,
            offsetHeight: this._element.parentElement.offsetHeight,
            offsetWidth: this._element.parentElement.offsetWidth
          }
        };
        this._options.onScroll(event);
      }
    }
    update(height, scrollHeight, itemSize) {
      let extent = 0;
      const position = this._position;
      if (this._enableX) {
        extent = this._element.childNodes.length ? (scrollHeight || this._element.offsetWidth) - this._element.parentElement.offsetWidth : 0;
        this._scrollWidth = scrollHeight;
      } else {
        extent = this._element.childNodes.length ? (scrollHeight || this._element.offsetHeight) - this._element.parentElement.offsetHeight : 0;
        this._scrollHeight = scrollHeight;
      }
      if (typeof height === "number") {
        this._position = -height;
      }
      if (this._position < -extent) {
        this._position = -extent;
      } else {
        if (this._position > 0) {
          this._position = 0;
        }
      }
      this._itemSize = itemSize || this._itemSize;
      this.updatePosition();
      if (position !== this._position) {
        this.dispatchScroll();
        if (isFunction$3(this._options.onSnap)) {
          this._options.onSnap(
            Math.floor(Math.abs(this._position) / this._itemSize)
          );
        }
      }
      this._extent = extent;
      this._scroll._extent = extent;
    }
    updatePosition() {
      let transform = "";
      if (this._enableX) {
        transform = "translateX(" + this._position + "px) translateZ(0)";
      } else {
        if (this._enableY) {
          transform = "translateY(" + this._position + "px) translateZ(0)";
        }
      }
      this._element.style.webkitTransform = transform;
      this._element.style.transform = transform;
    }
    isScrolling() {
      return this._scrolling || this._snapping;
    }
  }
  function useScroller(element, options) {
    const touchInfo = {
      trackingID: -1,
      maxDy: 0,
      maxDx: 0
    };
    const scroller = new Scroller(element, options);
    function findDelta(event) {
      const touchtrackEvent = event;
      const mouseEvent = event;
      return touchtrackEvent.detail.state === "move" || touchtrackEvent.detail.state === "end" ? {
        x: touchtrackEvent.detail.dx,
        y: touchtrackEvent.detail.dy
      } : {
        x: mouseEvent.screenX - touchInfo.x,
        y: mouseEvent.screenY - touchInfo.y
      };
    }
    function handleTouchStart(event) {
      const touchtrackEvent = event;
      const mouseEvent = event;
      if (touchtrackEvent.detail.state === "start") {
        touchInfo.trackingID = "touch";
        touchInfo.x = touchtrackEvent.detail.x;
        touchInfo.y = touchtrackEvent.detail.y;
      } else {
        touchInfo.trackingID = "mouse";
        touchInfo.x = mouseEvent.screenX;
        touchInfo.y = mouseEvent.screenY;
      }
      touchInfo.maxDx = 0;
      touchInfo.maxDy = 0;
      touchInfo.historyX = [0];
      touchInfo.historyY = [0];
      touchInfo.historyTime = [
        touchtrackEvent.detail.timeStamp || mouseEvent.timeStamp
      ];
      touchInfo.listener = scroller;
      if (scroller.onTouchStart) {
        scroller.onTouchStart();
      }
      if (typeof event.cancelable !== "boolean" || event.cancelable)
        event.preventDefault();
    }
    function handleTouchMove(event) {
      const touchtrackEvent = event;
      const mouseEvent = event;
      if (touchInfo.trackingID !== -1) {
        if (typeof event.cancelable !== "boolean" || event.cancelable)
          event.preventDefault();
        const delta = findDelta(event);
        if (delta) {
          for (touchInfo.maxDy = Math.max(touchInfo.maxDy, Math.abs(delta.y)), touchInfo.maxDx = Math.max(touchInfo.maxDx, Math.abs(delta.x)), touchInfo.historyX.push(delta.x), touchInfo.historyY.push(delta.y), touchInfo.historyTime.push(
            touchtrackEvent.detail.timeStamp || mouseEvent.timeStamp
          ); touchInfo.historyTime.length > 10; ) {
            touchInfo.historyTime.shift();
            touchInfo.historyX.shift();
            touchInfo.historyY.shift();
          }
          if (touchInfo.listener && touchInfo.listener.onTouchMove) {
            touchInfo.listener.onTouchMove(delta.x, delta.y);
          }
        }
      }
    }
    function handleTouchEnd(event) {
      if (touchInfo.trackingID !== -1) {
        event.preventDefault();
        const delta = findDelta(event);
        if (delta) {
          const listener2 = touchInfo.listener;
          touchInfo.trackingID = -1;
          touchInfo.listener = null;
          const length = touchInfo.historyTime.length;
          const o2 = {
            x: 0,
            y: 0
          };
          if (length > 2) {
            for (let i = touchInfo.historyTime.length - 1, time1 = touchInfo.historyTime[i], x = touchInfo.historyX[i], y = touchInfo.historyY[i]; i > 0; ) {
              i--;
              const time0 = touchInfo.historyTime[i];
              const time = time1 - time0;
              if (time > 30 && time < 50) {
                o2.x = (x - touchInfo.historyX[i]) / (time / 1e3);
                o2.y = (y - touchInfo.historyY[i]) / (time / 1e3);
                break;
              }
            }
          }
          touchInfo.historyTime = [];
          touchInfo.historyX = [];
          touchInfo.historyY = [];
          if (listener2 && listener2.onTouchEnd) {
            listener2.onTouchEnd(delta.x, delta.y, o2);
          }
        }
      }
    }
    return {
      scroller,
      handleTouchStart,
      handleTouchMove,
      handleTouchEnd
    };
  }
  let scopedIndex = 0;
  function useScopedClass(indicatorHeightRef) {
    const className = `uni-picker-view-content-${scopedIndex++}`;
    function updateStyle2() {
      const style = document.createElement("style");
      style.innerText = `.uni-picker-view-content.${className}>*{height: ${indicatorHeightRef.value}px;overflow: hidden;}`;
      document.head.appendChild(style);
    }
    vue.watch(() => indicatorHeightRef.value, updateStyle2);
    return className;
  }
  function useCustomClick(dom) {
    const MAX_MOVE = 20;
    let x = 0;
    let y = 0;
    dom.addEventListener("touchstart", (event) => {
      const info = event.changedTouches[0];
      x = info.clientX;
      y = info.clientY;
    });
    dom.addEventListener("touchend", (event) => {
      const info = event.changedTouches[0];
      if (Math.abs(info.clientX - x) < MAX_MOVE && Math.abs(info.clientY - y) < MAX_MOVE) {
        const options = {
          bubbles: true,
          cancelable: true,
          target: event.target,
          currentTarget: event.currentTarget
        };
        const customClick = new CustomEvent("click", options);
        const props2 = ["screenX", "screenY", "clientX", "clientY", "pageX", "pageY"];
        props2.forEach((key) => {
          customClick[key] = info[key];
        });
        event.target.dispatchEvent(customClick);
      }
    });
  }
  const PickerViewColumn = /* @__PURE__ */ defineBuiltInComponent({
    name: "PickerViewColumn",
    setup(props2, {
      slots,
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const contentRef = vue.ref(null);
      const getPickerViewColumn = vue.inject("getPickerViewColumn");
      const instance2 = vue.getCurrentInstance();
      const currentRef = getPickerViewColumn ? getPickerViewColumn(instance2) : vue.ref(0);
      const pickerViewProps2 = vue.inject("pickerViewProps");
      const pickerViewState = vue.inject("pickerViewState");
      const indicatorHeight = vue.ref(34);
      const resizeSensorRef = vue.ref(null);
      const initIndicatorHeight = () => {
        const resizeSensor2 = resizeSensorRef.value;
        indicatorHeight.value = resizeSensor2.$el.offsetHeight;
      };
      {
        vue.onMounted(initIndicatorHeight);
      }
      const maskSize = vue.computed(() => (pickerViewState.height - indicatorHeight.value) / 2);
      const {
        state: scopedAttrsState
      } = useScopedAttrs();
      const className = useScopedClass(indicatorHeight);
      let scroller;
      const state2 = vue.reactive({
        current: currentRef.value,
        length: 0
      });
      let updatesScrollerRequest;
      function updatesScroller() {
        if (scroller && !updatesScrollerRequest) {
          updatesScrollerRequest = true;
          vue.nextTick(() => {
            updatesScrollerRequest = false;
            let current = Math.min(state2.current, state2.length - 1);
            current = Math.max(current, 0);
            scroller.update(current * indicatorHeight.value, void 0, indicatorHeight.value);
          });
        }
      }
      vue.watch(() => currentRef.value, (current) => {
        if (current !== state2.current) {
          state2.current = current;
          updatesScroller();
        }
      });
      vue.watch(() => state2.current, (current) => currentRef.value = current);
      vue.watch([() => indicatorHeight.value, () => state2.length, () => pickerViewState.height], updatesScroller);
      let oldDeltaY = 0;
      function handleWheel(event) {
        const deltaY = oldDeltaY + event.deltaY;
        if (Math.abs(deltaY) > 10) {
          oldDeltaY = 0;
          let current = Math.min(state2.current + (deltaY < 0 ? -1 : 1), state2.length - 1);
          state2.current = current = Math.max(current, 0);
          scroller.scrollTo(current * indicatorHeight.value);
        } else {
          oldDeltaY = deltaY;
        }
        event.preventDefault();
      }
      function handleTap({
        clientY
      }) {
        const el = rootRef.value;
        if (!scroller.isScrolling()) {
          const rect = el.getBoundingClientRect();
          const r = clientY - rect.top - pickerViewState.height / 2;
          const o2 = indicatorHeight.value / 2;
          if (!(Math.abs(r) <= o2)) {
            const a2 = Math.ceil((Math.abs(r) - o2) / indicatorHeight.value);
            const s = r < 0 ? -a2 : a2;
            let current = Math.min(state2.current + s, state2.length - 1);
            state2.current = current = Math.max(current, 0);
            scroller.scrollTo(current * indicatorHeight.value);
          }
        }
      }
      const initScroller = () => {
        const el = rootRef.value;
        const content = contentRef.value;
        const {
          scroller: scrollerOrigin,
          handleTouchStart,
          handleTouchMove,
          handleTouchEnd
        } = useScroller(content, {
          enableY: true,
          enableX: false,
          enableSnap: true,
          itemSize: indicatorHeight.value,
          friction: new Friction(1e-4),
          spring: new Spring(2, 90, 20),
          onSnap: (index2) => {
            if (!isNaN(index2) && index2 !== state2.current) {
              state2.current = index2;
            }
          }
        });
        scroller = scrollerOrigin;
        useTouchtrack(el, (e2) => {
          switch (e2.detail.state) {
            case "start":
              handleTouchStart(e2);
              break;
            case "move":
              handleTouchMove(e2);
              e2.stopPropagation();
              break;
            case "end":
            case "cancel":
              handleTouchEnd(e2);
          }
        }, true);
        useCustomClick(el);
        updatesScroller();
      };
      {
        vue.onMounted(initScroller);
      }
      return () => {
        const defaultSlots = slots.default && slots.default();
        {
          state2.length = flatVNode(defaultSlots).length;
        }
        const padding = `${maskSize.value}px 0`;
        return vue.createVNode("uni-picker-view-column", {
          "ref": rootRef
        }, [vue.createVNode("div", {
          "onWheel": handleWheel,
          "onClick": handleTap,
          "class": "uni-picker-view-group"
        }, [vue.createVNode("div", vue.mergeProps(scopedAttrsState.attrs, {
          "class": ["uni-picker-view-mask", pickerViewProps2.maskClass],
          "style": `background-size: 100% ${maskSize.value}px;${pickerViewProps2.maskStyle}`
        }), null, 16), vue.createVNode("div", vue.mergeProps(scopedAttrsState.attrs, {
          "class": ["uni-picker-view-indicator", pickerViewProps2.indicatorClass],
          "style": pickerViewProps2.indicatorStyle
        }), [vue.createVNode(ResizeSensor, {
          "ref": resizeSensorRef,
          "onResize": ({
            height
          }) => indicatorHeight.value = height
        }, null, 8, ["onResize"])], 16), vue.createVNode("div", {
          "ref": contentRef,
          "class": ["uni-picker-view-content", className],
          "style": {
            padding
          }
        }, [defaultSlots], 6)], 40, ["onWheel", "onClick"])], 512);
      };
    }
  });
  const passiveOptions = /* @__PURE__ */ passive(true);
  const props$m = {
    scrollX: {
      type: [Boolean, String],
      default: false
    },
    scrollY: {
      type: [Boolean, String],
      default: false
    },
    upperThreshold: {
      type: [Number, String],
      default: 50
    },
    lowerThreshold: {
      type: [Number, String],
      default: 50
    },
    scrollTop: {
      type: [Number, String],
      default: 0
    },
    scrollLeft: {
      type: [Number, String],
      default: 0
    },
    scrollIntoView: {
      type: String,
      default: ""
    },
    scrollWithAnimation: {
      type: [Boolean, String],
      default: false
    },
    enableBackToTop: {
      type: [Boolean, String],
      default: false
    },
    refresherEnabled: {
      type: [Boolean, String],
      default: false
    },
    refresherThreshold: {
      type: Number,
      default: 45
    },
    refresherDefaultStyle: {
      type: String,
      default: "back"
    },
    refresherBackground: {
      type: String,
      default: "#fff"
    },
    refresherTriggered: {
      type: [Boolean, String],
      default: false
    }
  };
  const ScrollView = /* @__PURE__ */ defineBuiltInComponent({
    name: "ScrollView",
    compatConfig: {
      MODE: 3
    },
    props: props$m,
    emits: ["scroll", "scrolltoupper", "scrolltolower", "refresherrefresh", "refresherrestore", "refresherpulling", "refresherabort", "update:refresherTriggered"],
    setup(props2, {
      emit: emit2,
      slots
    }) {
      const rootRef = vue.ref(null);
      const main = vue.ref(null);
      const wrap = vue.ref(null);
      const content = vue.ref(null);
      const refresherinner = vue.ref(null);
      const trigger = useCustomEvent(rootRef, emit2);
      const {
        state: state2,
        scrollTopNumber,
        scrollLeftNumber
      } = useScrollViewState(props2);
      useScrollViewLoader(props2, state2, scrollTopNumber, scrollLeftNumber, trigger, rootRef, main, content, emit2);
      const mainStyle = vue.computed(() => {
        let style = "";
        props2.scrollX ? style += "overflow-x:auto;" : style += "overflow-x:hidden;";
        props2.scrollY ? style += "overflow-y:auto;" : style += "overflow-y:hidden;";
        return style;
      });
      return () => {
        const {
          refresherEnabled,
          refresherBackground,
          refresherDefaultStyle
        } = props2;
        const {
          refresherHeight,
          refreshState,
          refreshRotate
        } = state2;
        return vue.createVNode("uni-scroll-view", {
          "ref": rootRef
        }, [vue.createVNode("div", {
          "ref": wrap,
          "class": "uni-scroll-view"
        }, [vue.createVNode("div", {
          "ref": main,
          "style": mainStyle.value,
          "class": "uni-scroll-view"
        }, [vue.createVNode("div", {
          "ref": content,
          "class": "uni-scroll-view-content"
        }, [refresherEnabled ? vue.createVNode("div", {
          "ref": refresherinner,
          "style": {
            backgroundColor: refresherBackground,
            height: refresherHeight + "px"
          },
          "class": "uni-scroll-view-refresher"
        }, [refresherDefaultStyle !== "none" ? vue.createVNode("div", {
          "class": "uni-scroll-view-refresh"
        }, [vue.createVNode("div", {
          "class": "uni-scroll-view-refresh-inner"
        }, [refreshState == "pulling" ? vue.createVNode("svg", {
          "key": "refresh__icon",
          "style": {
            transform: "rotate(" + refreshRotate + "deg)"
          },
          "fill": "#2BD009",
          "class": "uni-scroll-view-refresh__icon",
          "width": "24",
          "height": "24",
          "viewBox": "0 0 24 24"
        }, [vue.createVNode("path", {
          "d": "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
        }, null), vue.createVNode("path", {
          "d": "M0 0h24v24H0z",
          "fill": "none"
        }, null)], 4) : null, refreshState == "refreshing" ? vue.createVNode("svg", {
          "key": "refresh__spinner",
          "class": "uni-scroll-view-refresh__spinner",
          "width": "24",
          "height": "24",
          "viewBox": "25 25 50 50"
        }, [vue.createVNode("circle", {
          "cx": "50",
          "cy": "50",
          "r": "20",
          "fill": "none",
          "style": "color: #2bd009",
          "stroke-width": "3"
        }, null)]) : null])]) : null, refresherDefaultStyle == "none" ? slots.refresher && slots.refresher() : null], 4) : null, slots.default && slots.default()], 512)], 4)], 512)], 512);
      };
    }
  });
  function useScrollViewState(props2) {
    const scrollTopNumber = vue.computed(() => {
      return Number(props2.scrollTop) || 0;
    });
    const scrollLeftNumber = vue.computed(() => {
      return Number(props2.scrollLeft) || 0;
    });
    const state2 = vue.reactive({
      lastScrollTop: scrollTopNumber.value,
      lastScrollLeft: scrollLeftNumber.value,
      lastScrollToUpperTime: 0,
      lastScrollToLowerTime: 0,
      refresherHeight: 0,
      refreshRotate: 0,
      refreshState: ""
    });
    return {
      state: state2,
      scrollTopNumber,
      scrollLeftNumber
    };
  }
  function useScrollViewLoader(props2, state2, scrollTopNumber, scrollLeftNumber, trigger, rootRef, main, content, emit2) {
    let beforeRefreshing = false;
    let toUpperNumber = 0;
    let triggerAbort = false;
    let __transitionEnd = () => {
    };
    const upperThresholdNumber = vue.computed(() => {
      let val = Number(props2.upperThreshold);
      return isNaN(val) ? 50 : val;
    });
    const lowerThresholdNumber = vue.computed(() => {
      let val = Number(props2.lowerThreshold);
      return isNaN(val) ? 50 : val;
    });
    function scrollTo2(scrollToValue, direction2) {
      const container = main.value;
      let transformValue = 0;
      let transform = "";
      scrollToValue < 0 ? scrollToValue = 0 : direction2 === "x" && scrollToValue > container.scrollWidth - container.offsetWidth ? scrollToValue = container.scrollWidth - container.offsetWidth : direction2 === "y" && scrollToValue > container.scrollHeight - container.offsetHeight && (scrollToValue = container.scrollHeight - container.offsetHeight);
      direction2 === "x" ? transformValue = container.scrollLeft - scrollToValue : direction2 === "y" && (transformValue = container.scrollTop - scrollToValue);
      if (transformValue === 0)
        return;
      let _content = content.value;
      _content.style.transition = "transform .3s ease-out";
      _content.style.webkitTransition = "-webkit-transform .3s ease-out";
      if (direction2 === "x") {
        transform = "translateX(" + transformValue + "px) translateZ(0)";
      } else {
        direction2 === "y" && (transform = "translateY(" + transformValue + "px) translateZ(0)");
      }
      _content.removeEventListener("transitionend", __transitionEnd);
      _content.removeEventListener("webkitTransitionEnd", __transitionEnd);
      __transitionEnd = () => _transitionEnd(scrollToValue, direction2);
      _content.addEventListener("transitionend", __transitionEnd);
      _content.addEventListener("webkitTransitionEnd", __transitionEnd);
      if (direction2 === "x") {
        container.style.overflowX = "hidden";
      } else if (direction2 === "y") {
        container.style.overflowY = "hidden";
      }
      _content.style.transform = transform;
      _content.style.webkitTransform = transform;
    }
    function _handleScroll($event) {
      const target = $event.target;
      trigger("scroll", $event, {
        scrollLeft: target.scrollLeft,
        scrollTop: target.scrollTop,
        scrollHeight: target.scrollHeight,
        scrollWidth: target.scrollWidth,
        deltaX: state2.lastScrollLeft - target.scrollLeft,
        deltaY: state2.lastScrollTop - target.scrollTop
      });
      if (props2.scrollY) {
        if (target.scrollTop <= upperThresholdNumber.value && state2.lastScrollTop - target.scrollTop > 0 && $event.timeStamp - state2.lastScrollToUpperTime > 200) {
          trigger("scrolltoupper", $event, {
            direction: "top"
          });
          state2.lastScrollToUpperTime = $event.timeStamp;
        }
        if (target.scrollTop + target.offsetHeight + lowerThresholdNumber.value >= target.scrollHeight && state2.lastScrollTop - target.scrollTop < 0 && $event.timeStamp - state2.lastScrollToLowerTime > 200) {
          trigger("scrolltolower", $event, {
            direction: "bottom"
          });
          state2.lastScrollToLowerTime = $event.timeStamp;
        }
      }
      if (props2.scrollX) {
        if (target.scrollLeft <= upperThresholdNumber.value && state2.lastScrollLeft - target.scrollLeft > 0 && $event.timeStamp - state2.lastScrollToUpperTime > 200) {
          trigger("scrolltoupper", $event, {
            direction: "left"
          });
          state2.lastScrollToUpperTime = $event.timeStamp;
        }
        if (target.scrollLeft + target.offsetWidth + lowerThresholdNumber.value >= target.scrollWidth && state2.lastScrollLeft - target.scrollLeft < 0 && $event.timeStamp - state2.lastScrollToLowerTime > 200) {
          trigger("scrolltolower", $event, {
            direction: "right"
          });
          state2.lastScrollToLowerTime = $event.timeStamp;
        }
      }
      state2.lastScrollTop = target.scrollTop;
      state2.lastScrollLeft = target.scrollLeft;
    }
    function _scrollTopChanged(val) {
      if (props2.scrollY) {
        {
          if (props2.scrollWithAnimation) {
            scrollTo2(val, "y");
          } else {
            main.value.scrollTop = val;
          }
        }
      }
    }
    function _scrollLeftChanged(val) {
      if (props2.scrollX) {
        {
          if (props2.scrollWithAnimation) {
            scrollTo2(val, "x");
          } else {
            main.value.scrollLeft = val;
          }
        }
      }
    }
    function _scrollIntoViewChanged(val) {
      if (val) {
        if (!/^[_a-zA-Z][-_a-zA-Z0-9:]*$/.test(val)) {
          console.error(`id error: scroll-into-view=${val}`);
          return;
        }
        let element = rootRef.value.querySelector("#" + val);
        if (element) {
          let mainRect = main.value.getBoundingClientRect();
          let elRect = element.getBoundingClientRect();
          if (props2.scrollX) {
            let left = elRect.left - mainRect.left;
            let scrollLeft = main.value.scrollLeft;
            let x = scrollLeft + left;
            if (props2.scrollWithAnimation) {
              scrollTo2(x, "x");
            } else {
              main.value.scrollLeft = x;
            }
          }
          if (props2.scrollY) {
            let top = elRect.top - mainRect.top;
            let scrollTop = main.value.scrollTop;
            let y = scrollTop + top;
            if (props2.scrollWithAnimation) {
              scrollTo2(y, "y");
            } else {
              main.value.scrollTop = y;
            }
          }
        }
      }
    }
    function _transitionEnd(val, direction2) {
      content.value.style.transition = "";
      content.value.style.webkitTransition = "";
      content.value.style.transform = "";
      content.value.style.webkitTransform = "";
      let _main = main.value;
      if (direction2 === "x") {
        _main.style.overflowX = props2.scrollX ? "auto" : "hidden";
        _main.scrollLeft = val;
      } else if (direction2 === "y") {
        _main.style.overflowY = props2.scrollY ? "auto" : "hidden";
        _main.scrollTop = val;
      }
      content.value.removeEventListener("transitionend", __transitionEnd);
      content.value.removeEventListener("webkitTransitionEnd", __transitionEnd);
    }
    function _setRefreshState(_state) {
      if (!props2.refresherEnabled)
        return;
      switch (_state) {
        case "refreshing":
          state2.refresherHeight = props2.refresherThreshold;
          if (!beforeRefreshing) {
            beforeRefreshing = true;
            trigger("refresherrefresh", {}, {});
            emit2("update:refresherTriggered", true);
          }
          break;
        case "restore":
        case "refresherabort":
          beforeRefreshing = false;
          state2.refresherHeight = toUpperNumber = 0;
          if (_state === "restore") {
            triggerAbort = false;
            trigger("refresherrestore", {}, {});
          }
          if (_state === "refresherabort" && triggerAbort) {
            triggerAbort = false;
            trigger("refresherabort", {}, {});
          }
          break;
      }
      state2.refreshState = _state;
    }
    vue.onMounted(() => {
      vue.nextTick(() => {
        _scrollTopChanged(scrollTopNumber.value);
        _scrollLeftChanged(scrollLeftNumber.value);
      });
      _scrollIntoViewChanged(props2.scrollIntoView);
      let __handleScroll = function(event) {
        event.preventDefault();
        event.stopPropagation();
        _handleScroll(event);
      };
      let touchStart = {
        x: 0,
        y: 0
      };
      let needStop = null;
      let __handleTouchMove = function(event) {
        if (touchStart === null)
          return;
        let x = event.touches[0].pageX;
        let y = event.touches[0].pageY;
        let _main = main.value;
        if (Math.abs(x - touchStart.x) > Math.abs(y - touchStart.y)) {
          if (props2.scrollX) {
            if (_main.scrollLeft === 0 && x > touchStart.x) {
              needStop = false;
              return;
            } else if (_main.scrollWidth === _main.offsetWidth + _main.scrollLeft && x < touchStart.x) {
              needStop = false;
              return;
            }
            needStop = true;
          } else {
            needStop = false;
          }
        } else {
          if (props2.scrollY) {
            if (_main.scrollTop === 0 && y > touchStart.y) {
              needStop = false;
              if (props2.refresherEnabled && event.cancelable !== false)
                event.preventDefault();
            } else if (_main.scrollHeight === _main.offsetHeight + _main.scrollTop && y < touchStart.y) {
              needStop = false;
              return;
            } else {
              needStop = true;
            }
          } else {
            needStop = false;
          }
        }
        if (needStop) {
          event.stopPropagation();
        }
        if (_main.scrollTop === 0 && event.touches.length === 1) {
          _setRefreshState("pulling");
        }
        if (props2.refresherEnabled && state2.refreshState === "pulling") {
          const dy = y - touchStart.y;
          if (toUpperNumber === 0) {
            toUpperNumber = y;
          }
          if (!beforeRefreshing) {
            state2.refresherHeight = y - toUpperNumber;
            if (state2.refresherHeight > 0) {
              triggerAbort = true;
              trigger("refresherpulling", event, {
                deltaY: dy
              });
            }
          } else {
            state2.refresherHeight = dy + props2.refresherThreshold;
            triggerAbort = false;
          }
          const route2 = state2.refresherHeight / props2.refresherThreshold;
          state2.refreshRotate = (route2 > 1 ? 1 : route2) * 360;
        }
      };
      let __handleTouchStart = function(event) {
        if (event.touches.length === 1) {
          touchStart = {
            x: event.touches[0].pageX,
            y: event.touches[0].pageY
          };
        }
      };
      let __handleTouchEnd = function(event) {
        touchStart = null;
        if (state2.refresherHeight >= props2.refresherThreshold) {
          _setRefreshState("refreshing");
        } else {
          _setRefreshState("refresherabort");
        }
      };
      main.value.addEventListener("touchstart", __handleTouchStart, passiveOptions);
      main.value.addEventListener("touchmove", __handleTouchMove, passive(false));
      main.value.addEventListener("scroll", __handleScroll, passive(false));
      main.value.addEventListener("touchend", __handleTouchEnd, passiveOptions);
      vue.onBeforeUnmount(() => {
        main.value.removeEventListener("touchstart", __handleTouchStart);
        main.value.removeEventListener("touchmove", __handleTouchMove);
        main.value.removeEventListener("scroll", __handleScroll);
        main.value.removeEventListener("touchend", __handleTouchEnd);
      });
    });
    vue.onActivated(() => {
      props2.scrollY && (main.value.scrollTop = state2.lastScrollTop);
      props2.scrollX && (main.value.scrollLeft = state2.lastScrollLeft);
    });
    vue.watch(scrollTopNumber, (val) => {
      _scrollTopChanged(val);
    });
    vue.watch(scrollLeftNumber, (val) => {
      _scrollLeftChanged(val);
    });
    vue.watch(() => props2.scrollIntoView, (val) => {
      _scrollIntoViewChanged(val);
    });
    vue.watch(() => props2.refresherTriggered, (val) => {
      if (val === true) {
        _setRefreshState("refreshing");
      } else if (val === false) {
        _setRefreshState("restore");
      }
    });
  }
  const props$k = {
    indicatorDots: {
      type: [Boolean, String],
      default: false
    },
    vertical: {
      type: [Boolean, String],
      default: false
    },
    autoplay: {
      type: [Boolean, String],
      default: false
    },
    circular: {
      type: [Boolean, String],
      default: false
    },
    interval: {
      type: [Number, String],
      default: 5e3
    },
    duration: {
      type: [Number, String],
      default: 500
    },
    current: {
      type: [Number, String],
      default: 0
    },
    indicatorColor: {
      type: String,
      default: ""
    },
    indicatorActiveColor: {
      type: String,
      default: ""
    },
    previousMargin: {
      type: String,
      default: ""
    },
    nextMargin: {
      type: String,
      default: ""
    },
    currentItemId: {
      type: String,
      default: ""
    },
    skipHiddenItemLayout: {
      type: [Boolean, String],
      default: false
    },
    displayMultipleItems: {
      type: [Number, String],
      default: 1
    },
    disableTouch: {
      type: [Boolean, String],
      default: false
    },
    navigation: {
      type: [Boolean, String],
      default: false
    },
    navigationColor: {
      type: String,
      default: "#fff"
    },
    navigationActiveColor: {
      type: String,
      default: "rgba(53, 53, 53, 0.6)"
    }
  };
  function useState$3(props2) {
    const interval = vue.computed(() => {
      const interval2 = Number(props2.interval);
      return isNaN(interval2) ? 5e3 : interval2;
    });
    const duration = vue.computed(() => {
      const duration2 = Number(props2.duration);
      return isNaN(duration2) ? 500 : duration2;
    });
    const displayMultipleItems = vue.computed(() => {
      const displayMultipleItems2 = Math.round(props2.displayMultipleItems);
      return isNaN(displayMultipleItems2) ? 1 : displayMultipleItems2;
    });
    const state2 = vue.reactive({
      interval,
      duration,
      displayMultipleItems,
      current: Math.round(props2.current) || 0,
      currentItemId: props2.currentItemId,
      userTracking: false
    });
    return state2;
  }
  function useLayout(props2, state2, swiperContexts, slideFrameRef, emit2, trigger) {
    function cancelSchedule() {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    }
    let timer = null;
    let invalid = true;
    let viewportPosition = 0;
    let viewportMoveRatio = 1;
    let animating = null;
    let requestedAnimation = false;
    let contentTrackViewport = 0;
    let transitionStart;
    let currentChangeSource = "";
    let animationFrame;
    const swiperEnabled = vue.computed(() => swiperContexts.value.length > state2.displayMultipleItems);
    const circularEnabled = vue.computed(() => props2.circular && swiperEnabled.value);
    function checkCircularLayout(index2) {
      if (!invalid) {
        for (let items = swiperContexts.value, n = items.length, i = index2 + state2.displayMultipleItems, r = 0; r < n; r++) {
          const item = items[r];
          const s = Math.floor(index2 / n) * n + r;
          const l = s + n;
          const c = s - n;
          const u = Math.max(index2 - (s + 1), s - i, 0);
          const d = Math.max(index2 - (l + 1), l - i, 0);
          const h2 = Math.max(index2 - (c + 1), c - i, 0);
          const p2 = Math.min(u, d, h2);
          const position = [s, l, c][[u, d, h2].indexOf(p2)];
          item.updatePosition(position, props2.vertical);
        }
      }
    }
    function updateViewport(index2) {
      if (!(Math.floor(2 * viewportPosition) === Math.floor(2 * index2) && Math.ceil(2 * viewportPosition) === Math.ceil(2 * index2))) {
        if (circularEnabled.value) {
          checkCircularLayout(index2);
        }
      }
      const x = props2.vertical ? "0" : 100 * -index2 * viewportMoveRatio + "%";
      const y = props2.vertical ? 100 * -index2 * viewportMoveRatio + "%" : "0";
      const transform = "translate(" + x + ", " + y + ") translateZ(0)";
      const slideFrame = slideFrameRef.value;
      if (slideFrame) {
        slideFrame.style.webkitTransform = transform;
        slideFrame.style.transform = transform;
      }
      viewportPosition = index2;
      if (!transitionStart) {
        if (index2 % 1 === 0) {
          return;
        }
        transitionStart = index2;
      }
      index2 -= Math.floor(transitionStart);
      const items = swiperContexts.value;
      if (index2 <= -(items.length - 1)) {
        index2 += items.length;
      } else if (index2 >= items.length) {
        index2 -= items.length;
      }
      index2 = transitionStart % 1 > 0.5 || transitionStart < 0 ? index2 - 1 : index2;
      trigger("transition", {}, {
        dx: props2.vertical ? 0 : index2 * slideFrame.offsetWidth,
        dy: props2.vertical ? index2 * slideFrame.offsetHeight : 0
      });
    }
    function endViewportAnimation() {
      if (animating) {
        updateViewport(animating.toPos);
        animating = null;
      }
    }
    function normalizeCurrentValue(current) {
      const length = swiperContexts.value.length;
      if (!length) {
        return -1;
      }
      const index2 = (Math.round(current) % length + length) % length;
      if (circularEnabled.value) {
        if (length <= state2.displayMultipleItems) {
          return 0;
        }
      } else if (index2 > length - state2.displayMultipleItems) {
        return length - state2.displayMultipleItems;
      }
      return index2;
    }
    function cancelViewportAnimation() {
      animating = null;
    }
    function animateFrameFuncProto() {
      if (!animating) {
        requestedAnimation = false;
        return;
      }
      const _animating = animating;
      const toPos = _animating.toPos;
      const acc = _animating.acc;
      const endTime = _animating.endTime;
      const source = _animating.source;
      const time = endTime - Date.now();
      if (time <= 0) {
        updateViewport(toPos);
        animating = null;
        requestedAnimation = false;
        transitionStart = null;
        const item = swiperContexts.value[state2.current];
        if (item) {
          const currentItemId = item.getItemId();
          trigger("animationfinish", {}, {
            current: state2.current,
            currentItemId,
            source
          });
        }
        return;
      }
      const s = acc * time * time / 2;
      const l = toPos + s;
      updateViewport(l);
      animationFrame = requestAnimationFrame(animateFrameFuncProto);
    }
    function animateViewport(current, source, n) {
      cancelViewportAnimation();
      const duration = state2.duration;
      const length = swiperContexts.value.length;
      let position = viewportPosition;
      if (circularEnabled.value) {
        if (n < 0) {
          for (; position < current; ) {
            position += length;
          }
          for (; position - length > current; ) {
            position -= length;
          }
        } else if (n > 0) {
          for (; position > current; ) {
            position -= length;
          }
          for (; position + length < current; ) {
            position += length;
          }
          if (position + length - current < current - position) {
            position += length;
          }
        } else {
          for (; position + length < current; ) {
            position += length;
          }
          for (; position - length > current; ) {
            position -= length;
          }
          if (position + length - current < current - position) {
            position += length;
          }
        }
      } else if (source === "click") {
        current = current + state2.displayMultipleItems - 1 < length ? current : 0;
      }
      animating = {
        toPos: current,
        acc: 2 * (position - current) / (duration * duration),
        endTime: Date.now() + duration,
        source
      };
      if (!requestedAnimation) {
        requestedAnimation = true;
        animationFrame = requestAnimationFrame(animateFrameFuncProto);
      }
    }
    function scheduleAutoplay() {
      cancelSchedule();
      const items = swiperContexts.value;
      const callback = function() {
        timer = null;
        currentChangeSource = "autoplay";
        if (circularEnabled.value) {
          state2.current = normalizeCurrentValue(state2.current + 1);
        } else {
          state2.current = state2.current + state2.displayMultipleItems < items.length ? state2.current + 1 : 0;
        }
        animateViewport(state2.current, "autoplay", circularEnabled.value ? 1 : 0);
        timer = setTimeout(callback, state2.interval);
      };
      if (!(invalid || items.length <= state2.displayMultipleItems)) {
        timer = setTimeout(callback, state2.interval);
      }
    }
    function resetLayout() {
      cancelSchedule();
      endViewportAnimation();
      const items = swiperContexts.value;
      for (let i = 0; i < items.length; i++) {
        items[i].updatePosition(i, props2.vertical);
      }
      viewportMoveRatio = 1;
      const slideFrameEl = slideFrameRef.value;
      if (state2.displayMultipleItems === 1 && items.length) {
        const itemRect = items[0].getBoundingClientRect();
        const slideFrameRect = slideFrameEl.getBoundingClientRect();
        viewportMoveRatio = itemRect.width / slideFrameRect.width;
        if (!(viewportMoveRatio > 0 && viewportMoveRatio < 1)) {
          viewportMoveRatio = 1;
        }
      }
      const position = viewportPosition;
      viewportPosition = -2;
      const current = state2.current;
      if (current >= 0) {
        invalid = false;
        if (state2.userTracking) {
          updateViewport(position + current - contentTrackViewport);
          contentTrackViewport = current;
        } else {
          updateViewport(current);
          if (props2.autoplay) {
            scheduleAutoplay();
          }
        }
      } else {
        invalid = true;
        updateViewport(-state2.displayMultipleItems - 1);
      }
    }
    vue.watch([() => props2.current, () => props2.currentItemId, () => [...swiperContexts.value]], () => {
      let current = -1;
      if (props2.currentItemId) {
        for (let i = 0, items = swiperContexts.value; i < items.length; i++) {
          const itemId = items[i].getItemId();
          if (itemId === props2.currentItemId) {
            current = i;
            break;
          }
        }
      }
      if (current < 0) {
        current = Math.round(props2.current) || 0;
      }
      current = current < 0 ? 0 : current;
      if (state2.current !== current) {
        currentChangeSource = "";
        state2.current = current;
      }
    });
    vue.watch([() => props2.vertical, () => circularEnabled.value, () => state2.displayMultipleItems, () => [...swiperContexts.value]], resetLayout);
    vue.watch(() => state2.interval, () => {
      if (timer) {
        cancelSchedule();
        scheduleAutoplay();
      }
    });
    function currentChanged(current, history2) {
      const source = currentChangeSource;
      currentChangeSource = "";
      const items = swiperContexts.value;
      if (!source) {
        const length = items.length;
        animateViewport(current, "", circularEnabled.value && history2 + (length - current) % length > length / 2 ? 1 : 0);
      }
      const item = items[current];
      if (item) {
        const currentItemId = state2.currentItemId = item.getItemId();
        trigger("change", {}, {
          current: state2.current,
          currentItemId,
          source
        });
      }
    }
    vue.watch(() => state2.current, (val, oldVal) => {
      currentChanged(val, oldVal);
      emit2("update:current", val);
    });
    vue.watch(() => state2.currentItemId, (val) => {
      emit2("update:currentItemId", val);
    });
    function inintAutoplay(enable) {
      if (enable) {
        scheduleAutoplay();
      } else {
        cancelSchedule();
      }
    }
    vue.watch(() => props2.autoplay && !state2.userTracking, inintAutoplay);
    inintAutoplay(props2.autoplay && !state2.userTracking);
    vue.onMounted(() => {
      let userDirectionChecked = false;
      let contentTrackSpeed = 0;
      let contentTrackT = 0;
      function handleTrackStart() {
        cancelSchedule();
        contentTrackViewport = viewportPosition;
        contentTrackSpeed = 0;
        contentTrackT = Date.now();
        cancelViewportAnimation();
      }
      function handleTrackMove(data) {
        const oldContentTrackT = contentTrackT;
        contentTrackT = Date.now();
        const length = swiperContexts.value.length;
        const other = length - state2.displayMultipleItems;
        function calc2(val) {
          return 0.5 - 0.25 / (val + 0.5);
        }
        function move(oldVal, newVal) {
          let val = contentTrackViewport + oldVal;
          contentTrackSpeed = 0.6 * contentTrackSpeed + 0.4 * newVal;
          if (!circularEnabled.value) {
            if (val < 0 || val > other) {
              if (val < 0) {
                val = -calc2(-val);
              } else {
                if (val > other) {
                  val = other + calc2(val - other);
                }
              }
              contentTrackSpeed = 0;
            }
          }
          updateViewport(val);
        }
        const time = contentTrackT - oldContentTrackT || 1;
        const slideFrameEl = slideFrameRef.value;
        if (props2.vertical) {
          move(-data.dy / slideFrameEl.offsetHeight, -data.ddy / time);
        } else {
          move(-data.dx / slideFrameEl.offsetWidth, -data.ddx / time);
        }
      }
      function handleTrackEnd(isCancel) {
        state2.userTracking = false;
        const t2 = contentTrackSpeed / Math.abs(contentTrackSpeed);
        let n = 0;
        if (!isCancel && Math.abs(contentTrackSpeed) > 0.2) {
          n = 0.5 * t2;
        }
        const current = normalizeCurrentValue(viewportPosition + n);
        if (isCancel) {
          updateViewport(contentTrackViewport);
        } else {
          currentChangeSource = "touch";
          state2.current = current;
          animateViewport(current, "touch", n !== 0 ? n : current === 0 && circularEnabled.value && viewportPosition >= 1 ? 1 : 0);
        }
      }
      useTouchtrack(slideFrameRef.value, (event) => {
        if (props2.disableTouch) {
          return;
        }
        if (!invalid) {
          if (event.detail.state === "start") {
            state2.userTracking = true;
            userDirectionChecked = false;
            return handleTrackStart();
          }
          if (event.detail.state === "end") {
            return handleTrackEnd(false);
          }
          if (event.detail.state === "cancel") {
            return handleTrackEnd(true);
          }
          if (state2.userTracking) {
            if (!userDirectionChecked) {
              userDirectionChecked = true;
              const t2 = Math.abs(event.detail.dx);
              const n = Math.abs(event.detail.dy);
              if (t2 >= n && props2.vertical) {
                state2.userTracking = false;
              } else {
                if (t2 <= n && !props2.vertical) {
                  state2.userTracking = false;
                }
              }
              if (!state2.userTracking) {
                if (props2.autoplay) {
                  scheduleAutoplay();
                }
                return;
              }
            }
            handleTrackMove(event.detail);
            return false;
          }
        }
      });
    });
    vue.onUnmounted(() => {
      cancelSchedule();
      cancelAnimationFrame(animationFrame);
    });
    function onSwiperDotClick(index2) {
      animateViewport(state2.current = index2, currentChangeSource = "click", circularEnabled.value ? 1 : 0);
    }
    return {
      onSwiperDotClick,
      circularEnabled,
      swiperEnabled
    };
  }
  const Swiper = /* @__PURE__ */ defineBuiltInComponent({
    name: "Swiper",
    props: props$k,
    emits: ["change", "transition", "animationfinish", "update:current", "update:currentItemId"],
    setup(props2, {
      slots,
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const trigger = useCustomEvent(rootRef, emit2);
      const slidesWrapperRef = vue.ref(null);
      const slideFrameRef = vue.ref(null);
      const state2 = useState$3(props2);
      const slidesStyle = vue.computed(() => {
        let style = {};
        if (props2.nextMargin || props2.previousMargin) {
          style = props2.vertical ? {
            left: 0,
            right: 0,
            top: rpx2px(props2.previousMargin, true),
            bottom: rpx2px(props2.nextMargin, true)
          } : {
            top: 0,
            bottom: 0,
            left: rpx2px(props2.previousMargin, true),
            right: rpx2px(props2.nextMargin, true)
          };
        }
        return style;
      });
      const slideFrameStyle = vue.computed(() => {
        const value = Math.abs(100 / state2.displayMultipleItems) + "%";
        return {
          width: props2.vertical ? "100%" : value,
          height: !props2.vertical ? "100%" : value
        };
      });
      let swiperItems = [];
      const originSwiperContexts = [];
      const swiperContexts = vue.ref([]);
      function updateSwiperContexts() {
        const contexts = [];
        for (let index2 = 0; index2 < swiperItems.length; index2++) {
          let swiperItem2 = swiperItems[index2];
          if (!(swiperItem2 instanceof Element)) {
            swiperItem2 = swiperItem2.el;
          }
          const swiperContext = originSwiperContexts.find((context) => swiperItem2 === context.rootRef.value);
          if (swiperContext) {
            contexts.push(vue.markRaw(swiperContext));
          }
        }
        swiperContexts.value = contexts;
      }
      const addSwiperContext = function(swiperContext) {
        originSwiperContexts.push(swiperContext);
        updateSwiperContexts();
      };
      vue.provide("addSwiperContext", addSwiperContext);
      const removeSwiperContext = function(swiperContext) {
        const index2 = originSwiperContexts.indexOf(swiperContext);
        if (index2 >= 0) {
          originSwiperContexts.splice(index2, 1);
          updateSwiperContexts();
        }
      };
      vue.provide("removeSwiperContext", removeSwiperContext);
      const {
        onSwiperDotClick,
        circularEnabled,
        swiperEnabled
      } = useLayout(props2, state2, swiperContexts, slideFrameRef, emit2, trigger);
      let createNavigationTsx = () => null;
      {
        createNavigationTsx = useSwiperNavigation(rootRef, props2, state2, onSwiperDotClick, swiperContexts, circularEnabled, swiperEnabled);
      }
      return () => {
        const defaultSlots = slots.default && slots.default();
        swiperItems = flatVNode(defaultSlots);
        return vue.createVNode("uni-swiper", {
          "ref": rootRef
        }, [vue.createVNode("div", {
          "ref": slidesWrapperRef,
          "class": "uni-swiper-wrapper"
        }, [vue.createVNode("div", {
          "class": "uni-swiper-slides",
          "style": slidesStyle.value
        }, [vue.createVNode("div", {
          "ref": slideFrameRef,
          "class": "uni-swiper-slide-frame",
          "style": slideFrameStyle.value
        }, [defaultSlots], 4)], 4), props2.indicatorDots && vue.createVNode("div", {
          "class": ["uni-swiper-dots", props2.vertical ? "uni-swiper-dots-vertical" : "uni-swiper-dots-horizontal"]
        }, [swiperContexts.value.map((_, index2, array2) => vue.createVNode("div", {
          "onClick": () => onSwiperDotClick(index2),
          "class": {
            "uni-swiper-dot": true,
            "uni-swiper-dot-active": index2 < state2.current + state2.displayMultipleItems && index2 >= state2.current || index2 < state2.current + state2.displayMultipleItems - array2.length
          },
          "style": {
            background: index2 === state2.current ? props2.indicatorActiveColor : props2.indicatorColor
          }
        }, null, 14, ["onClick"]))], 2), createNavigationTsx()], 512)], 512);
      };
    }
  });
  const useSwiperNavigation = (rootRef, props2, state2, onSwiperDotClick, swiperContext, circularEnabled, swiperEnabled) => {
    let isNavigationAuto = false;
    let prevDisabled = false;
    let nextDisabled = false;
    let hideNavigation = vue.ref(false);
    vue.watchEffect(() => {
      isNavigationAuto = props2.navigation === "auto";
      hideNavigation.value = props2.navigation !== true || isNavigationAuto;
      swiperAddMouseEvent();
    });
    vue.watchEffect(() => {
      const swiperItemLength = swiperContext.value.length;
      const notCircular = !circularEnabled.value;
      prevDisabled = state2.current === 0 && notCircular;
      nextDisabled = state2.current === swiperItemLength - 1 && notCircular || notCircular && state2.current + state2.displayMultipleItems >= swiperItemLength;
      if (!swiperEnabled.value) {
        prevDisabled = true;
        nextDisabled = true;
        isNavigationAuto && (hideNavigation.value = true);
      }
    });
    function navigationHover(event, type2) {
      const target = event.currentTarget;
      if (!target)
        return;
      target.style.backgroundColor = type2 === "over" ? props2.navigationActiveColor : "";
    }
    const navigationAttr = {
      onMouseover: (event) => navigationHover(event, "over"),
      onMouseout: (event) => navigationHover(event, "out")
    };
    function navigationClick($event, type2, disabled) {
      $event.stopPropagation();
      if (disabled)
        return;
      const swiperItemLength = swiperContext.value.length;
      let _current = state2.current;
      switch (type2) {
        case "prev":
          _current--;
          if (_current < 0 && circularEnabled.value) {
            _current = swiperItemLength - 1;
          }
          break;
        case "next":
          _current++;
          if (_current >= swiperItemLength && circularEnabled.value) {
            _current = 0;
          }
          break;
      }
      onSwiperDotClick(_current);
    }
    const createNavigationSVG = () => createSvgIconVNode(ICON_PATH_BACK, props2.navigationColor, 26);
    let setHideNavigationTimer;
    const _mousemove = (e2) => {
      clearTimeout(setHideNavigationTimer);
      const {
        clientX,
        clientY
      } = e2;
      const {
        left,
        right,
        top,
        bottom,
        width,
        height
      } = rootRef.value.getBoundingClientRect();
      let hide = false;
      if (props2.vertical) {
        hide = !(clientY - top < height / 3 || bottom - clientY < height / 3);
      } else {
        hide = !(clientX - left < width / 3 || right - clientX < width / 3);
      }
      if (hide) {
        return setHideNavigationTimer = setTimeout(() => {
          hideNavigation.value = hide;
        }, 300);
      }
      hideNavigation.value = hide;
    };
    const _mouseleave = () => {
      hideNavigation.value = true;
    };
    function swiperAddMouseEvent() {
      if (rootRef.value) {
        rootRef.value.removeEventListener("mousemove", _mousemove);
        rootRef.value.removeEventListener("mouseleave", _mouseleave);
        if (isNavigationAuto) {
          rootRef.value.addEventListener("mousemove", _mousemove);
          rootRef.value.addEventListener("mouseleave", _mouseleave);
        }
      }
    }
    vue.onMounted(swiperAddMouseEvent);
    function createNavigationTsx() {
      const navigationClass = {
        "uni-swiper-navigation-hide": hideNavigation.value,
        "uni-swiper-navigation-vertical": props2.vertical
      };
      if (props2.navigation) {
        return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", vue.mergeProps({
          "class": ["uni-swiper-navigation uni-swiper-navigation-prev", extend({
            "uni-swiper-navigation-disabled": prevDisabled
          }, navigationClass)],
          "onClick": (e2) => navigationClick(e2, "prev", prevDisabled)
        }, navigationAttr), [createNavigationSVG()], 16, ["onClick"]), vue.createVNode("div", vue.mergeProps({
          "class": ["uni-swiper-navigation uni-swiper-navigation-next", extend({
            "uni-swiper-navigation-disabled": nextDisabled
          }, navigationClass)],
          "onClick": (e2) => navigationClick(e2, "next", nextDisabled)
        }, navigationAttr), [createNavigationSVG()], 16, ["onClick"])]);
      }
      return null;
    }
    return createNavigationTsx;
  };
  const props$j = {
    itemId: {
      type: String,
      default: ""
    }
  };
  const SwiperItem = /* @__PURE__ */ defineBuiltInComponent({
    name: "SwiperItem",
    props: props$j,
    setup(props2, {
      slots
    }) {
      const rootRef = vue.ref(null);
      const context = {
        rootRef,
        getItemId() {
          return props2.itemId;
        },
        getBoundingClientRect() {
          const el = rootRef.value;
          return el.getBoundingClientRect();
        },
        updatePosition(position, vertical) {
          const x = vertical ? "0" : 100 * position + "%";
          const y = vertical ? 100 * position + "%" : "0";
          const rootEl = rootRef.value;
          const value = `translate(${x},${y}) translateZ(0)`;
          if (rootEl) {
            rootEl.style.webkitTransform = value;
            rootEl.style.transform = value;
          }
        }
      };
      vue.onMounted(() => {
        const addSwiperContext = vue.inject("addSwiperContext");
        if (addSwiperContext) {
          addSwiperContext(context);
        }
      });
      vue.onUnmounted(() => {
        const removeSwiperContext = vue.inject("removeSwiperContext");
        if (removeSwiperContext) {
          removeSwiperContext(context);
        }
      });
      return () => {
        return vue.createVNode("uni-swiper-item", {
          "ref": rootRef,
          "style": {
            position: "absolute",
            width: "100%",
            height: "100%"
          }
        }, [slots.default && slots.default()], 512);
      };
    }
  });
  const SPACE_UNICODE = {
    ensp: " ",
    emsp: " ",
    nbsp: " "
  };
  function parseText(text2, options) {
    return text2.replace(/\\n/g, LINEFEED).split(LINEFEED).map((text22) => {
      return normalizeText(text22, options);
    });
  }
  function normalizeText(text2, { space, decode: decode2 }) {
    if (!text2) {
      return text2;
    }
    if (space && SPACE_UNICODE[space]) {
      text2 = text2.replace(/ /g, SPACE_UNICODE[space]);
    }
    if (!decode2) {
      return text2;
    }
    return text2.replace(/&nbsp;/g, SPACE_UNICODE.nbsp).replace(/&ensp;/g, SPACE_UNICODE.ensp).replace(/&emsp;/g, SPACE_UNICODE.emsp).replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&apos;/g, "'");
  }
  const index$i = /* @__PURE__ */ defineBuiltInComponent({
    name: "Text",
    props: {
      selectable: {
        type: [Boolean, String],
        default: false
      },
      space: {
        type: String,
        default: ""
      },
      decode: {
        type: [Boolean, String],
        default: false
      }
    },
    setup(props2, {
      slots
    }) {
      return () => {
        const children = [];
        if (slots.default) {
          slots.default().forEach((vnode) => {
            if (vnode.shapeFlag & 8 && vnode.type !== vue.Comment) {
              const lines = parseText(vnode.children, {
                space: props2.space,
                decode: props2.decode
              });
              const len = lines.length - 1;
              lines.forEach((line, index2) => {
                if (index2 === 0 && !line)
                  ;
                else {
                  children.push(vue.createTextVNode(line));
                }
                if (index2 !== len) {
                  children.push(vue.createVNode("br"));
                }
              });
            } else {
              children.push(vnode);
            }
          });
        }
        return vue.createVNode("uni-text", {
          "selectable": props2.selectable ? true : null
        }, [vue.createVNode("span", null, children)], 8, ["selectable"]);
      };
    }
  });
  const props$h = /* @__PURE__ */ extend({}, props$r, {
    placeholderClass: {
      type: String,
      default: "input-placeholder"
    },
    autoHeight: {
      type: [Boolean, String],
      default: false
    },
    confirmType: {
      type: String,
      default: "return",
      validator(val) {
        return ConfirmTypes.concat("return").includes(val);
      }
    }
  });
  let fixMargin = false;
  const ConfirmTypes = ["done", "go", "next", "search", "send"];
  function setFixMargin() {
    const DARK_TEST_STRING = "(prefers-color-scheme: dark)";
    fixMargin = String(navigator.platform).indexOf("iP") === 0 && String(navigator.vendor).indexOf("Apple") === 0 && window.matchMedia(DARK_TEST_STRING).media !== DARK_TEST_STRING;
  }
  const index$h = /* @__PURE__ */ defineBuiltInComponent({
    name: "Textarea",
    props: props$h,
    emits: ["confirm", "linechange", ...emit],
    setup(props2, {
      emit: emit2
    }) {
      const rootRef = vue.ref(null);
      const wrapperRef = vue.ref(null);
      const {
        fieldRef,
        state: state2,
        scopedAttrsState,
        fixDisabledColor,
        trigger
      } = useField(props2, rootRef, emit2);
      const valueCompute = vue.computed(() => state2.value.split(LINEFEED));
      const isDone = vue.computed(() => ConfirmTypes.includes(props2.confirmType));
      const heightRef = vue.ref(0);
      const lineRef = vue.ref(null);
      vue.watch(() => heightRef.value, (height) => {
        const el = rootRef.value;
        const lineEl = lineRef.value;
        const wrapper2 = wrapperRef.value;
        let lineHeight = parseFloat(getComputedStyle(el).lineHeight);
        if (isNaN(lineHeight)) {
          lineHeight = lineEl.offsetHeight;
        }
        var lineCount = Math.round(height / lineHeight);
        trigger("linechange", {}, {
          height,
          heightRpx: 750 / window.innerWidth * height,
          lineCount
        });
        if (props2.autoHeight) {
          el.style.height = "auto";
          wrapper2.style.height = height + "px";
        }
      });
      function onResize2({
        height
      }) {
        heightRef.value = height;
      }
      function confirm(event) {
        trigger("confirm", event, {
          value: state2.value
        });
      }
      function onKeyDownEnter(event) {
        if (event.key !== "Enter") {
          return;
        }
        if (isDone.value) {
          event.preventDefault();
        }
      }
      function onKeyUpEnter(event) {
        if (event.key !== "Enter") {
          return;
        }
        if (isDone.value) {
          confirm(event);
          const textarea2 = event.target;
          !props2.confirmHold && textarea2.blur();
        }
      }
      {
        setFixMargin();
      }
      return () => {
        let textareaNode = props2.disabled && fixDisabledColor ? vue.createVNode("textarea", {
          "key": "disabled-textarea",
          "ref": fieldRef,
          "value": state2.value,
          "tabindex": "-1",
          "readonly": !!props2.disabled,
          "maxlength": state2.maxlength,
          "class": {
            "uni-textarea-textarea": true,
            "uni-textarea-textarea-fix-margin": fixMargin
          },
          "style": {
            overflowY: props2.autoHeight ? "hidden" : "auto"
          },
          "onFocus": (event) => event.target.blur()
        }, null, 46, ["value", "readonly", "maxlength", "onFocus"]) : vue.createVNode("textarea", {
          "key": "textarea",
          "ref": fieldRef,
          "value": state2.value,
          "disabled": !!props2.disabled,
          "maxlength": state2.maxlength,
          "enterkeyhint": props2.confirmType,
          "inputmode": props2.inputmode,
          "class": {
            "uni-textarea-textarea": true,
            "uni-textarea-textarea-fix-margin": fixMargin
          },
          "style": {
            overflowY: props2.autoHeight ? "hidden" : "auto"
          },
          "onKeydown": onKeyDownEnter,
          "onKeyup": onKeyUpEnter
        }, null, 46, ["value", "disabled", "maxlength", "enterkeyhint", "inputmode", "onKeydown", "onKeyup"]);
        return vue.createVNode("uni-textarea", {
          "ref": rootRef
        }, [vue.createVNode("div", {
          "ref": wrapperRef,
          "class": "uni-textarea-wrapper"
        }, [vue.withDirectives(vue.createVNode("div", vue.mergeProps(scopedAttrsState.attrs, {
          "style": props2.placeholderStyle,
          "class": ["uni-textarea-placeholder", props2.placeholderClass]
        }), [props2.placeholder], 16), [[vue.vShow, !state2.value.length]]), vue.createVNode("div", {
          "ref": lineRef,
          "class": "uni-textarea-line"
        }, [" "], 512), vue.createVNode("div", {
          "class": "uni-textarea-compute"
        }, [valueCompute.value.map((item) => vue.createVNode("div", null, [item.trim() ? item : "."])), vue.createVNode(ResizeSensor, {
          "initial": true,
          "onResize": onResize2
        }, null, 8, ["initial", "onResize"])]), props2.confirmType === "search" ? vue.createVNode("form", {
          "action": "",
          "onSubmit": () => false,
          "class": "uni-input-form"
        }, [textareaNode], 40, ["onSubmit"]) : textareaNode], 512)], 512);
      };
    }
  });
  const index$g = /* @__PURE__ */ defineBuiltInComponent({
    name: "View",
    props: extend({}, hoverProps),
    setup(props2, {
      slots
    }) {
      const {
        hovering,
        binding
      } = useHover(props2);
      return () => {
        const hoverClass = props2.hoverClass;
        if (hoverClass && hoverClass !== "none") {
          return vue.createVNode("uni-view", vue.mergeProps({
            "class": hovering.value ? hoverClass : ""
          }, binding), [slots.default && slots.default()], 16);
        }
        return vue.createVNode("uni-view", null, [slots.default && slots.default()]);
      };
    }
  });
  function getContextInfo(el) {
    return el.__uniContextInfo;
  }
  const pageMetaKey = PolySymbol("upm");
  function usePageMeta() {
    return vue.inject(pageMetaKey);
  }
  function providePageMeta(id2) {
    const pageMeta = initPageMeta(id2);
    vue.provide(pageMetaKey, pageMeta);
    return pageMeta;
  }
  function initPageMeta(id2) {
    return vue.reactive(
      normalizePageMeta(
        JSON.parse(JSON.stringify(initRouteMeta(__uniRoutes[0].meta, id2)))
      )
    );
  }
  function normalizePageMeta(pageMeta) {
    {
      const { navigationBar } = pageMeta;
      const { titleSize, titleColor, backgroundColor } = navigationBar;
      navigationBar.titleText = navigationBar.titleText || "";
      navigationBar.type = navigationBar.type || "default";
      navigationBar.titleSize = titleSize || "16px";
      navigationBar.titleColor = titleColor || "#000000";
      navigationBar.backgroundColor = backgroundColor || "#F8F8F8";
    }
    return pageMeta;
  }
  function getStateId() {
    return history.state && history.state.__id__ || 1;
  }
  const SEP = "$$";
  const currentPagesMap = /* @__PURE__ */ new Map();
  function pruneCurrentPages() {
    currentPagesMap.forEach((page2, id2) => {
      if (page2.$.isUnmounted) {
        currentPagesMap.delete(id2);
      }
    });
  }
  function getCurrentPagesMap() {
    return currentPagesMap;
  }
  function getCurrentPages$1() {
    const curPages = [];
    const pages2 = currentPagesMap.values();
    for (const page2 of pages2) {
      if (page2.$.__isTabBar) {
        if (page2.$.__isActive) {
          curPages.push(page2);
        }
      } else {
        curPages.push(page2);
      }
    }
    return curPages;
  }
  function removeRouteCache(routeKey) {
    const vnode = pageCacheMap.get(routeKey);
    if (vnode) {
      pageCacheMap.delete(routeKey);
      routeCache.pruneCacheEntry(vnode);
    }
  }
  function removePage(routeKey, removeRouteCaches = true) {
    const pageVm = currentPagesMap.get(routeKey);
    pageVm.$.__isUnload = true;
    invokeHook(pageVm, ON_UNLOAD);
    currentPagesMap.delete(routeKey);
    removeRouteCaches && removeRouteCache(routeKey);
  }
  let id = /* @__PURE__ */ getStateId();
  function createPageState(type2, __id__) {
    return {
      __id__: __id__ || ++id,
      __type__: type2
    };
  }
  function normalizeRouteKey(path, id2) {
    return path + SEP + id2;
  }
  const pageCacheMap = /* @__PURE__ */ new Map();
  const routeCache = {
    get(key) {
      return pageCacheMap.get(key);
    },
    set(key, value) {
      pruneRouteCache(key);
      pageCacheMap.set(key, value);
    },
    delete(key) {
      const vnode = pageCacheMap.get(key);
      if (!vnode) {
        return;
      }
      pageCacheMap.delete(key);
    },
    forEach(fn) {
      pageCacheMap.forEach(fn);
    }
  };
  function pruneRouteCache(key) {
    const pageId = parseInt(key.split(SEP)[1]);
    if (!pageId) {
      return;
    }
    routeCache.forEach((vnode, key2) => {
      const cPageId = parseInt(key2.split(SEP)[1]);
      if (cPageId && cPageId > pageId) {
        routeCache.delete(key2);
        routeCache.pruneCacheEntry(vnode);
        vue.nextTick(() => pruneCurrentPages());
      }
    });
  }
  let appVm;
  function getApp$1() {
    return appVm;
  }
  const UUID_KEY = "__DC_STAT_UUID";
  const storage = navigator.cookieEnabled && (window.localStorage || window.sessionStorage) || {};
  let deviceId;
  function deviceId$1() {
    deviceId = deviceId || storage[UUID_KEY];
    if (!deviceId) {
      deviceId = Date.now() + "" + Math.floor(Math.random() * 1e7);
      try {
        storage[UUID_KEY] = deviceId;
      } catch (error2) {
      }
    }
    return deviceId;
  }
  function IEVersion() {
    const userAgent = navigator.userAgent;
    const isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    const isEdge = userAgent.indexOf("Edge") > -1 && !isIE;
    const isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;
    if (isIE) {
      const reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      reIE.test(userAgent);
      const fIEVersion = parseFloat(RegExp.$1);
      if (fIEVersion > 6) {
        return fIEVersion;
      } else {
        return 6;
      }
    } else if (isEdge) {
      return -1;
    } else if (isIE11) {
      return 11;
    } else {
      return -1;
    }
  }
  function getTheme() {
    if (__uniConfig.darkmode !== true)
      return isString$1(__uniConfig.darkmode) ? __uniConfig.darkmode : "light";
    try {
      return window.matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark";
    } catch (error2) {
      return "light";
    }
  }
  function getBrowserInfo() {
    let osname;
    let osversion = "0";
    let model = "";
    let deviceType = "phone";
    const language = navigator.language;
    if (isIOS$1) {
      osname = "iOS";
      const osversionFind = ua.match(/OS\s([\w_]+)\slike/);
      if (osversionFind) {
        osversion = osversionFind[1].replace(/_/g, ".");
      }
      const modelFind = ua.match(/\(([a-zA-Z]+);/);
      if (modelFind) {
        model = modelFind[1];
      }
    } else if (isAndroid) {
      osname = "Android";
      const osversionFind = ua.match(/Android[\s/]([\w\.]+)[;\s]/);
      if (osversionFind) {
        osversion = osversionFind[1];
      }
      const infoFind = ua.match(/\((.+?)\)/);
      const infos = infoFind ? infoFind[1].split(";") : ua.split(" ");
      const otherInfo = [
        /\bAndroid\b/i,
        /\bLinux\b/i,
        /\bU\b/i,
        /^\s?[a-z][a-z]$/i,
        /^\s?[a-z][a-z]-[a-z][a-z]$/i,
        /\bwv\b/i,
        /\/[\d\.,]+$/,
        /^\s?[\d\.,]+$/,
        /\bBrowser\b/i,
        /\bMobile\b/i
      ];
      for (let i = 0; i < infos.length; i++) {
        const info = infos[i];
        if (info.indexOf("Build") > 0) {
          model = info.split("Build")[0].trim();
          break;
        }
        let other;
        for (let o2 = 0; o2 < otherInfo.length; o2++) {
          if (otherInfo[o2].test(info)) {
            other = true;
            break;
          }
        }
        if (!other) {
          model = info.trim();
          break;
        }
      }
    } else if (isIPadOS) {
      model = "iPad";
      osname = "iOS";
      deviceType = "pad";
      osversion = isFunction$3(window.BigInt) ? "14.0" : "13.0";
    } else if (isWindows || isMac || isLinux) {
      model = "PC";
      osname = "PC";
      deviceType = "pc";
      osversion = "0";
      let osversionFind = ua.match(/\((.+?)\)/)[1];
      if (isWindows) {
        osname = "Windows";
        switch (isWindows[1]) {
          case "5.1":
            osversion = "XP";
            break;
          case "6.0":
            osversion = "Vista";
            break;
          case "6.1":
            osversion = "7";
            break;
          case "6.2":
            osversion = "8";
            break;
          case "6.3":
            osversion = "8.1";
            break;
          case "10.0":
            osversion = "10";
            break;
        }
        const framework = osversionFind && osversionFind.match(/[Win|WOW]([\d]+)/);
        if (framework) {
          osversion += ` x${framework[1]}`;
        }
      } else if (isMac) {
        osname = "macOS";
        const _osversion = osversionFind && osversionFind.match(/Mac OS X (.+)/) || "";
        if (osversion) {
          osversion = _osversion[1].replace(/_/g, ".");
          if (osversion.indexOf(";") !== -1) {
            osversion = osversion.split(";")[0];
          }
        }
      } else if (isLinux) {
        osname = "Linux";
        const _osversion = osversionFind && osversionFind.match(/Linux (.*)/) || "";
        if (_osversion) {
          osversion = _osversion[1];
          if (osversion.indexOf(";") !== -1) {
            osversion = osversion.split(";")[0];
          }
        }
      }
    } else {
      osname = "Other";
      osversion = "0";
      deviceType = "unknown";
    }
    const system = `${osname} ${osversion}`;
    const platform = osname.toLocaleLowerCase();
    let browserName = "";
    let browserVersion = String(IEVersion());
    if (browserVersion !== "-1") {
      browserName = "IE";
    } else {
      const browseVendors = ["Version", "Firefox", "Chrome", "Edge{0,1}"];
      const vendors = ["Safari", "Firefox", "Chrome", "Edge"];
      for (let index2 = 0; index2 < browseVendors.length; index2++) {
        const vendor = browseVendors[index2];
        const reg = new RegExp(`(${vendor})/(\\S*)\\b`);
        if (reg.test(ua)) {
          browserName = vendors[index2];
          browserVersion = ua.match(reg)[2];
        }
      }
    }
    let deviceOrientation = "portrait";
    const orientation = typeof window.screen.orientation === "undefined" ? window.orientation : window.screen.orientation.angle;
    deviceOrientation = Math.abs(orientation) === 90 ? "landscape" : "portrait";
    return {
      deviceBrand: void 0,
      brand: void 0,
      deviceModel: model,
      deviceOrientation,
      model,
      system,
      platform,
      browserName: browserName.toLocaleLowerCase(),
      browserVersion,
      language,
      deviceType,
      ua,
      osname,
      osversion,
      theme: getTheme()
    };
  }
  const getWindowInfo = /* @__PURE__ */ defineSyncApi(
    "getWindowInfo",
    () => {
      const pixelRatio2 = window.devicePixelRatio;
      const screenFix = getScreenFix();
      const landscape = isLandscape(screenFix);
      const screenWidth = getScreenWidth(screenFix, landscape);
      const screenHeight = getScreenHeight(screenFix, landscape);
      const windowWidth = getWindowWidth(screenWidth);
      let windowHeight = window.innerHeight;
      const statusBarHeight = safeAreaInsets$1.top;
      const safeArea = {
        left: safeAreaInsets$1.left,
        right: windowWidth - safeAreaInsets$1.right,
        top: safeAreaInsets$1.top,
        bottom: windowHeight - safeAreaInsets$1.bottom,
        width: windowWidth - safeAreaInsets$1.left - safeAreaInsets$1.right,
        height: windowHeight - safeAreaInsets$1.top - safeAreaInsets$1.bottom
      };
      const { top: windowTop, bottom: windowBottom } = getWindowOffset();
      windowHeight -= windowTop;
      windowHeight -= windowBottom;
      return {
        windowTop,
        windowBottom,
        windowWidth,
        windowHeight,
        pixelRatio: pixelRatio2,
        screenWidth,
        screenHeight,
        statusBarHeight,
        safeArea,
        safeAreaInsets: {
          top: safeAreaInsets$1.top,
          right: safeAreaInsets$1.right,
          bottom: safeAreaInsets$1.bottom,
          left: safeAreaInsets$1.left
        },
        screenTop: screenHeight - windowHeight
      };
    }
  );
  let browserInfo;
  let _initBrowserInfo = true;
  function initBrowserInfo() {
    if (!_initBrowserInfo)
      return;
    browserInfo = getBrowserInfo();
  }
  const getDeviceInfo = /* @__PURE__ */ defineSyncApi(
    "getDeviceInfo",
    () => {
      initBrowserInfo();
      const {
        deviceBrand,
        deviceModel,
        brand,
        model,
        platform,
        system,
        deviceOrientation,
        deviceType
      } = browserInfo;
      return {
        brand,
        deviceBrand,
        deviceModel,
        devicePixelRatio: window.devicePixelRatio,
        deviceId: deviceId$1(),
        deviceOrientation,
        deviceType,
        model,
        platform,
        system
      };
    }
  );
  const getAppBaseInfo = /* @__PURE__ */ defineSyncApi(
    "getAppBaseInfo",
    () => {
      initBrowserInfo();
      const { theme, language, browserName, browserVersion } = browserInfo;
      return {
        appId: __uniConfig.appId,
        appName: __uniConfig.appName,
        appVersion: __uniConfig.appVersion,
        appVersionCode: __uniConfig.appVersionCode,
        appLanguage: getLocale ? getLocale() : language,
        enableDebug: false,
        hostSDKVersion: void 0,
        hostPackageName: void 0,
        hostFontSizeSetting: void 0,
        hostName: browserName,
        hostVersion: browserVersion,
        hostTheme: theme,
        hostLanguage: language,
        language,
        SDKVersion: "",
        theme,
        version: ""
      };
    }
  );
  const getSystemInfoSync = /* @__PURE__ */ defineSyncApi(
    "getSystemInfoSync",
    () => {
      _initBrowserInfo = true;
      initBrowserInfo();
      _initBrowserInfo = false;
      const windowInfo = getWindowInfo();
      const deviceInfo = getDeviceInfo();
      const appBaseInfo = getAppBaseInfo();
      _initBrowserInfo = true;
      const { ua: ua2, browserName, browserVersion, osname, osversion } = browserInfo;
      const systemInfo = extend(
        windowInfo,
        deviceInfo,
        appBaseInfo,
        {
          ua: ua2,
          browserName,
          browserVersion,
          uniPlatform: "web",
          uniCompileVersion: __uniConfig.compilerVersion,
          uniRuntimeVersion: __uniConfig.compilerVersion,
          fontSizeSetting: void 0,
          osName: osname.toLocaleLowerCase(),
          osVersion: osversion,
          osLanguage: void 0,
          osTheme: void 0
        }
      );
      delete systemInfo.screenTop;
      delete systemInfo.enableDebug;
      if (!__uniConfig.darkmode)
        delete systemInfo.theme;
      return sortObject(systemInfo);
    }
  );
  const _isSupport = !!window.navigator.vibrate;
  const vibrateShort = /* @__PURE__ */ defineAsyncApi(
    API_VIBRATE_SHORT,
    (args, { resolve, reject }) => {
      if (_isSupport && window.navigator.vibrate(15)) {
        resolve();
      } else {
        reject("vibrateLong:fail");
      }
    }
  );
  function parseValue(value) {
    const types2 = ["object", "string", "number", "boolean", "undefined"];
    try {
      const object2 = isString$1(value) ? JSON.parse(value) : value;
      const type2 = object2.type;
      if (types2.indexOf(type2) >= 0) {
        const keys2 = Object.keys(object2);
        if (keys2.length === 2 && "data" in object2) {
          if (typeof object2.data === type2) {
            return object2.data;
          }
          if (type2 === "object" && /^\d{4}-\d{2}-\d{2}T\d{2}\:\d{2}\:\d{2}\.\d{3}Z$/.test(object2.data)) {
            return new Date(object2.data);
          }
        } else if (keys2.length === 1) {
          return "";
        }
      }
    } catch (error2) {
    }
  }
  const setStorageSync = /* @__PURE__ */ defineSyncApi(
    API_SET_STORAGE_SYNC,
    (key, data) => {
      const type2 = typeof data;
      const value = type2 === "string" ? data : JSON.stringify({
        type: type2,
        data
      });
      localStorage.setItem(key, value);
    }
  );
  const setStorage = /* @__PURE__ */ defineAsyncApi(
    API_SET_STORAGE,
    ({ key, data }, { resolve, reject }) => {
      try {
        setStorageSync(key, data);
        resolve();
      } catch (error2) {
        reject(error2.message);
      }
    }
  );
  function getStorageOrigin(key) {
    const value = localStorage && localStorage.getItem(key);
    if (!isString$1(value)) {
      throw new Error("data not found");
    }
    let data = value;
    try {
      const object2 = JSON.parse(value);
      const result = parseValue(object2);
      if (result !== void 0) {
        data = result;
      }
    } catch (error2) {
    }
    return data;
  }
  const getStorageSync = /* @__PURE__ */ defineSyncApi(
    API_GET_STORAGE_SYNC,
    (key) => {
      try {
        return getStorageOrigin(key);
      } catch (error2) {
        return "";
      }
    }
  );
  const removeStorageSync = /* @__PURE__ */ defineSyncApi(
    API_REMOVE_STORAGE,
    (key) => {
      if (localStorage) {
        localStorage.removeItem(key);
      }
    }
  );
  const hideKeyboard = /* @__PURE__ */ defineAsyncApi(
    API_HIDE_KEYBOARD,
    (args, { resolve, reject }) => {
      const activeElement = document.activeElement;
      if (activeElement && (activeElement.tagName === "TEXTAREA" || activeElement.tagName === "INPUT")) {
        activeElement.blur();
        resolve();
      }
    }
  );
  const MIMEType = {
    /**
     * 关于图片常见的MIME类型
     */
    image: {
      jpg: "jpeg",
      jpe: "jpeg",
      pbm: "x-portable-bitmap",
      pgm: "x-portable-graymap",
      pnm: "x-portable-anymap",
      ppm: "x-portable-pixmap",
      psd: "vnd.adobe.photoshop",
      pic: "x-pict",
      rgb: "x-rgb",
      svg: "svg+xml",
      svgz: "svg+xml",
      tif: "tiff",
      xif: "vnd.xiff",
      wbmp: "vnd.wap.wbmp",
      wdp: "vnd.ms-photo",
      xbm: "x-xbitmap",
      ico: "x-icon"
    },
    /**
     * 关于视频常见的MIME类型
     */
    video: {
      "3g2": "3gpp2",
      "3gp": "3gpp",
      avi: "x-msvideo",
      f4v: "x-f4v",
      flv: "x-flv",
      jpgm: "jpm",
      jpgv: "jpeg",
      m1v: "mpeg",
      m2v: "mpeg",
      mpe: "mpeg",
      mpg: "mpeg",
      mpg4: "mpeg",
      m4v: "x-m4v",
      mkv: "x-matroska",
      mov: "quicktime",
      qt: "quicktime",
      movie: "x-sgi-movie",
      mp4v: "mp4",
      ogv: "ogg",
      smv: "x-smv",
      wm: "x-ms-wm",
      wmv: "x-ms-wmv",
      wmx: "x-ms-wmx",
      wvx: "x-ms-wvx"
    }
  };
  const MIMEType$1 = MIMEType;
  const ALL = "all";
  addInteractListener();
  function isWXEnv() {
    const ua2 = window.navigator.userAgent.toLowerCase();
    const matchUA = ua2.match(/MicroMessenger/i);
    return !!(matchUA && matchUA[0] === "micromessenger");
  }
  function _createInput({
    count,
    sourceType,
    type: type2,
    extension
  }) {
    const inputEl = document.createElement("input");
    inputEl.type = "file";
    updateElementStyle(inputEl, {
      position: "absolute",
      visibility: "hidden",
      zIndex: "-999",
      width: "0",
      height: "0",
      top: "0",
      left: "0"
    });
    inputEl.accept = extension.map((item) => {
      if (type2 !== ALL) {
        const MIMEKey = item.replace(".", "");
        return `${type2}/${MIMEType$1[type2][MIMEKey] || MIMEKey}`;
      } else {
        if (isWXEnv()) {
          return ".";
        }
        return item.indexOf(".") === 0 ? item : `.${item}`;
      }
    }).join(",");
    if (count && count > 1) {
      inputEl.multiple = true;
    }
    if (type2 !== ALL && sourceType instanceof Array && sourceType.length === 1 && sourceType[0] === "camera") {
      inputEl.setAttribute("capture", "camera");
    }
    return inputEl;
  }
  let imageInput = null;
  const chooseImage = /* @__PURE__ */ defineAsyncApi(
    API_CHOOSE_IMAGE,
    ({
      count,
      // sizeType,
      sourceType,
      extension
    }, { resolve, reject }) => {
      initI18nChooseFileMsgsOnce();
      const { t: t2 } = useI18n();
      if (imageInput) {
        document.body.removeChild(imageInput);
        imageInput = null;
      }
      imageInput = _createInput({
        count,
        sourceType,
        extension,
        type: "image"
      });
      document.body.appendChild(imageInput);
      imageInput.addEventListener("change", function(event) {
        const eventTarget = event.target;
        const tempFiles = [];
        if (eventTarget && eventTarget.files) {
          const fileCount = eventTarget.files.length;
          for (let i = 0; i < fileCount; i++) {
            const file = eventTarget.files[i];
            let filePath;
            Object.defineProperty(file, "path", {
              get() {
                filePath = filePath || fileToUrl(file);
                return filePath;
              }
            });
            if (i < count)
              tempFiles.push(file);
          }
        }
        const res = {
          get tempFilePaths() {
            return tempFiles.map(({ path }) => path);
          },
          tempFiles
        };
        resolve(res);
      });
      imageInput.click();
      if (!getInteractStatus()) {
        console.warn(t2("uni.chooseFile.notUserActivation"));
      }
    },
    ChooseImageProtocol,
    ChooseImageOptions
  );
  const KEY_MAPS = {
    esc: ["Esc", "Escape"],
    // tab: ['Tab'],
    enter: ["Enter"]
    // space: [' ', 'Spacebar'],
    // up: ['Up', 'ArrowUp'],
    // left: ['Left', 'ArrowLeft'],
    // right: ['Right', 'ArrowRight'],
    // down: ['Down', 'ArrowDown'],
    // delete: ['Backspace', 'Delete', 'Del'],
  };
  const KEYS = Object.keys(KEY_MAPS);
  function useKeyboard() {
    const key = vue.ref("");
    const disable = vue.ref(false);
    const onKeyup = (evt) => {
      if (disable.value) {
        return;
      }
      const res = KEYS.find(
        (key2) => KEY_MAPS[key2].indexOf(evt.key) !== -1
      );
      if (res) {
        key.value = res;
      }
      vue.nextTick(() => key.value = "");
    };
    vue.onMounted(() => {
      document.addEventListener("keyup", onKeyup);
    });
    vue.onBeforeUnmount(() => {
      document.removeEventListener("keyup", onKeyup);
    });
    return {
      key,
      disable
    };
  }
  const VNODE_MASK = /* @__PURE__ */ vue.createVNode(
    "div",
    { class: "uni-mask" },
    null,
    -1
    /* HOISTED */
  );
  function createRootApp(component, rootState, callback) {
    rootState.onClose = (...args) => (rootState.visible = false, callback.apply(null, args));
    return vue.createApp(
      vue.defineComponent({
        setup() {
          return () => (vue.openBlock(), vue.createBlock(
            component,
            rootState,
            null,
            16
            /* FULL_PROPS */
          ));
        }
      })
    );
  }
  function ensureRoot(id2) {
    let rootEl = document.getElementById(id2);
    if (!rootEl) {
      rootEl = document.createElement("div");
      rootEl.id = id2;
      document.body.append(rootEl);
    }
    return rootEl;
  }
  function usePopup(props2, {
    onEsc,
    onEnter
  }) {
    const visible = vue.ref(props2.visible);
    const { key, disable } = useKeyboard();
    vue.watch(
      () => props2.visible,
      (value) => visible.value = value
    );
    vue.watch(
      () => visible.value,
      (value) => disable.value = !value
    );
    vue.watchEffect(() => {
      const { value } = key;
      if (value === "esc") {
        onEsc && onEsc();
      } else if (value === "enter") {
        onEnter && onEnter();
      }
    });
    return visible;
  }
  let index$a = 0;
  let overflow = "";
  function preventScroll(prevent) {
    let before = index$a;
    index$a += prevent ? 1 : -1;
    index$a = Math.max(0, index$a);
    if (index$a > 0) {
      if (before === 0) {
        overflow = document.body.style.overflow;
        document.body.style.overflow = "hidden";
      }
    } else {
      document.body.style.overflow = overflow;
      overflow = "";
    }
  }
  function usePreventScroll() {
    vue.onMounted(() => preventScroll(true));
    vue.onUnmounted(() => preventScroll(false));
  }
  const props$a = {
    src: {
      type: String,
      default: ""
    }
  };
  const ImageView = /* @__PURE__ */ defineSystemComponent({
    name: "ImageView",
    props: props$a,
    setup(props2) {
      const state2 = vue.reactive({
        direction: "none"
      });
      let scale = 1;
      let imgWidth = 0;
      let imgHeight = 0;
      let width = 0;
      let height = 0;
      function onScale({
        detail
      }) {
        scale = detail.scale;
      }
      function onImgLoad(event) {
        const target = event.target;
        const rect = target.getBoundingClientRect();
        imgWidth = rect.width;
        imgHeight = rect.height;
      }
      function onTouchStart(event) {
        const target = event.target;
        const rect = target.getBoundingClientRect();
        width = rect.width;
        height = rect.height;
        checkDirection(event);
      }
      function onTouchEnd(event) {
        const horizontal = scale * imgWidth > width;
        const vertical = scale * imgHeight > height;
        if (horizontal && vertical) {
          state2.direction = "all";
        } else if (horizontal) {
          state2.direction = "horizontal";
        } else if (vertical) {
          state2.direction = "vertical";
        } else {
          state2.direction = "none";
        }
        checkDirection(event);
      }
      function checkDirection(event) {
        if (state2.direction === "all" || state2.direction === "horizontal") {
          event.stopPropagation();
        }
      }
      return () => {
        const viewStyle = {
          position: "absolute",
          left: "0",
          top: "0",
          width: "100%",
          height: "100%"
        };
        return vue.createVNode(MovableArea, {
          "style": viewStyle,
          "onTouchstart": withWebEvent(onTouchStart),
          "onTouchmove": withWebEvent(checkDirection),
          "onTouchend": withWebEvent(onTouchEnd)
        }, {
          default: () => [vue.createVNode(MovableView, {
            "style": viewStyle,
            "direction": state2.direction,
            "inertia": true,
            "scale": true,
            "scale-min": "1",
            "scale-max": "4",
            "onScale": onScale
          }, {
            default: () => [vue.createVNode("img", {
              "src": props2.src,
              "style": {
                position: "absolute",
                left: "50%",
                top: "50%",
                transform: "translate(-50%, -50%)",
                maxHeight: "100%",
                maxWidth: "100%"
              },
              "onLoad": onImgLoad
            }, null, 40, ["src", "onLoad"])]
          }, 8, ["style", "direction", "inertia", "scale", "onScale"])]
        }, 8, ["style", "onTouchstart", "onTouchmove", "onTouchend"]);
      };
    }
  });
  function _isSlot$2(s) {
    return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
  }
  const props$9 = {
    urls: {
      type: Array,
      default() {
        return [];
      }
    },
    current: {
      type: [Number, String],
      default: 0
    }
  };
  function getIndex(props2) {
    let index2 = typeof props2.current === "number" ? props2.current : props2.urls.indexOf(props2.current);
    index2 = index2 < 0 ? 0 : index2;
    return index2;
  }
  const ImagePreview = /* @__PURE__ */ defineSystemComponent({
    name: "ImagePreview",
    props: props$9,
    emits: ["close"],
    setup(props2, {
      emit: emit2
    }) {
      usePreventScroll();
      const rootRef = vue.ref(null);
      const indexRef = vue.ref(getIndex(props2));
      vue.watch(() => props2.current, () => indexRef.value = getIndex(props2));
      let preventDefault;
      vue.onMounted(() => {
        const el = rootRef.value;
        const MAX_MOVE = 20;
        let x = 0;
        let y = 0;
        el.addEventListener("mousedown", (event) => {
          preventDefault = false;
          x = event.clientX;
          y = event.clientY;
        });
        el.addEventListener("mouseup", (event) => {
          if (Math.abs(event.clientX - x) > MAX_MOVE || Math.abs(event.clientY - y) > MAX_MOVE) {
            preventDefault = true;
          }
        });
      });
      function onClick() {
        if (!preventDefault) {
          vue.nextTick(() => {
            emit2("close");
          });
        }
      }
      function onChange2(event) {
        indexRef.value = event.detail.current;
      }
      const closeBtnStyle = {
        position: "absolute",
        "box-sizing": "border-box",
        top: "0",
        right: "0",
        width: "60px",
        height: "44px",
        padding: "6px",
        "line-height": "32px",
        "font-size": "26px",
        color: "white",
        "text-align": "center",
        cursor: "pointer"
      };
      return () => {
        let _slot;
        return vue.createVNode("div", {
          "ref": rootRef,
          "style": {
            display: "block",
            position: "fixed",
            left: "0",
            top: "0",
            width: "100%",
            height: "100%",
            zIndex: 999,
            background: "rgba(0,0,0,0.8)"
          },
          "onClick": onClick
        }, [vue.createVNode(Swiper, {
          "navigation": "auto",
          "current": indexRef.value,
          "onChange": onChange2,
          "indicator-dots": false,
          "autoplay": false,
          "style": {
            position: "absolute",
            left: "0",
            top: "0",
            width: "100%",
            height: "100%"
          }
        }, _isSlot$2(_slot = props2.urls.map((src) => vue.createVNode(SwiperItem, null, {
          default: () => [vue.createVNode(ImageView, {
            "src": src
          }, null, 8, ["src"])]
        }))) ? _slot : {
          default: () => [_slot],
          _: 1
        }, 8, ["current", "onChange"]), vue.createVNode("div", {
          "style": closeBtnStyle
        }, [createSvgIconVNode(ICON_PATH_CLOSE, "#ffffff", 26)], 4)], 8, ["onClick"]);
      };
    }
  });
  let state$2 = null;
  let imagePreviewInstance;
  const closePreviewImageView = () => {
    state$2 = null;
    vue.nextTick(() => {
      imagePreviewInstance == null ? void 0 : imagePreviewInstance.unmount();
      imagePreviewInstance = null;
    });
  };
  const previewImage = /* @__PURE__ */ defineAsyncApi(
    API_PREVIEW_IMAGE,
    (args, { resolve }) => {
      if (!state$2) {
        state$2 = vue.reactive(args);
        vue.nextTick(() => {
          imagePreviewInstance = createRootApp(
            ImagePreview,
            state$2,
            closePreviewImageView
          );
          imagePreviewInstance.mount(ensureRoot("u-a-p"));
        });
      } else {
        extend(state$2, args);
      }
      resolve();
    },
    PreviewImageProtocol,
    PreviewImageOptions
  );
  const request = /* @__PURE__ */ defineTaskApi(
    API_REQUEST,
    ({
      url: url2,
      data,
      header,
      method: method2,
      dataType: dataType2,
      responseType,
      withCredentials,
      timeout: timeout2 = __uniConfig.networkTimeout.request
    }, { resolve, reject }) => {
      let body = null;
      const contentType = normalizeContentType(header);
      if (method2 !== "GET") {
        if (isString$1(data) || data instanceof ArrayBuffer) {
          body = data;
        } else {
          if (contentType === "json") {
            try {
              body = JSON.stringify(data);
            } catch (error2) {
              body = data.toString();
            }
          } else if (contentType === "urlencoded") {
            const bodyArray = [];
            for (const key in data) {
              if (hasOwn$1(data, key)) {
                bodyArray.push(
                  encodeURIComponent(key) + "=" + encodeURIComponent(data[key])
                );
              }
            }
            body = bodyArray.join("&");
          } else {
            body = data.toString();
          }
        }
      }
      const xhr = new XMLHttpRequest();
      const requestTask = new RequestTask(xhr);
      xhr.open(method2, url2);
      for (const key in header) {
        if (hasOwn$1(header, key)) {
          xhr.setRequestHeader(key, header[key]);
        }
      }
      const timer = setTimeout(function() {
        xhr.onload = xhr.onabort = xhr.onerror = null;
        requestTask.abort();
        reject("timeout");
      }, timeout2);
      xhr.responseType = responseType;
      xhr.onload = function() {
        clearTimeout(timer);
        const statusCode = xhr.status;
        let res = responseType === "text" ? xhr.responseText : xhr.response;
        if (responseType === "text" && dataType2 === "json") {
          try {
            res = JSON.parse(res);
          } catch (error2) {
          }
        }
        resolve({
          data: res,
          statusCode,
          header: parseHeaders(xhr.getAllResponseHeaders()),
          cookies: []
        });
      };
      xhr.onabort = function() {
        clearTimeout(timer);
        reject("abort");
      };
      xhr.onerror = function() {
        clearTimeout(timer);
        reject();
      };
      xhr.withCredentials = withCredentials;
      xhr.send(body);
      return requestTask;
    },
    RequestProtocol,
    RequestOptions
  );
  function normalizeContentType(header) {
    const name = Object.keys(header).find(
      (name2) => name2.toLowerCase() === "content-type"
    );
    if (!name) {
      return;
    }
    const contentType = header[name];
    if (contentType.indexOf("application/json") === 0) {
      return "json";
    } else if (contentType.indexOf("application/x-www-form-urlencoded") === 0) {
      return "urlencoded";
    }
    return "string";
  }
  class RequestTask {
    constructor(xhr) {
      this._xhr = xhr;
    }
    abort() {
      if (this._xhr) {
        this._xhr.abort();
        delete this._xhr;
      }
    }
    onHeadersReceived(callback) {
      throw new Error("Method not implemented.");
    }
    offHeadersReceived(callback) {
      throw new Error("Method not implemented.");
    }
  }
  function parseHeaders(headers) {
    const headersObject = {};
    headers.split(LINEFEED).forEach((header) => {
      const find = header.match(/(\S+\s*):\s*(.*)/);
      if (!find || find.length !== 3) {
        return;
      }
      headersObject[find[1]] = find[2];
    });
    return headersObject;
  }
  class UploadTask {
    constructor(xhr) {
      this._callbacks = [];
      this._xhr = xhr;
    }
    /**
     * 监听上传进度
     * @param callback 回调
     */
    onProgressUpdate(callback) {
      if (!isFunction$3(callback)) {
        return;
      }
      this._callbacks.push(callback);
    }
    offProgressUpdate(callback) {
      const index2 = this._callbacks.indexOf(callback);
      if (index2 >= 0) {
        this._callbacks.splice(index2, 1);
      }
    }
    /**
     * 中断上传任务
     */
    abort() {
      this._isAbort = true;
      if (this._xhr) {
        this._xhr.abort();
        delete this._xhr;
      }
    }
    onHeadersReceived(callback) {
      throw new Error("Method not implemented.");
    }
    offHeadersReceived(callback) {
      throw new Error("Method not implemented.");
    }
  }
  const uploadFile = /* @__PURE__ */ defineTaskApi(
    API_UPLOAD_FILE,
    ({
      url: url2,
      file,
      filePath,
      name,
      files: files2,
      header,
      formData,
      timeout: timeout2 = __uniConfig.networkTimeout.uploadFile
    }, { resolve, reject }) => {
      var uploadTask = new UploadTask();
      if (!isArray$a(files2) || !files2.length) {
        files2 = [
          {
            name,
            file,
            uri: filePath
          }
        ];
      }
      function upload(realFiles) {
        var xhr = new XMLHttpRequest();
        var form = new FormData();
        var timer;
        Object.keys(formData).forEach((key) => {
          form.append(key, formData[key]);
        });
        Object.values(files2).forEach(({ name: name2 }, index2) => {
          const file2 = realFiles[index2];
          form.append(name2 || "file", file2, file2.name || `file-${Date.now()}`);
        });
        xhr.open("POST", url2);
        Object.keys(header).forEach((key) => {
          xhr.setRequestHeader(key, header[key]);
        });
        xhr.upload.onprogress = function(event) {
          uploadTask._callbacks.forEach((callback) => {
            var totalBytesSent = event.loaded;
            var totalBytesExpectedToSend = event.total;
            var progress = Math.round(
              totalBytesSent / totalBytesExpectedToSend * 100
            );
            callback({
              progress,
              totalBytesSent,
              totalBytesExpectedToSend
            });
          });
        };
        xhr.onerror = function() {
          clearTimeout(timer);
          reject();
        };
        xhr.onabort = function() {
          clearTimeout(timer);
          reject("abort");
        };
        xhr.onload = function() {
          clearTimeout(timer);
          const statusCode = xhr.status;
          resolve({
            statusCode,
            data: xhr.responseText || xhr.response
          });
        };
        if (!uploadTask._isAbort) {
          timer = setTimeout(function() {
            xhr.upload.onprogress = xhr.onload = xhr.onabort = xhr.onerror = null;
            uploadTask.abort();
            reject("timeout");
          }, timeout2);
          xhr.send(form);
          uploadTask._xhr = xhr;
        } else {
          reject("abort");
        }
      }
      Promise.all(
        files2.map(
          ({ file: file2, uri }) => file2 instanceof Blob ? Promise.resolve(blobToFile(file2)) : urlToFile(uri)
        )
      ).then(upload).catch(() => {
        setTimeout(() => {
          reject("file error");
        }, 0);
      });
      return uploadTask;
    },
    UploadFileProtocol,
    UploadFileOptions
  );
  const navigateBack = /* @__PURE__ */ defineAsyncApi(
    API_NAVIGATE_BACK,
    (args, { resolve, reject }) => {
      let canBack = true;
      if (invokeHook(ON_BACK_PRESS, {
        from: args.from || "navigateBack"
      }) === true) {
        canBack = false;
      }
      if (!canBack) {
        return reject(ON_BACK_PRESS);
      }
      getApp$1().$router.go(-args.delta);
      return resolve();
    },
    NavigateBackProtocol,
    NavigateBackOptions
  );
  function navigate({ type: type2, url: url2, tabBarText, events }, __id__) {
    const router = getApp$1().$router;
    const { path, query } = parseUrl(url2);
    return new Promise((resolve, reject) => {
      const state2 = createPageState(type2, __id__);
      router[type2 === "navigateTo" ? "push" : "replace"]({
        path,
        query,
        state: state2,
        force: true
      }).then((failure) => {
        if (isNavigationFailure(failure)) {
          return reject(failure.message);
        }
        if (type2 === "switchTab") {
          router.currentRoute.value.meta.tabBarText = tabBarText;
        }
        if (type2 === "navigateTo") {
          const meta = router.currentRoute.value.meta;
          if (!meta.eventChannel) {
            meta.eventChannel = new EventChannel(state2.__id__, events);
          }
          return resolve({
            eventChannel: meta.eventChannel
          });
        }
        return resolve();
      });
    });
  }
  const navigateTo = /* @__PURE__ */ defineAsyncApi(
    API_NAVIGATE_TO,
    ({ url: url2, events }, { resolve, reject }) => navigate({ type: API_NAVIGATE_TO, url: url2, events }).then(resolve).catch(reject),
    NavigateToProtocol,
    NavigateToOptions
  );
  function removeLastPage() {
    const page2 = getCurrentPage();
    if (!page2) {
      return;
    }
    const $page = page2.$page;
    removePage(normalizeRouteKey($page.path, $page.id));
  }
  const redirectTo = /* @__PURE__ */ defineAsyncApi(
    API_REDIRECT_TO,
    ({ url: url2 }, { resolve, reject }) => {
      return (
        // TODO exists 属性未实现
        removeLastPage(), navigate({ type: API_REDIRECT_TO, url: url2 }).then(resolve).catch(reject)
      );
    },
    RedirectToProtocol,
    RedirectToOptions
  );
  function removeAllPages() {
    const keys2 = getCurrentPagesMap().keys();
    for (const routeKey of keys2) {
      removePage(routeKey);
    }
  }
  const reLaunch = /* @__PURE__ */ defineAsyncApi(
    API_RE_LAUNCH,
    ({ url: url2 }, { resolve, reject }) => {
      return removeAllPages(), navigate({ type: API_RE_LAUNCH, url: url2 }).then(resolve).catch(reject);
    },
    ReLaunchProtocol,
    ReLaunchOptions
  );
  function removeNonTabBarPages() {
    const curTabBarPageVm = getCurrentPageVm();
    if (!curTabBarPageVm) {
      return;
    }
    const pagesMap = getCurrentPagesMap();
    const keys2 = pagesMap.keys();
    for (const routeKey of keys2) {
      const page2 = pagesMap.get(routeKey);
      if (!page2.$.__isTabBar) {
        removePage(routeKey);
      } else {
        page2.$.__isActive = false;
      }
    }
    if (curTabBarPageVm.$.__isTabBar) {
      curTabBarPageVm.$.__isVisible = false;
      invokeHook(curTabBarPageVm, ON_HIDE);
    }
  }
  function isSamePage(url2, $page) {
    return url2 === $page.fullPath || url2 === "/" && $page.meta.isEntry;
  }
  function getTabBarPageId(url2) {
    const pages2 = getCurrentPagesMap().values();
    for (const page2 of pages2) {
      const $page = page2.$page;
      if (isSamePage(url2, $page)) {
        page2.$.__isActive = true;
        return $page.id;
      }
    }
  }
  const switchTab = /* @__PURE__ */ defineAsyncApi(
    API_SWITCH_TAB,
    // @ts-ignore
    ({ url: url2, tabBarText }, { resolve, reject }) => {
      return removeNonTabBarPages(), navigate({ type: API_SWITCH_TAB, url: url2, tabBarText }, getTabBarPageId(url2)).then(resolve).catch(reject);
    },
    SwitchTabProtocol,
    SwitchTabOptions
  );
  function onThemeChange(callback) {
    if (__uniConfig.darkmode) {
      UniServiceJSBridge$1.on(ON_THEME_CHANGE, callback);
    }
  }
  function offThemeChange(callback) {
    UniServiceJSBridge$1.off(ON_THEME_CHANGE, callback);
  }
  function parseTheme(pageStyle) {
    let parsedStyle = {};
    if (__uniConfig.darkmode) {
      parsedStyle = normalizeStyles(
        pageStyle,
        __uniConfig.themeConfig,
        getTheme()
      );
    }
    return __uniConfig.darkmode ? parsedStyle : pageStyle;
  }
  function useTheme(pageStyle, onThemeChangeCallback) {
    const isReactived = vue.isReactive(pageStyle);
    const reactivePageStyle = isReactived ? vue.reactive(parseTheme(pageStyle)) : parseTheme(pageStyle);
    if (__uniConfig.darkmode && isReactived) {
      vue.watch(pageStyle, (value) => {
        const _pageStyle = parseTheme(value);
        for (const key in _pageStyle) {
          reactivePageStyle[key] = _pageStyle[key];
        }
      });
    }
    onThemeChangeCallback && onThemeChange(onThemeChangeCallback);
    return reactivePageStyle;
  }
  const ModalTheme = {
    light: {
      cancelColor: "#000000"
    },
    dark: {
      cancelColor: "rgb(170, 170, 170)"
    }
  };
  const setCancelColor = (theme, cancelColor) => cancelColor.value = ModalTheme[theme].cancelColor;
  const props$6 = {
    title: {
      type: String,
      default: ""
    },
    content: {
      type: String,
      default: ""
    },
    showCancel: {
      type: Boolean,
      default: true
    },
    cancelText: {
      type: String,
      default: "Cancel"
    },
    cancelColor: {
      type: String,
      default: "#000000"
    },
    confirmText: {
      type: String,
      default: "OK"
    },
    confirmColor: {
      type: String,
      default: "#007aff"
    },
    visible: {
      type: Boolean
    },
    editable: {
      type: Boolean,
      default: false
    },
    placeholderText: {
      type: String,
      default: ""
    }
  };
  const modal$1 = /* @__PURE__ */ vue.defineComponent({
    props: props$6,
    setup(props2, {
      emit: emit2
    }) {
      const editContent = vue.ref("");
      const close = () => visible.value = false;
      const cancel = () => (close(), emit2("close", "cancel"));
      const confirm = () => (close(), emit2("close", "confirm", editContent.value));
      const visible = usePopup(props2, {
        onEsc: cancel,
        onEnter: () => {
          !props2.editable && confirm();
        }
      });
      const cancelColor = useOnThemeChange$1(props2);
      return () => {
        const {
          title,
          content,
          showCancel,
          confirmText,
          confirmColor,
          editable,
          placeholderText
        } = props2;
        editContent.value = content;
        return vue.createVNode(vue.Transition, {
          "name": "uni-fade"
        }, {
          default: () => [vue.withDirectives(vue.createVNode("uni-modal", {
            "onTouchmove": onEventPrevent
          }, [VNODE_MASK, vue.createVNode("div", {
            "class": "uni-modal"
          }, [title && vue.createVNode("div", {
            "class": "uni-modal__hd"
          }, [vue.createVNode("strong", {
            "class": "uni-modal__title",
            "textContent": title
          }, null, 8, ["textContent"])]), editable ? vue.createVNode("textarea", {
            "class": "uni-modal__textarea",
            "rows": "1",
            "placeholder": placeholderText,
            "value": content,
            "onInput": (e2) => editContent.value = e2.target.value
          }, null, 40, ["placeholder", "value", "onInput"]) : vue.createVNode("div", {
            "class": "uni-modal__bd",
            "onTouchmovePassive": onEventStop,
            "textContent": content
          }, null, 40, ["onTouchmovePassive", "textContent"]), vue.createVNode("div", {
            "class": "uni-modal__ft"
          }, [showCancel && vue.createVNode("div", {
            "style": {
              color: cancelColor.value
            },
            "class": "uni-modal__btn uni-modal__btn_default",
            "onClick": cancel
          }, [props2.cancelText], 12, ["onClick"]), vue.createVNode("div", {
            "style": {
              color: confirmColor
            },
            "class": "uni-modal__btn uni-modal__btn_primary",
            "onClick": confirm
          }, [confirmText], 12, ["onClick"])])])], 40, ["onTouchmove"]), [[vue.vShow, visible.value]])]
        });
      };
    }
  });
  function useOnThemeChange$1(props2) {
    const cancelColor = vue.ref(props2.cancelColor);
    const _onThemeChange = ({
      theme
    }) => {
      setCancelColor(theme, cancelColor);
    };
    vue.watchEffect(() => {
      if (props2.visible) {
        cancelColor.value = props2.cancelColor;
        if (props2.cancelColor === "#000") {
          if (getTheme() === "dark")
            _onThemeChange({
              theme: "dark"
            });
          onThemeChange(_onThemeChange);
        }
      } else {
        offThemeChange(_onThemeChange);
      }
    });
    return cancelColor;
  }
  let showModalState;
  const onHidePopupOnce$1 = /* @__PURE__ */ once(() => {
    UniServiceJSBridge$1.on("onHidePopup", () => showModalState.visible = false);
  });
  let currentShowModalResolve;
  function onModalClose(type2, content) {
    const isConfirm = type2 === "confirm";
    const res = {
      confirm: isConfirm,
      cancel: type2 === "cancel"
    };
    isConfirm && showModalState.editable && (res.content = content);
    currentShowModalResolve && currentShowModalResolve(res);
  }
  const showModal = /* @__PURE__ */ defineAsyncApi(
    API_SHOW_MODAL,
    (args, { resolve }) => {
      onHidePopupOnce$1();
      currentShowModalResolve = resolve;
      if (!showModalState) {
        showModalState = vue.reactive(args);
        vue.nextTick(
          () => (createRootApp(modal$1, showModalState, onModalClose).mount(
            ensureRoot("u-a-m")
          ), //下一帧执行，确保首次显示时有动画效果
          vue.nextTick(() => showModalState.visible = true))
        );
      } else {
        extend(showModalState, args);
        showModalState.visible = true;
      }
    },
    ShowModalProtocol,
    ShowModalOptions
  );
  const props$5 = {
    title: {
      type: String,
      default: ""
    },
    icon: {
      default: "success",
      validator(value) {
        return SHOW_TOAST_ICON.indexOf(value) !== -1;
      }
    },
    image: {
      type: String,
      default: ""
    },
    duration: {
      type: Number,
      default: 1500
    },
    mask: {
      type: Boolean,
      default: false
    },
    visible: {
      type: Boolean
    }
  };
  const ToastIconClassName = "uni-toast__icon";
  const ICONCOLOR = {
    light: "#fff",
    dark: "rgba(255,255,255,0.9)"
  };
  const getIconColor = (theme) => ICONCOLOR[theme];
  const Toast = /* @__PURE__ */ vue.defineComponent({
    name: "Toast",
    props: props$5,
    setup(props2) {
      initI18nShowToastMsgsOnce();
      initI18nShowLoadingMsgsOnce();
      const {
        Icon
      } = useToastIcon(props2);
      const visible = usePopup(props2, {});
      return () => {
        const {
          mask,
          duration,
          title,
          image: image2
        } = props2;
        return vue.createVNode(vue.Transition, {
          "name": "uni-fade"
        }, {
          default: () => [vue.withDirectives(vue.createVNode("uni-toast", {
            "data-duration": duration
          }, [mask ? vue.createVNode("div", {
            "class": "uni-mask",
            "style": "background: transparent;",
            "onTouchmove": onEventPrevent
          }, null, 40, ["onTouchmove"]) : "", !image2 && !Icon.value ? vue.createVNode("div", {
            "class": "uni-sample-toast"
          }, [vue.createVNode("p", {
            "class": "uni-simple-toast__text"
          }, [title])]) : vue.createVNode("div", {
            "class": "uni-toast"
          }, [image2 ? vue.createVNode("img", {
            "src": image2,
            "class": ToastIconClassName
          }, null, 10, ["src"]) : Icon.value, vue.createVNode("p", {
            "class": "uni-toast__content"
          }, [title])])], 8, ["data-duration"]), [[vue.vShow, visible.value]])]
        });
      };
    }
  });
  function useToastIcon(props2) {
    const iconColor = vue.ref(getIconColor(getTheme()));
    const _onThemeChange = ({
      theme
    }) => iconColor.value = getIconColor(theme);
    vue.watchEffect(() => {
      if (props2.visible) {
        onThemeChange(_onThemeChange);
      } else {
        offThemeChange(_onThemeChange);
      }
    });
    const Icon = vue.computed(() => {
      switch (props2.icon) {
        case "success":
          return vue.createVNode(createSvgIconVNode(ICON_PATH_SUCCESS_NO_CIRCLE, iconColor.value, 38), {
            class: ToastIconClassName
          });
        case "error":
          return vue.createVNode(createSvgIconVNode(ICON_PATH_WARN, iconColor.value, 38), {
            class: ToastIconClassName
          });
        case "loading":
          return vue.createVNode("i", {
            "class": [ToastIconClassName, "uni-loading"]
          }, null, 2);
        default:
          return null;
      }
    });
    return {
      Icon
    };
  }
  let showToastState;
  let showType = "";
  let timeoutId;
  const scope = /* @__PURE__ */ vue.effectScope();
  function watchVisible() {
    scope.run(() => {
      vue.watch(
        [() => showToastState.visible, () => showToastState.duration],
        ([visible, duration]) => {
          if (visible) {
            timeoutId && clearTimeout(timeoutId);
            if (showType === "onShowLoading")
              return;
            timeoutId = setTimeout(() => {
              hidePopup("onHideToast");
            }, duration);
          } else {
            timeoutId && clearTimeout(timeoutId);
          }
        }
      );
    });
  }
  function createToast(args) {
    if (!showToastState) {
      showToastState = vue.reactive(extend(args, { visible: false }));
      vue.nextTick(() => {
        watchVisible();
        UniServiceJSBridge$1.on("onHidePopup", () => hidePopup("onHidePopup"));
        createRootApp(Toast, showToastState, () => {
        }).mount(ensureRoot("u-a-t"));
      });
    } else {
      extend(showToastState, args);
    }
    setTimeout(() => {
      showToastState.visible = true;
    }, 10);
  }
  const showToast = /* @__PURE__ */ defineAsyncApi(
    API_SHOW_TOAST,
    (args, { resolve, reject }) => {
      createToast(args);
      showType = "onShowToast";
      resolve();
    },
    ShowToastProtocol,
    ShowToastOptions
  );
  const showLoadingDefaultState = {
    icon: "loading",
    duration: 1e8,
    image: ""
  };
  const showLoading = /* @__PURE__ */ defineAsyncApi(
    API_SHOW_LOADING,
    (args, { resolve, reject }) => {
      extend(args, showLoadingDefaultState);
      createToast(args);
      showType = "onShowLoading";
      resolve();
    },
    ShowLoadingProtocol,
    ShowLoadingOptions
  );
  const hideLoading = /* @__PURE__ */ defineAsyncApi(
    API_HIDE_LOADING,
    (args, { resolve, reject }) => {
      hidePopup("onHideLoading");
      resolve();
    }
  );
  function hidePopup(type2) {
    const { t: t2 } = useI18n();
    if (!showType) {
      return;
    }
    let warnMsg = "";
    if (type2 === "onHideToast" && showType !== "onShowToast") {
      warnMsg = t2("uni.showToast.unpaired");
    } else if (type2 === "onHideLoading" && showType !== "onShowLoading") {
      warnMsg = t2("uni.showLoading.unpaired");
    }
    if (warnMsg) {
      return console.warn(warnMsg);
    }
    showType = "";
    setTimeout(() => {
      showToastState.visible = false;
    }, 10);
  }
  function updateDocumentTitle(title) {
    {
      document.title = title;
    }
    UniServiceJSBridge$1.emit(ON_NAVIGATION_BAR_CHANGE, { titleText: title });
  }
  function useDocumentTitle(pageMeta) {
    function update() {
      updateDocumentTitle(pageMeta.navigationBar.titleText);
    }
    vue.watchEffect(update);
    vue.onActivated(update);
  }
  const UniViewJSBridge$1 = /* @__PURE__ */ extend(ViewJSBridge, {
    publishHandler(event, args, pageId) {
      UniServiceJSBridge$1.subscribeHandler(event, args, pageId);
    }
  });
  const UniServiceJSBridge$1 = /* @__PURE__ */ extend(ServiceJSBridge, {
    publishHandler(event, args, pageId) {
      UniViewJSBridge$1.subscribeHandler(event, args, pageId);
    }
  });
  const PageHead = /* @__PURE__ */ defineSystemComponent({
    name: "PageHead",
    setup() {
      const headRef = vue.ref(null);
      const pageMeta = usePageMeta();
      const navigationBar = useTheme(pageMeta.navigationBar, () => {
        const _navigationBar = parseTheme(pageMeta.navigationBar);
        navigationBar.backgroundColor = _navigationBar.backgroundColor;
        navigationBar.titleColor = _navigationBar.titleColor;
      });
      const {
        clazz: clazz2,
        style
      } = usePageHead(navigationBar);
      return () => {
        const backButtonTsx = null;
        const leftButtonsTsx = [];
        const rightButtonsTsx = [];
        const type2 = navigationBar.type || "default";
        const placeholderTsx = type2 !== "transparent" && type2 !== "float" && vue.createVNode("div", {
          "class": {
            "uni-placeholder": true,
            "uni-placeholder-titlePenetrate": navigationBar.titlePenetrate
          }
        }, null, 2);
        return vue.createVNode("uni-page-head", {
          "uni-page-head-type": type2
        }, [vue.createVNode("div", {
          "ref": headRef,
          "class": clazz2.value,
          "style": style.value
        }, [vue.createVNode("div", {
          "class": "uni-page-head-hd"
        }, [backButtonTsx, ...leftButtonsTsx]), createPageHeadBdTsx(navigationBar), vue.createVNode("div", {
          "class": "uni-page-head-ft"
        }, [...rightButtonsTsx])], 6), placeholderTsx], 8, ["uni-page-head-type"]);
      };
    }
  });
  function createPageHeadBdTsx(navigationBar, searchInput) {
    {
      return createPageHeadTitleTextTsx(navigationBar);
    }
  }
  function createPageHeadTitleTextTsx({
    type: type2,
    loading,
    titleSize,
    titleText,
    titleImage
  }) {
    return vue.createVNode("div", {
      "class": "uni-page-head-bd"
    }, [vue.createVNode("div", {
      "style": {
        fontSize: titleSize,
        opacity: type2 === "transparent" ? 0 : 1
      },
      "class": "uni-page-head__title"
    }, [loading ? vue.createVNode("i", {
      "class": "uni-loading"
    }, null) : titleImage ? vue.createVNode("img", {
      "src": titleImage,
      "class": "uni-page-head__title_image"
    }, null, 8, ["src"]) : titleText], 4)]);
  }
  function usePageHead(navigationBar) {
    const clazz2 = vue.computed(() => {
      const {
        type: type2,
        titlePenetrate,
        shadowColorType
      } = navigationBar;
      const clazz3 = {
        "uni-page-head": true,
        "uni-page-head-transparent": type2 === "transparent",
        "uni-page-head-titlePenetrate": titlePenetrate === "YES",
        "uni-page-head-shadow": !!shadowColorType
      };
      if (shadowColorType) {
        clazz3[`uni-page-head-shadow-${shadowColorType}`] = true;
      }
      return clazz3;
    });
    const style = vue.computed(() => {
      const backgroundColor = navigationBar.backgroundColor;
      return {
        backgroundColor,
        color: navigationBar.titleColor,
        transitionDuration: navigationBar.duration,
        transitionTimingFunction: navigationBar.timingFunc
      };
    });
    return {
      clazz: clazz2,
      style
    };
  }
  const PageBody = defineSystemComponent({
    name: "PageBody",
    setup(props2, ctx) {
      const pageRefresh = null;
      return () => {
        const pageRefreshTsx = false;
        return vue.createVNode(vue.Fragment, null, [pageRefreshTsx, vue.createVNode("uni-page-wrapper", pageRefresh, [vue.createVNode("uni-page-body", null, [vue.renderSlot(ctx.slots, "default")])], 16)]);
      };
    }
  });
  defineSystemComponent({
    name: "Page",
    setup(_props, ctx) {
      const pageMeta = providePageMeta(getStateId());
      const navigationBar = pageMeta.navigationBar;
      useDocumentTitle(pageMeta);
      return () => vue.createVNode(
        "uni-page",
        { "data-page": pageMeta.route },
        navigationBar.style !== "custom" ? [vue.createVNode(PageHead), createPageBodyVNode(ctx)] : [createPageBodyVNode(ctx)]
      );
    }
  });
  function createPageBodyVNode(ctx) {
    return vue.openBlock(), vue.createBlock(
      PageBody,
      { key: 0 },
      {
        default: vue.withCtx(() => [vue.renderSlot(ctx.slots, "page")]),
        _: 3
      }
    );
  }
  const mixin$1 = {
    data() {
      return {};
    },
    onLoad() {
      this.$u.getRect = this.$uGetRect;
    },
    methods: {
      // 查询节点信息
      // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
      // 解决办法为在组件根部再套一个没有任何作用的view元素
      $uGetRect(selector, all) {
        return new Promise((resolve) => {
          createSelectorQuery().in(this)[all ? "selectAll" : "select"](selector).boundingClientRect((rect) => {
            if (all && Array.isArray(rect) && rect.length) {
              resolve(rect);
            }
            if (!all && rect) {
              resolve(rect);
            }
          }).exec();
        });
      },
      getParentData(parentName = "") {
        if (!this.parent)
          this.parent = false;
        this.parent = this.$u.$parent.call(this, parentName);
        if (this.parent) {
          Object.keys(this.parentData).map((key) => {
            this.parentData[key] = this.parent[key];
          });
          this.parentData.value = this.parent.modelValue;
        }
      },
      // 阻止事件冒泡
      preventEvent(e2) {
        e2 && e2.stopPropagation && e2.stopPropagation();
      }
    },
    onReachBottom() {
      $emit("uOnReachBottom");
    },
    beforeUnmount() {
      if (this.parent && uni.$u.test.array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index2) => {
          if (child === this) {
            childrenList.splice(index2, 1);
          }
        });
      }
    }
  };
  function isArray$9(arr) {
    return Object.prototype.toString.call(arr) === "[object Array]";
  }
  function deepClone$1(obj) {
    if ([null, void 0, NaN, false].includes(obj))
      return obj;
    if (typeof obj !== "object" && typeof obj !== "function") {
      return obj;
    }
    var o2 = isArray$9(obj) ? [] : {};
    for (let i in obj) {
      if (obj.hasOwnProperty(i)) {
        o2[i] = typeof obj[i] === "object" ? deepClone$1(obj[i]) : obj[i];
      }
    }
    return o2;
  }
  function deepMerge$2(target = {}, source = {}) {
    target = deepClone$1(target);
    if (typeof target !== "object" || typeof source !== "object")
      return false;
    for (var prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      if (prop in target) {
        if (typeof target[prop] !== "object") {
          target[prop] = source[prop];
        } else {
          if (typeof source[prop] !== "object") {
            target[prop] = source[prop];
          } else {
            if (target[prop].concat && source[prop].concat) {
              target[prop] = target[prop].concat(source[prop]);
            } else {
              target[prop] = deepMerge$2(target[prop], source[prop]);
            }
          }
        }
      } else {
        target[prop] = source[prop];
      }
    }
    return target;
  }
  function email$1(value) {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(value);
  }
  function mobile$1(value) {
    return /^1[23456789]\d{9}$/.test(value);
  }
  function url$1(value) {
    return /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w-.\/?%&=]*)?/.test(value);
  }
  function date$2(value) {
    return !/Invalid|NaN/.test(new Date(value).toString());
  }
  function dateISO$1(value) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
  }
  function number$2(value) {
    return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
  }
  function digits$1(value) {
    return /^\d+$/.test(value);
  }
  function idCard$1(value) {
    return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
      value
    );
  }
  function carNo$1(value) {
    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
    if (value.length === 7) {
      return creg.test(value);
    } else if (value.length === 8) {
      return xreg.test(value);
    } else {
      return false;
    }
  }
  function amount$1(value) {
    return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value);
  }
  function chinese$1(value) {
    let reg = /^[\u4e00-\u9fa5]+$/gi;
    return reg.test(value);
  }
  function letter$1(value) {
    return /^[a-zA-Z]*$/.test(value);
  }
  function enOrNum$1(value) {
    let reg = /^[0-9a-zA-Z]*$/g;
    return reg.test(value);
  }
  function contains$1(value, param) {
    return value.indexOf(param) >= 0;
  }
  function range$3(value, param) {
    return value >= param[0] && value <= param[1];
  }
  function rangeLength$1(value, param) {
    return value.length >= param[0] && value.length <= param[1];
  }
  function landline$1(value) {
    let reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
    return reg.test(value);
  }
  function empty$1(value) {
    switch (typeof value) {
      case "undefined":
        return true;
      case "string":
        if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, "").length == 0)
          return true;
        break;
      case "boolean":
        if (!value)
          return true;
        break;
      case "number":
        if (0 === value || isNaN(value))
          return true;
        break;
      case "object":
        if (null === value || value.length === 0)
          return true;
        for (var i in value) {
          return false;
        }
        return true;
    }
    return false;
  }
  function jsonString$1(value) {
    if (typeof value == "string") {
      try {
        var obj = JSON.parse(value);
        if (typeof obj == "object" && obj) {
          return true;
        } else {
          return false;
        }
      } catch (e2) {
        return false;
      }
    }
    return false;
  }
  function array$2(value) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value);
    } else {
      return Object.prototype.toString.call(value) === "[object Array]";
    }
  }
  function object$2(value) {
    return Object.prototype.toString.call(value) === "[object Object]";
  }
  function code$1(value, len = 6) {
    return new RegExp(`^\\d{${len}}$`).test(value);
  }
  function func$1(value) {
    return typeof value === "function";
  }
  function promise$1(value) {
    return object$2(value) && func$1(value.then) && func$1(value.catch);
  }
  function image$2(value) {
    const newValue = value.split("?")[0];
    return new RegExp(/\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)$/).test(newValue);
  }
  function video$1(value) {
    const newValue = value.split("?")[0];
    return new RegExp(/\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8|3gp)$/).test(newValue);
  }
  function regExp$1(o2) {
    return o2 && Object.prototype.toString.call(o2) === "[object RegExp]";
  }
  function string$2(value) {
    return typeof value === "string";
  }
  const test$1 = {
    email: email$1,
    mobile: mobile$1,
    url: url$1,
    date: date$2,
    dateISO: dateISO$1,
    number: number$2,
    digits: digits$1,
    idCard: idCard$1,
    carNo: carNo$1,
    amount: amount$1,
    chinese: chinese$1,
    letter: letter$1,
    enOrNum: enOrNum$1,
    contains: contains$1,
    range: range$3,
    rangeLength: rangeLength$1,
    empty: empty$1,
    isEmpty: empty$1,
    jsonString: jsonString$1,
    landline: landline$1,
    object: object$2,
    array: array$2,
    code: code$1,
    func: func$1,
    promise: promise$1,
    video: video$1,
    image: image$2,
    regExp: regExp$1,
    string: string$2
  };
  class Request {
    // 设置全局默认配置
    setConfig(customConfig) {
      this.config = deepMerge$2(this.config, customConfig);
    }
    // 主要请求部分
    request(options = {}) {
      if (this.interceptor.request && typeof this.interceptor.request === "function") {
        let interceptorRequest = this.interceptor.request(options);
        if (interceptorRequest === false) {
          return new Promise(() => {
          });
        }
        this.options = interceptorRequest;
      }
      options.dataType = options.dataType || this.config.dataType;
      options.responseType = options.responseType || this.config.responseType;
      options.url = options.url || "";
      options.params = options.params || {};
      options.header = Object.assign({}, this.config.header, options.header);
      options.method = options.method || this.config.method;
      return new Promise((resolve, reject) => {
        options.complete = (response) => {
          hideLoading();
          clearTimeout(this.config.timer);
          this.config.timer = null;
          if (this.config.originalData) {
            if (this.interceptor.response && typeof this.interceptor.response === "function") {
              let resInterceptors = this.interceptor.response(response);
              if (resInterceptors !== false) {
                resolve(resInterceptors);
              } else {
                reject(response);
              }
            } else {
              resolve(response);
            }
          } else {
            if (response.statusCode == 200) {
              if (this.interceptor.response && typeof this.interceptor.response === "function") {
                let resInterceptors = this.interceptor.response(response.data);
                if (resInterceptors !== false) {
                  resolve(resInterceptors);
                } else {
                  reject(response.data);
                }
              } else {
                resolve(response.data);
              }
            } else {
              reject(response);
            }
          }
        };
        options.url = test$1.url(options.url) ? options.url : this.config.baseUrl + (options.url.indexOf("/") == 0 ? options.url : "/" + options.url);
        if (this.config.showLoading && !this.config.timer) {
          this.config.timer = setTimeout(() => {
            showLoading({
              title: this.config.loadingText,
              mask: this.config.loadingMask
            });
            this.config.timer = null;
          }, this.config.loadingTime);
        }
        request(options);
      });
    }
    constructor() {
      this.config = {
        baseUrl: "",
        // 请求的根域名
        // 默认的请求头
        header: {},
        method: "POST",
        // 设置为json，返回后uni.request会对数据进行一次JSON.parse
        dataType: "json",
        // 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可
        responseType: "text",
        showLoading: true,
        // 是否显示请求中的loading
        loadingText: "请求中...",
        loadingTime: 800,
        // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms
        timer: null,
        // 定时器
        originalData: false,
        // 是否在拦截器中返回服务端的原始数据，见文档说明
        loadingMask: true
        // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透
      };
      this.interceptor = {
        // 请求前的拦截
        request: null,
        // 请求后的拦截
        response: null
      };
      this.get = (url2, data = {}, header = {}) => {
        return this.request({
          method: "GET",
          url: url2,
          header,
          data
        });
      };
      this.post = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "POST",
          header,
          data
        });
      };
      this.put = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "PUT",
          header,
          data
        });
      };
      this.delete = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "DELETE",
          header,
          data
        });
      };
    }
  }
  const http = new Request();
  function queryParams$1(data = {}, isPrefix = true, arrayFormat = "brackets") {
    let prefix = isPrefix ? "?" : "";
    let _result = [];
    if (["indices", "brackets", "repeat", "comma"].indexOf(arrayFormat) == -1)
      arrayFormat = "brackets";
    for (let key in data) {
      let value = data[key];
      if (["", void 0, null].indexOf(value) >= 0) {
        continue;
      }
      if (value.constructor === Array) {
        switch (arrayFormat) {
          case "indices":
            for (let i = 0; i < value.length; i++) {
              _result.push(key + "[" + i + "]=" + value[i]);
            }
            break;
          case "brackets":
            value.forEach((_value) => {
              _result.push(key + "[]=" + _value);
            });
            break;
          case "repeat":
            value.forEach((_value) => {
              _result.push(key + "=" + _value);
            });
            break;
          case "comma":
            let commaStr = "";
            value.forEach((_value) => {
              commaStr += (commaStr ? "," : "") + _value;
            });
            _result.push(key + "=" + commaStr);
            break;
          default:
            value.forEach((_value) => {
              _result.push(key + "[]=" + _value);
            });
        }
      } else {
        _result.push(key + "=" + value);
      }
    }
    return _result.length ? prefix + _result.join("&") : "";
  }
  class Router {
    constructor() {
      this.config = {
        type: "navigateTo",
        url: "",
        delta: 1,
        // navigateBack页面后退时,回退的层数
        params: {},
        // 传递的参数
        animationType: "pop-in",
        // 窗口动画,只在APP有效
        animationDuration: 300,
        // 窗口动画持续时间,单位毫秒,只在APP有效
        intercept: false
        // 是否需要拦截
      };
      this.route = this.route.bind(this);
    }
    // 判断url前面是否有"/"，如果没有则加上，否则无法跳转
    addRootPath(url2) {
      return url2[0] === "/" ? url2 : `/${url2}`;
    }
    // 整合路由参数
    mixinParam(url2, params) {
      url2 = url2 && this.addRootPath(url2);
      let query = "";
      if (/.*\/.*\?.*=.*/.test(url2)) {
        query = uni.$u.queryParams(params, false);
        return url2 += "&" + query;
      } else {
        query = uni.$u.queryParams(params);
        return url2 += query;
      }
    }
    // 对外的方法名称
    async route(options = {}, params = {}) {
      let mergeConfig = {};
      if (typeof options === "string") {
        mergeConfig.url = this.mixinParam(options, params);
        mergeConfig.type = "navigateTo";
      } else {
        mergeConfig = uni.$u.deepClone(options, this.config);
        mergeConfig.url = this.mixinParam(options.url, options.params);
      }
      if (params.intercept) {
        this.config.intercept = params.intercept;
      }
      mergeConfig.params = params;
      mergeConfig = uni.$u.deepMerge(this.config, mergeConfig);
      if (typeof uni.$u.routeIntercept === "function") {
        const isNext = await new Promise((resolve, reject) => {
          uni.$u.routeIntercept(mergeConfig, resolve);
        });
        isNext && this.openPage(mergeConfig);
      } else {
        this.openPage(mergeConfig);
      }
    }
    // 执行路由跳转
    openPage(config2) {
      const {
        url: url2,
        type: type2,
        delta,
        animationType,
        animationDuration
      } = config2;
      if (config2.type == "navigateTo" || config2.type == "to") {
        navigateTo({
          url: url2,
          animationType,
          animationDuration
        });
      }
      if (config2.type == "redirectTo" || config2.type == "redirect") {
        redirectTo({
          url: url2
        });
      }
      if (config2.type == "switchTab" || config2.type == "tab") {
        switchTab({
          url: url2
        });
      }
      if (config2.type == "reLaunch" || config2.type == "launch") {
        reLaunch({
          url: url2
        });
      }
      if (config2.type == "navigateBack" || config2.type == "back") {
        navigateBack({
          delta
        });
      }
    }
  }
  const route = new Router().route;
  if (!String.prototype.padStart) {
    String.prototype.padStart = function(maxLength, fillString = " ") {
      if (Object.prototype.toString.call(fillString) !== "[object String]")
        throw new TypeError(
          "fillString must be String"
        );
      let str = this;
      if (str.length >= maxLength)
        return String(str);
      let fillLength = maxLength - str.length, times2 = Math.ceil(fillLength / fillString.length);
      while (times2 >>= 1) {
        fillString += fillString;
        if (times2 === 1) {
          fillString += fillString;
        }
      }
      return fillString.slice(0, fillLength) + str;
    };
  }
  function timeFormat$1(dateTime = null, fmt = "yyyy-mm-dd") {
    if (!dateTime)
      dateTime = Number(/* @__PURE__ */ new Date());
    if (dateTime.toString().length == 10)
      dateTime *= 1e3;
    let date2 = new Date(dateTime);
    let ret;
    let opt = {
      "y+": date2.getFullYear().toString(),
      // 年
      "m+": (date2.getMonth() + 1).toString(),
      // 月
      "d+": date2.getDate().toString(),
      // 日
      "h+": date2.getHours().toString(),
      // 时
      "M+": date2.getMinutes().toString(),
      // 分
      "s+": date2.getSeconds().toString()
      // 秒
      // 有其他格式化字符需求可以继续添加，必须转化成字符串
    };
    for (let k in opt) {
      ret = new RegExp("(" + k + ")").exec(fmt);
      if (ret) {
        fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, "0"));
      }
    }
    return fmt;
  }
  function timeFrom$1(dateTime = null, format2 = "yyyy-mm-dd") {
    if (!dateTime)
      dateTime = Number(/* @__PURE__ */ new Date());
    if (dateTime.toString().length == 10)
      dateTime *= 1e3;
    let timestamp = +new Date(Number(dateTime));
    let timer = (Number(/* @__PURE__ */ new Date()) - timestamp) / 1e3;
    let tips = "";
    switch (true) {
      case timer < 300:
        tips = "刚刚";
        break;
      case (timer >= 300 && timer < 3600):
        tips = parseInt(timer / 60) + "分钟前";
        break;
      case (timer >= 3600 && timer < 86400):
        tips = parseInt(timer / 3600) + "小时前";
        break;
      case (timer >= 86400 && timer < 2592e3):
        tips = parseInt(timer / 86400) + "天前";
        break;
      default:
        if (format2 === false) {
          if (timer >= 2592e3 && timer < 365 * 86400) {
            tips = parseInt(timer / (86400 * 30)) + "个月前";
          } else {
            tips = parseInt(timer / (86400 * 365)) + "年前";
          }
        } else {
          tips = timeFormat$1(timestamp, format2);
        }
    }
    return tips;
  }
  function colorGradient(startColor = "rgb(0, 0, 0)", endColor = "rgb(255, 255, 255)", step = 10) {
    let startRGB = hexToRgb(startColor, false);
    let startR = startRGB[0];
    let startG = startRGB[1];
    let startB = startRGB[2];
    let endRGB = hexToRgb(endColor, false);
    let endR = endRGB[0];
    let endG = endRGB[1];
    let endB = endRGB[2];
    let sR = (endR - startR) / step;
    let sG = (endG - startG) / step;
    let sB = (endB - startB) / step;
    let colorArr = [];
    for (let i = 0; i < step; i++) {
      let hex = rgbToHex$1("rgb(" + Math.round(sR * i + startR) + "," + Math.round(sG * i + startG) + "," + Math.round(sB * i + startB) + ")");
      colorArr.push(hex);
    }
    return colorArr;
  }
  function hexToRgb(sColor, str = true) {
    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    sColor = sColor.toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        let sColorNew = "#";
        for (let i = 1; i < 4; i += 1) {
          sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
        }
        sColor = sColorNew;
      }
      let sColorChange = [];
      for (let i = 1; i < 7; i += 2) {
        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
      }
      if (!str) {
        return sColorChange;
      } else {
        return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;
      }
    } else if (/^(rgb|RGB)/.test(sColor)) {
      let arr = sColor.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      return arr.map((val) => Number(val));
    } else {
      return sColor;
    }
  }
  function rgbToHex$1(rgb) {
    let _this = rgb;
    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    if (/^(rgb|RGB)/.test(_this)) {
      let aColor = _this.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      let strHex = "#";
      for (let i = 0; i < aColor.length; i++) {
        let hex = Number(aColor[i]).toString(16);
        hex = String(hex).length == 1 ? "0" + hex : hex;
        if (hex === "0") {
          hex += hex;
        }
        strHex += hex;
      }
      if (strHex.length !== 7) {
        strHex = _this;
      }
      return strHex;
    } else if (reg.test(_this)) {
      let aNum = _this.replace(/#/, "").split("");
      if (aNum.length === 6) {
        return _this;
      } else if (aNum.length === 3) {
        let numHex = "#";
        for (let i = 0; i < aNum.length; i += 1) {
          numHex += aNum[i] + aNum[i];
        }
        return numHex;
      }
    } else {
      return _this;
    }
  }
  function colorToRgba(color2, alpha = 0.3) {
    color2 = rgbToHex$1(color2);
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    let sColor = color2.toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        var sColorNew = "#";
        for (let i = 1; i < 4; i += 1) {
          sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
        }
        sColor = sColorNew;
      }
      var sColorChange = [];
      for (let i = 1; i < 7; i += 2) {
        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
      }
      return "rgba(" + sColorChange.join(",") + "," + alpha + ")";
    } else {
      return sColor;
    }
  }
  const colorGradient$1 = {
    colorGradient,
    hexToRgb,
    rgbToHex: rgbToHex$1,
    colorToRgba
  };
  function guid$1(len = 32, firstU = true, radix = null) {
    let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    let uuid = [];
    radix = radix || chars.length;
    if (len) {
      for (let i = 0; i < len; i++)
        uuid[i] = chars[0 | Math.random() * radix];
    } else {
      let r;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
      uuid[14] = "4";
      for (let i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random() * 16;
          uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
        }
      }
    }
    if (firstU) {
      uuid.shift();
      return "u" + uuid.join("");
    } else {
      return uuid.join("");
    }
  }
  let color = {
    primary: "#2979ff",
    primaryDark: "#2b85e4",
    primaryDisabled: "#a0cfff",
    primaryLight: "#ecf5ff",
    bgColor: "#f3f4f6",
    info: "#909399",
    infoDark: "#82848a",
    infoDisabled: "#c8c9cc",
    infoLight: "#f4f4f5",
    warning: "#ff9900",
    warningDark: "#f29100",
    warningDisabled: "#fcbd71",
    warningLight: "#fdf6ec",
    error: "#fa3534",
    errorDark: "#dd6161",
    errorDisabled: "#fab6b6",
    errorLight: "#fef0f0",
    success: "#19be6b",
    successDark: "#18b566",
    successDisabled: "#71d5a1",
    successLight: "#dbf1e1",
    mainColor: "#303133",
    contentColor: "#606266",
    tipsColor: "#909399",
    lightColor: "#c0c4cc",
    borderColor: "#e4e7ed"
  };
  function type2icon$1(type2 = "success", fill = false) {
    if (["primary", "info", "error", "warning", "success"].indexOf(type2) == -1)
      type2 = "success";
    let iconName = "";
    switch (type2) {
      case "primary":
        iconName = "info-circle";
        break;
      case "info":
        iconName = "info-circle";
        break;
      case "error":
        iconName = "close-circle";
        break;
      case "warning":
        iconName = "error-circle";
        break;
      case "success":
        iconName = "checkmark-circle";
        break;
      default:
        iconName = "checkmark-circle";
    }
    if (fill)
      iconName += "-fill";
    return iconName;
  }
  function randomArray$1(array2 = []) {
    return array2.sort(() => Math.random() - 0.5);
  }
  function addUnit$1(value = "auto", unit = "rpx") {
    value = String(value);
    return test$1.number(value) ? `${value}${unit}` : value;
  }
  function random$1(min, max) {
    if (min >= 0 && max > 0 && max >= min) {
      let gab = max - min + 1;
      return Math.floor(Math.random() * gab + min);
    } else {
      return 0;
    }
  }
  function trim$2(str, pos = "both") {
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    } else if (pos == "left") {
      return str.replace(/^\s*/, "");
    } else if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    } else if (pos == "all") {
      return str.replace(/\s+/g, "");
    } else {
      return str;
    }
  }
  function toast$1(title, duration = 1500) {
    showToast({
      title,
      icon: "none",
      duration
    });
  }
  function getParent(name, keys2) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        let data = {};
        if (Array.isArray(keys2)) {
          keys2.map((val) => {
            data[val] = parent[val] ? parent[val] : "";
          });
        } else {
          for (let i in keys2) {
            if (Array.isArray(keys2[i])) {
              if (keys2[i].length) {
                data[i] = keys2[i];
              } else {
                data[i] = parent[i];
              }
            } else if (keys2[i].constructor === Object) {
              if (Object.keys(keys2[i]).length) {
                data[i] = keys2[i];
              } else {
                data[i] = parent[i];
              }
            } else {
              data[i] = keys2[i] || keys2[i] === false ? keys2[i] : parent[i];
            }
          }
        }
        return data;
      }
    }
    return {};
  }
  function $parent$1(name = void 0) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options && parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        return parent;
      }
    }
    return false;
  }
  function os$1() {
    return getSystemInfoSync().platform;
  }
  function sys$1() {
    return getSystemInfoSync();
  }
  let timeout = null;
  function debounce(func2, wait = 500, immediate = false) {
    if (timeout !== null)
      clearTimeout(timeout);
    if (immediate) {
      var callNow = !timeout;
      timeout = setTimeout(function() {
        timeout = null;
      }, wait);
      if (callNow)
        typeof func2 === "function" && func2();
    } else {
      timeout = setTimeout(function() {
        typeof func2 === "function" && func2();
      }, wait);
    }
  }
  let timeoutArr = [];
  let flagArr = [];
  function throttle(fn, time = 500, isImmediate = true, timeoutName = "default") {
    if (!timeoutArr[timeoutName])
      timeoutArr[timeoutName] = null;
    if (isImmediate) {
      if (!flagArr[timeoutName]) {
        flagArr[timeoutName] = true;
        if (typeof fn === "function")
          fn();
        timeoutArr[timeoutName] = setTimeout(() => {
          flagArr[timeoutName] = false;
        }, time);
      }
    } else {
      if (!flagArr[timeoutName]) {
        flagArr[timeoutName] = true;
        timeoutArr[timeoutName] = setTimeout(() => {
          flagArr[timeoutName] = false;
          if (typeof fn === "function")
            fn();
        }, time);
      }
    }
  }
  function addStyle$1(customStyle, target = "object") {
    if (test$1.empty(customStyle) || typeof customStyle === "object" && target === "object" || target === "string" && typeof customStyle === "string") {
      return customStyle;
    }
    if (target === "object") {
      customStyle = trim(customStyle);
      const styleArray = customStyle.split(";");
      const style = {};
      for (let i = 0; i < styleArray.length; i++) {
        if (styleArray[i]) {
          const item = styleArray[i].split(":");
          style[trim(item[0])] = trim(item[1]);
        }
      }
      return style;
    }
    let string2 = "";
    for (const i in customStyle) {
      const key = i.replace(/([A-Z])/g, "-$1").toLowerCase();
      string2 += `${key}:${customStyle[i]};`;
    }
    return trim(string2);
  }
  let version = "1.10.1";
  const config = {
    v: version,
    version,
    // 主题名称
    type: [
      "primary",
      "success",
      "info",
      "error",
      "warning"
    ]
  };
  const zIndex = {
    toast: 10090,
    noNetwork: 10080,
    // popup包含popup，actionsheet，keyboard，picker的值
    popup: 10075,
    mask: 10070,
    navbar: 980,
    topTips: 975,
    sticky: 970,
    indexListSticky: 965
  };
  function wranning(str) {
  }
  const $u = {
    queryParams: queryParams$1,
    route,
    timeFormat: timeFormat$1,
    date: timeFormat$1,
    // 另名date
    timeFrom: timeFrom$1,
    colorGradient: colorGradient$1.colorGradient,
    colorToRgba: colorGradient$1.colorToRgba,
    guid: guid$1,
    color,
    sys: sys$1,
    os: os$1,
    type2icon: type2icon$1,
    randomArray: randomArray$1,
    wranning,
    get: http.get,
    post: http.post,
    put: http.put,
    "delete": http.delete,
    hexToRgb: colorGradient$1.hexToRgb,
    rgbToHex: colorGradient$1.rgbToHex,
    test: test$1,
    random: random$1,
    deepClone: deepClone$1,
    deepMerge: deepMerge$2,
    getParent,
    $parent: $parent$1,
    addUnit: addUnit$1,
    trim: trim$2,
    type: ["primary", "success", "error", "warning", "info"],
    http,
    toast: toast$1,
    config,
    // uView配置信息相关，比如版本号
    zIndex,
    debounce,
    throttle,
    addStyle: addStyle$1
  };
  uni.$u = $u;
  const install = (Vue) => {
    Vue.mixin(mixin$1);
    Vue.config.globalProperties.$u = $u;
  };
  const uView = {
    install
  };
  var isArray$8 = Array.isArray;
  var isArray_1 = isArray$8;
  var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;
  var freeGlobal = _freeGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root$8 = freeGlobal || freeSelf || Function("return this")();
  var _root = root$8;
  var root$7 = _root;
  var Symbol$6 = root$7.Symbol;
  var _Symbol = Symbol$6;
  var Symbol$5 = _Symbol;
  var objectProto$c = Object.prototype;
  var hasOwnProperty$9 = objectProto$c.hasOwnProperty;
  var nativeObjectToString$1 = objectProto$c.toString;
  var symToStringTag$1 = Symbol$5 ? Symbol$5.toStringTag : void 0;
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$9.call(value, symToStringTag$1), tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = void 0;
      var unmasked = true;
    } catch (e2) {
    }
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  var _getRawTag = getRawTag$1;
  var objectProto$b = Object.prototype;
  var nativeObjectToString = objectProto$b.toString;
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }
  var _objectToString = objectToString$1;
  var Symbol$4 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol$4 ? Symbol$4.toStringTag : void 0;
  function baseGetTag$6(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  var _baseGetTag = baseGetTag$6;
  function isObjectLike$7(value) {
    return value != null && typeof value == "object";
  }
  var isObjectLike_1 = isObjectLike$7;
  var baseGetTag$5 = _baseGetTag, isObjectLike$6 = isObjectLike_1;
  var symbolTag$2 = "[object Symbol]";
  function isSymbol$3(value) {
    return typeof value == "symbol" || isObjectLike$6(value) && baseGetTag$5(value) == symbolTag$2;
  }
  var isSymbol_1 = isSymbol$3;
  var isArray$7 = isArray_1, isSymbol$2 = isSymbol_1;
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
  function isKey$1(value, object2) {
    if (isArray$7(value)) {
      return false;
    }
    var type2 = typeof value;
    if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol$2(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
  }
  var _isKey = isKey$1;
  var baseGetTag$4 = _baseGetTag, isObject$6 = isObject_1;
  var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction$2(value) {
    if (!isObject$6(value)) {
      return false;
    }
    var tag = baseGetTag$4(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_1 = isFunction$2;
  var root$6 = _root;
  var coreJsData$1 = root$6["__core-js_shared__"];
  var _coreJsData = coreJsData$1;
  var coreJsData = _coreJsData;
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked$1(func2) {
    return !!maskSrcKey && maskSrcKey in func2;
  }
  var _isMasked = isMasked$1;
  var funcProto$1 = Function.prototype;
  var funcToString$1 = funcProto$1.toString;
  function toSource$2(func2) {
    if (func2 != null) {
      try {
        return funcToString$1.call(func2);
      } catch (e2) {
      }
      try {
        return func2 + "";
      } catch (e2) {
      }
    }
    return "";
  }
  var _toSource = toSource$2;
  var isFunction$1 = isFunction_1, isMasked = _isMasked, isObject$5 = isObject_1, toSource$1 = _toSource;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype, objectProto$a = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty$8).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative$1(value) {
    if (!isObject$5(value) || isMasked(value)) {
      return false;
    }
    var pattern2 = isFunction$1(value) ? reIsNative : reIsHostCtor;
    return pattern2.test(toSource$1(value));
  }
  var _baseIsNative = baseIsNative$1;
  function getValue$1(object2, key) {
    return object2 == null ? void 0 : object2[key];
  }
  var _getValue = getValue$1;
  var baseIsNative = _baseIsNative, getValue = _getValue;
  function getNative$7(object2, key) {
    var value = getValue(object2, key);
    return baseIsNative(value) ? value : void 0;
  }
  var _getNative = getNative$7;
  var getNative$6 = _getNative;
  var nativeCreate$4 = getNative$6(Object, "create");
  var _nativeCreate = nativeCreate$4;
  var nativeCreate$3 = _nativeCreate;
  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }
  var _hashClear = hashClear$1;
  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var _hashDelete = hashDelete$1;
  var nativeCreate$2 = _nativeCreate;
  var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
  var objectProto$9 = Object.prototype;
  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
  function hashGet$1(key) {
    var data = this.__data__;
    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$1 ? void 0 : result;
    }
    return hasOwnProperty$7.call(data, key) ? data[key] : void 0;
  }
  var _hashGet = hashGet$1;
  var nativeCreate$1 = _nativeCreate;
  var objectProto$8 = Object.prototype;
  var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$6.call(data, key);
  }
  var _hashHas = hashHas$1;
  var nativeCreate = _nativeCreate;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  var _hashSet = hashSet$1;
  var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
  function Hash$1(entries2) {
    var index2 = -1, length = entries2 == null ? 0 : entries2.length;
    this.clear();
    while (++index2 < length) {
      var entry = entries2[index2];
      this.set(entry[0], entry[1]);
    }
  }
  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype["delete"] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;
  var _Hash = Hash$1;
  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }
  var _listCacheClear = listCacheClear$1;
  function eq$2(value, other) {
    return value === other || value !== value && other !== other;
  }
  var eq_1 = eq$2;
  var eq$1 = eq_1;
  function assocIndexOf$4(array2, key) {
    var length = array2.length;
    while (length--) {
      if (eq$1(array2[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  var _assocIndexOf = assocIndexOf$4;
  var assocIndexOf$3 = _assocIndexOf;
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete$1(key) {
    var data = this.__data__, index2 = assocIndexOf$3(data, key);
    if (index2 < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index2 == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index2, 1);
    }
    --this.size;
    return true;
  }
  var _listCacheDelete = listCacheDelete$1;
  var assocIndexOf$2 = _assocIndexOf;
  function listCacheGet$1(key) {
    var data = this.__data__, index2 = assocIndexOf$2(data, key);
    return index2 < 0 ? void 0 : data[index2][1];
  }
  var _listCacheGet = listCacheGet$1;
  var assocIndexOf$1 = _assocIndexOf;
  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }
  var _listCacheHas = listCacheHas$1;
  var assocIndexOf = _assocIndexOf;
  function listCacheSet$1(key, value) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index2][1] = value;
    }
    return this;
  }
  var _listCacheSet = listCacheSet$1;
  var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
  function ListCache$4(entries2) {
    var index2 = -1, length = entries2 == null ? 0 : entries2.length;
    this.clear();
    while (++index2 < length) {
      var entry = entries2[index2];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype["delete"] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;
  var _ListCache = ListCache$4;
  var getNative$5 = _getNative, root$5 = _root;
  var Map$4 = getNative$5(root$5, "Map");
  var _Map = Map$4;
  var Hash = _Hash, ListCache$3 = _ListCache, Map$3 = _Map;
  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map$3 || ListCache$3)(),
      "string": new Hash()
    };
  }
  var _mapCacheClear = mapCacheClear$1;
  function isKeyable$1(value) {
    var type2 = typeof value;
    return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
  }
  var _isKeyable = isKeyable$1;
  var isKeyable = _isKeyable;
  function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  var _getMapData = getMapData$4;
  var getMapData$3 = _getMapData;
  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var _mapCacheDelete = mapCacheDelete$1;
  var getMapData$2 = _getMapData;
  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }
  var _mapCacheGet = mapCacheGet$1;
  var getMapData$1 = _getMapData;
  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }
  var _mapCacheHas = mapCacheHas$1;
  var getMapData = _getMapData;
  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  var _mapCacheSet = mapCacheSet$1;
  var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
  function MapCache$2(entries2) {
    var index2 = -1, length = entries2 == null ? 0 : entries2.length;
    this.clear();
    while (++index2 < length) {
      var entry = entries2[index2];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache$2.prototype.clear = mapCacheClear;
  MapCache$2.prototype["delete"] = mapCacheDelete;
  MapCache$2.prototype.get = mapCacheGet;
  MapCache$2.prototype.has = mapCacheHas;
  MapCache$2.prototype.set = mapCacheSet;
  var _MapCache = MapCache$2;
  var MapCache$1 = _MapCache;
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize$1(func2, resolver) {
    if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func2.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize$1.Cache || MapCache$1)();
    return memoized;
  }
  memoize$1.Cache = MapCache$1;
  var memoize_1 = memoize$1;
  var memoize = memoize_1;
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped$1(func2) {
    var result = memoize(func2, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }
  var _memoizeCapped = memoizeCapped$1;
  var memoizeCapped = _memoizeCapped;
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath$1 = memoizeCapped(function(string2) {
    var result = [];
    if (string2.charCodeAt(0) === 46) {
      result.push("");
    }
    string2.replace(rePropName, function(match, number2, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
    });
    return result;
  });
  var _stringToPath = stringToPath$1;
  function arrayMap$1(array2, iteratee) {
    var index2 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
    while (++index2 < length) {
      result[index2] = iteratee(array2[index2], index2, array2);
    }
    return result;
  }
  var _arrayMap = arrayMap$1;
  var Symbol$3 = _Symbol, arrayMap = _arrayMap, isArray$6 = isArray_1, isSymbol$1 = isSymbol_1;
  var INFINITY$1 = 1 / 0;
  var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
  function baseToString$1(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray$6(value)) {
      return arrayMap(value, baseToString$1) + "";
    }
    if (isSymbol$1(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
  }
  var _baseToString = baseToString$1;
  var baseToString = _baseToString;
  function toString$1(value) {
    return value == null ? "" : baseToString(value);
  }
  var toString_1 = toString$1;
  var isArray$5 = isArray_1, isKey = _isKey, stringToPath = _stringToPath, toString = toString_1;
  function castPath$4(value, object2) {
    if (isArray$5(value)) {
      return value;
    }
    return isKey(value, object2) ? [value] : stringToPath(toString(value));
  }
  var _castPath = castPath$4;
  var isSymbol = isSymbol_1;
  var INFINITY = 1 / 0;
  function toKey$3(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  var _toKey = toKey$3;
  var castPath$3 = _castPath, toKey$2 = _toKey;
  function baseGet$1(object2, path) {
    path = castPath$3(path, object2);
    var index2 = 0, length = path.length;
    while (object2 != null && index2 < length) {
      object2 = object2[toKey$2(path[index2++])];
    }
    return index2 && index2 == length ? object2 : void 0;
  }
  var _baseGet = baseGet$1;
  var getNative$4 = _getNative;
  var defineProperty$2 = function() {
    try {
      var func2 = getNative$4(Object, "defineProperty");
      func2({}, "", {});
      return func2;
    } catch (e2) {
    }
  }();
  var _defineProperty = defineProperty$2;
  var defineProperty$1 = _defineProperty;
  function baseAssignValue$2(object2, key, value) {
    if (key == "__proto__" && defineProperty$1) {
      defineProperty$1(object2, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object2[key] = value;
    }
  }
  var _baseAssignValue = baseAssignValue$2;
  var baseAssignValue$1 = _baseAssignValue, eq = eq_1;
  var objectProto$7 = Object.prototype;
  var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
  function assignValue$3(object2, key, value) {
    var objValue = object2[key];
    if (!(hasOwnProperty$5.call(object2, key) && eq(objValue, value)) || value === void 0 && !(key in object2)) {
      baseAssignValue$1(object2, key, value);
    }
  }
  var _assignValue = assignValue$3;
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex$3(value, length) {
    var type2 = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  var _isIndex = isIndex$3;
  var assignValue$2 = _assignValue, castPath$2 = _castPath, isIndex$2 = _isIndex, isObject$4 = isObject_1, toKey$1 = _toKey;
  function baseSet$1(object2, path, value, customizer) {
    if (!isObject$4(object2)) {
      return object2;
    }
    path = castPath$2(path, object2);
    var index2 = -1, length = path.length, lastIndex = length - 1, nested = object2;
    while (nested != null && ++index2 < length) {
      var key = toKey$1(path[index2]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object2;
      }
      if (index2 != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject$4(objValue) ? objValue : isIndex$2(path[index2 + 1]) ? [] : {};
        }
      }
      assignValue$2(nested, key, newValue);
      nested = nested[key];
    }
    return object2;
  }
  var _baseSet = baseSet$1;
  var baseGet = _baseGet, baseSet = _baseSet, castPath$1 = _castPath;
  function basePickBy$1(object2, paths, predicate) {
    var index2 = -1, length = paths.length, result = {};
    while (++index2 < length) {
      var path = paths[index2], value = baseGet(object2, path);
      if (predicate(value, path)) {
        baseSet(result, castPath$1(path, object2), value);
      }
    }
    return result;
  }
  var _basePickBy = basePickBy$1;
  function baseHasIn$1(object2, key) {
    return object2 != null && key in Object(object2);
  }
  var _baseHasIn = baseHasIn$1;
  var baseGetTag$3 = _baseGetTag, isObjectLike$5 = isObjectLike_1;
  var argsTag$2 = "[object Arguments]";
  function baseIsArguments$1(value) {
    return isObjectLike$5(value) && baseGetTag$3(value) == argsTag$2;
  }
  var _baseIsArguments = baseIsArguments$1;
  var baseIsArguments = _baseIsArguments, isObjectLike$4 = isObjectLike_1;
  var objectProto$6 = Object.prototype;
  var hasOwnProperty$4 = objectProto$6.hasOwnProperty;
  var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;
  var isArguments$3 = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike$4(value) && hasOwnProperty$4.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
  };
  var isArguments_1 = isArguments$3;
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength$3(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  var isLength_1 = isLength$3;
  var castPath = _castPath, isArguments$2 = isArguments_1, isArray$4 = isArray_1, isIndex$1 = _isIndex, isLength$2 = isLength_1, toKey = _toKey;
  function hasPath$1(object2, path, hasFunc) {
    path = castPath(path, object2);
    var index2 = -1, length = path.length, result = false;
    while (++index2 < length) {
      var key = toKey(path[index2]);
      if (!(result = object2 != null && hasFunc(object2, key))) {
        break;
      }
      object2 = object2[key];
    }
    if (result || ++index2 != length) {
      return result;
    }
    length = object2 == null ? 0 : object2.length;
    return !!length && isLength$2(length) && isIndex$1(key, length) && (isArray$4(object2) || isArguments$2(object2));
  }
  var _hasPath = hasPath$1;
  var baseHasIn = _baseHasIn, hasPath = _hasPath;
  function hasIn$1(object2, path) {
    return object2 != null && hasPath(object2, path, baseHasIn);
  }
  var hasIn_1 = hasIn$1;
  var basePickBy = _basePickBy, hasIn = hasIn_1;
  function basePick$1(object2, paths) {
    return basePickBy(object2, paths, function(value, path) {
      return hasIn(object2, path);
    });
  }
  var _basePick = basePick$1;
  function arrayPush$3(array2, values) {
    var index2 = -1, length = values.length, offset = array2.length;
    while (++index2 < length) {
      array2[offset + index2] = values[index2];
    }
    return array2;
  }
  var _arrayPush = arrayPush$3;
  var Symbol$2 = _Symbol, isArguments$1 = isArguments_1, isArray$3 = isArray_1;
  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
  function isFlattenable$1(value) {
    return isArray$3(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  var _isFlattenable = isFlattenable$1;
  var arrayPush$2 = _arrayPush, isFlattenable = _isFlattenable;
  function baseFlatten$1(array2, depth, predicate, isStrict, result) {
    var index2 = -1, length = array2.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index2 < length) {
      var value = array2[index2];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten$1(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush$2(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  var _baseFlatten = baseFlatten$1;
  var baseFlatten = _baseFlatten;
  function flatten$1(array2) {
    var length = array2 == null ? 0 : array2.length;
    return length ? baseFlatten(array2, 1) : [];
  }
  var flatten_1 = flatten$1;
  function apply$1(func2, thisArg, args) {
    switch (args.length) {
      case 0:
        return func2.call(thisArg);
      case 1:
        return func2.call(thisArg, args[0]);
      case 2:
        return func2.call(thisArg, args[0], args[1]);
      case 3:
        return func2.call(thisArg, args[0], args[1], args[2]);
    }
    return func2.apply(thisArg, args);
  }
  var _apply = apply$1;
  var apply = _apply;
  var nativeMax = Math.max;
  function overRest$1(func2, start, transform) {
    start = nativeMax(start === void 0 ? func2.length - 1 : start, 0);
    return function() {
      var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array2 = Array(length);
      while (++index2 < length) {
        array2[index2] = args[start + index2];
      }
      index2 = -1;
      var otherArgs = Array(start + 1);
      while (++index2 < start) {
        otherArgs[index2] = args[index2];
      }
      otherArgs[start] = transform(array2);
      return apply(func2, this, otherArgs);
    };
  }
  var _overRest = overRest$1;
  function constant$1(value) {
    return function() {
      return value;
    };
  }
  var constant_1 = constant$1;
  function identity$1(value) {
    return value;
  }
  var identity_1 = identity$1;
  var constant = constant_1, defineProperty = _defineProperty, identity = identity_1;
  var baseSetToString$1 = !defineProperty ? identity : function(func2, string2) {
    return defineProperty(func2, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string2),
      "writable": true
    });
  };
  var _baseSetToString = baseSetToString$1;
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut$1(func2) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func2.apply(void 0, arguments);
    };
  }
  var _shortOut = shortOut$1;
  var baseSetToString = _baseSetToString, shortOut = _shortOut;
  var setToString$1 = shortOut(baseSetToString);
  var _setToString = setToString$1;
  var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
  function flatRest$1(func2) {
    return setToString(overRest(func2, void 0, flatten), func2 + "");
  }
  var _flatRest = flatRest$1;
  var basePick = _basePick, flatRest = _flatRest;
  var pick = flatRest(function(object2, paths) {
    return object2 == null ? {} : basePick(object2, paths);
  });
  var pick_1 = pick;
  const pick$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(pick_1);
  var baseGetTag$2 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
  var numberTag$3 = "[object Number]";
  function isNumber(value) {
    return typeof value == "number" || isObjectLike$3(value) && baseGetTag$2(value) == numberTag$3;
  }
  var isNumber_1 = isNumber;
  const isNumber$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(isNumber_1);
  var ListCache$2 = _ListCache;
  function stackClear$1() {
    this.__data__ = new ListCache$2();
    this.size = 0;
  }
  var _stackClear = stackClear$1;
  function stackDelete$1(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  var _stackDelete = stackDelete$1;
  function stackGet$1(key) {
    return this.__data__.get(key);
  }
  var _stackGet = stackGet$1;
  function stackHas$1(key) {
    return this.__data__.has(key);
  }
  var _stackHas = stackHas$1;
  var ListCache$1 = _ListCache, Map$2 = _Map, MapCache = _MapCache;
  var LARGE_ARRAY_SIZE = 200;
  function stackSet$1(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache$1) {
      var pairs = data.__data__;
      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  var _stackSet = stackSet$1;
  var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
  function Stack$1(entries2) {
    var data = this.__data__ = new ListCache(entries2);
    this.size = data.size;
  }
  Stack$1.prototype.clear = stackClear;
  Stack$1.prototype["delete"] = stackDelete;
  Stack$1.prototype.get = stackGet;
  Stack$1.prototype.has = stackHas;
  Stack$1.prototype.set = stackSet;
  var _Stack = Stack$1;
  function arrayEach$1(array2, iteratee) {
    var index2 = -1, length = array2 == null ? 0 : array2.length;
    while (++index2 < length) {
      if (iteratee(array2[index2], index2, array2) === false) {
        break;
      }
    }
    return array2;
  }
  var _arrayEach = arrayEach$1;
  var assignValue$1 = _assignValue, baseAssignValue = _baseAssignValue;
  function copyObject$4(source, props2, object2, customizer) {
    var isNew = !object2;
    object2 || (object2 = {});
    var index2 = -1, length = props2.length;
    while (++index2 < length) {
      var key = props2[index2];
      var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object2, key, newValue);
      } else {
        assignValue$1(object2, key, newValue);
      }
    }
    return object2;
  }
  var _copyObject = copyObject$4;
  function baseTimes$1(n, iteratee) {
    var index2 = -1, result = Array(n);
    while (++index2 < n) {
      result[index2] = iteratee(index2);
    }
    return result;
  }
  var _baseTimes = baseTimes$1;
  var isBuffer$2 = { exports: {} };
  function stubFalse() {
    return false;
  }
  var stubFalse_1 = stubFalse;
  isBuffer$2.exports;
  (function(module2, exports2) {
    var root2 = _root, stubFalse2 = stubFalse_1;
    var freeExports = exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer2 = nativeIsBuffer || stubFalse2;
    module2.exports = isBuffer2;
  })(isBuffer$2, isBuffer$2.exports);
  var isBufferExports = isBuffer$2.exports;
  var baseGetTag$1 = _baseGetTag, isLength$1 = isLength_1, isObjectLike$2 = isObjectLike_1;
  var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", weakMapTag$2 = "[object WeakMap]";
  var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;
  function baseIsTypedArray$1(value) {
    return isObjectLike$2(value) && isLength$1(value.length) && !!typedArrayTags[baseGetTag$1(value)];
  }
  var _baseIsTypedArray = baseIsTypedArray$1;
  function baseUnary$3(func2) {
    return function(value) {
      return func2(value);
    };
  }
  var _baseUnary = baseUnary$3;
  var _nodeUtil = { exports: {} };
  _nodeUtil.exports;
  (function(module2, exports2) {
    var freeGlobal2 = _freeGlobal;
    var freeExports = exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal2.process;
    var nodeUtil2 = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    module2.exports = nodeUtil2;
  })(_nodeUtil, _nodeUtil.exports);
  var _nodeUtilExports = _nodeUtil.exports;
  var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtilExports;
  var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
  var isTypedArray$1 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray_1 = isTypedArray$1;
  var baseTimes = _baseTimes, isArguments = isArguments_1, isArray$2 = isArray_1, isBuffer$1 = isBufferExports, isIndex = _isIndex, isTypedArray = isTypedArray_1;
  var objectProto$5 = Object.prototype;
  var hasOwnProperty$3 = objectProto$5.hasOwnProperty;
  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty$3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  var _arrayLikeKeys = arrayLikeKeys$2;
  var objectProto$4 = Object.prototype;
  function isPrototype$3(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$4;
    return value === proto;
  }
  var _isPrototype = isPrototype$3;
  function overArg$2(func2, transform) {
    return function(arg) {
      return func2(transform(arg));
    };
  }
  var _overArg = overArg$2;
  var overArg$1 = _overArg;
  var nativeKeys$1 = overArg$1(Object.keys, Object);
  var _nativeKeys = nativeKeys$1;
  var isPrototype$2 = _isPrototype, nativeKeys = _nativeKeys;
  var objectProto$3 = Object.prototype;
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
  function baseKeys$1(object2) {
    if (!isPrototype$2(object2)) {
      return nativeKeys(object2);
    }
    var result = [];
    for (var key in Object(object2)) {
      if (hasOwnProperty$2.call(object2, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  var _baseKeys = baseKeys$1;
  var isFunction = isFunction_1, isLength = isLength_1;
  function isArrayLike$2(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  var isArrayLike_1 = isArrayLike$2;
  var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike$1 = isArrayLike_1;
  function keys$3(object2) {
    return isArrayLike$1(object2) ? arrayLikeKeys$1(object2) : baseKeys(object2);
  }
  var keys_1 = keys$3;
  var copyObject$3 = _copyObject, keys$2 = keys_1;
  function baseAssign$1(object2, source) {
    return object2 && copyObject$3(source, keys$2(source), object2);
  }
  var _baseAssign = baseAssign$1;
  function nativeKeysIn$1(object2) {
    var result = [];
    if (object2 != null) {
      for (var key in Object(object2)) {
        result.push(key);
      }
    }
    return result;
  }
  var _nativeKeysIn = nativeKeysIn$1;
  var isObject$3 = isObject_1, isPrototype$1 = _isPrototype, nativeKeysIn = _nativeKeysIn;
  var objectProto$2 = Object.prototype;
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
  function baseKeysIn$1(object2) {
    if (!isObject$3(object2)) {
      return nativeKeysIn(object2);
    }
    var isProto = isPrototype$1(object2), result = [];
    for (var key in object2) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty$1.call(object2, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var _baseKeysIn = baseKeysIn$1;
  var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike = isArrayLike_1;
  function keysIn$3(object2) {
    return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
  }
  var keysIn_1 = keysIn$3;
  var copyObject$2 = _copyObject, keysIn$2 = keysIn_1;
  function baseAssignIn$1(object2, source) {
    return object2 && copyObject$2(source, keysIn$2(source), object2);
  }
  var _baseAssignIn = baseAssignIn$1;
  var _cloneBuffer = { exports: {} };
  _cloneBuffer.exports;
  (function(module2, exports2) {
    var root2 = _root;
    var freeExports = exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer2(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module2.exports = cloneBuffer2;
  })(_cloneBuffer, _cloneBuffer.exports);
  var _cloneBufferExports = _cloneBuffer.exports;
  function copyArray$1(source, array2) {
    var index2 = -1, length = source.length;
    array2 || (array2 = Array(length));
    while (++index2 < length) {
      array2[index2] = source[index2];
    }
    return array2;
  }
  var _copyArray = copyArray$1;
  function arrayFilter$1(array2, predicate) {
    var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
    while (++index2 < length) {
      var value = array2[index2];
      if (predicate(value, index2, array2)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  var _arrayFilter = arrayFilter$1;
  function stubArray$2() {
    return [];
  }
  var stubArray_1 = stubArray$2;
  var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
  var objectProto$1 = Object.prototype;
  var propertyIsEnumerable = objectProto$1.propertyIsEnumerable;
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object2) {
    if (object2 == null) {
      return [];
    }
    object2 = Object(object2);
    return arrayFilter(nativeGetSymbols$1(object2), function(symbol) {
      return propertyIsEnumerable.call(object2, symbol);
    });
  };
  var _getSymbols = getSymbols$3;
  var copyObject$1 = _copyObject, getSymbols$2 = _getSymbols;
  function copySymbols$1(source, object2) {
    return copyObject$1(source, getSymbols$2(source), object2);
  }
  var _copySymbols = copySymbols$1;
  var overArg = _overArg;
  var getPrototype$2 = overArg(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype$2;
  var arrayPush$1 = _arrayPush, getPrototype$1 = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object2) {
    var result = [];
    while (object2) {
      arrayPush$1(result, getSymbols$1(object2));
      object2 = getPrototype$1(object2);
    }
    return result;
  };
  var _getSymbolsIn = getSymbolsIn$2;
  var copyObject = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
  function copySymbolsIn$1(source, object2) {
    return copyObject(source, getSymbolsIn$1(source), object2);
  }
  var _copySymbolsIn = copySymbolsIn$1;
  var arrayPush = _arrayPush, isArray$1 = isArray_1;
  function baseGetAllKeys$2(object2, keysFunc, symbolsFunc) {
    var result = keysFunc(object2);
    return isArray$1(object2) ? result : arrayPush(result, symbolsFunc(object2));
  }
  var _baseGetAllKeys = baseGetAllKeys$2;
  var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$1 = keys_1;
  function getAllKeys$1(object2) {
    return baseGetAllKeys$1(object2, keys$1, getSymbols);
  }
  var _getAllKeys = getAllKeys$1;
  var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$1 = keysIn_1;
  function getAllKeysIn$1(object2) {
    return baseGetAllKeys(object2, keysIn$1, getSymbolsIn);
  }
  var _getAllKeysIn = getAllKeysIn$1;
  var getNative$3 = _getNative, root$4 = _root;
  var DataView$1 = getNative$3(root$4, "DataView");
  var _DataView = DataView$1;
  var getNative$2 = _getNative, root$3 = _root;
  var Promise$2 = getNative$2(root$3, "Promise");
  var _Promise = Promise$2;
  var getNative$1 = _getNative, root$2 = _root;
  var Set$2 = getNative$1(root$2, "Set");
  var _Set = Set$2;
  var getNative = _getNative, root$1 = _root;
  var WeakMap$2 = getNative(root$1, "WeakMap");
  var _WeakMap = WeakMap$2;
  var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag = _baseGetTag, toSource = _toSource;
  var mapTag$3 = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag$3 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
  var dataViewTag$2 = "[object DataView]";
  var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
  var getTag$3 = baseGetTag;
  if (DataView && getTag$3(new DataView(new ArrayBuffer(1))) != dataViewTag$2 || Map$1 && getTag$3(new Map$1()) != mapTag$3 || Promise$1 && getTag$3(Promise$1.resolve()) != promiseTag || Set$1 && getTag$3(new Set$1()) != setTag$3 || WeakMap$1 && getTag$3(new WeakMap$1()) != weakMapTag$1) {
    getTag$3 = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag$1 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$2;
          case mapCtorString:
            return mapTag$3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$3;
          case weakMapCtorString:
            return weakMapTag$1;
        }
      }
      return result;
    };
  }
  var _getTag = getTag$3;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function initCloneArray$1(array2) {
    var length = array2.length, result = new array2.constructor(length);
    if (length && typeof array2[0] == "string" && hasOwnProperty.call(array2, "index")) {
      result.index = array2.index;
      result.input = array2.input;
    }
    return result;
  }
  var _initCloneArray = initCloneArray$1;
  var root = _root;
  var Uint8Array$2 = root.Uint8Array;
  var _Uint8Array = Uint8Array$2;
  var Uint8Array$1 = _Uint8Array;
  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }
  var _cloneArrayBuffer = cloneArrayBuffer$3;
  var cloneArrayBuffer$2 = _cloneArrayBuffer;
  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var _cloneDataView = cloneDataView$1;
  var reFlags = /\w*$/;
  function cloneRegExp$1(regexp2) {
    var result = new regexp2.constructor(regexp2.source, reFlags.exec(regexp2));
    result.lastIndex = regexp2.lastIndex;
    return result;
  }
  var _cloneRegExp = cloneRegExp$1;
  var Symbol$1 = _Symbol;
  var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function cloneSymbol$1(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  var _cloneSymbol = cloneSymbol$1;
  var cloneArrayBuffer$1 = _cloneArrayBuffer;
  function cloneTypedArray$1(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var _cloneTypedArray = cloneTypedArray$1;
  var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray = _cloneTypedArray;
  var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]";
  var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
  function initCloneByTag$1(object2, tag, isDeep) {
    var Ctor = object2.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return cloneArrayBuffer(object2);
      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object2);
      case dataViewTag$1:
        return cloneDataView(object2, isDeep);
      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object2, isDeep);
      case mapTag$2:
        return new Ctor();
      case numberTag$1:
      case stringTag$1:
        return new Ctor(object2);
      case regexpTag$1:
        return cloneRegExp(object2);
      case setTag$2:
        return new Ctor();
      case symbolTag$1:
        return cloneSymbol(object2);
    }
  }
  var _initCloneByTag = initCloneByTag$1;
  var isObject$2 = isObject_1;
  var objectCreate = Object.create;
  var baseCreate$1 = function() {
    function object2() {
    }
    return function(proto) {
      if (!isObject$2(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object2.prototype = proto;
      var result = new object2();
      object2.prototype = void 0;
      return result;
    };
  }();
  var _baseCreate = baseCreate$1;
  var baseCreate = _baseCreate, getPrototype = _getPrototype, isPrototype = _isPrototype;
  function initCloneObject$1(object2) {
    return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
  }
  var _initCloneObject = initCloneObject$1;
  var getTag$2 = _getTag, isObjectLike$1 = isObjectLike_1;
  var mapTag$1 = "[object Map]";
  function baseIsMap$1(value) {
    return isObjectLike$1(value) && getTag$2(value) == mapTag$1;
  }
  var _baseIsMap = baseIsMap$1;
  var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtilExports;
  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
  var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
  var isMap_1 = isMap$1;
  var getTag$1 = _getTag, isObjectLike = isObjectLike_1;
  var setTag$1 = "[object Set]";
  function baseIsSet$1(value) {
    return isObjectLike(value) && getTag$1(value) == setTag$1;
  }
  var _baseIsSet = baseIsSet$1;
  var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtilExports;
  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  var isSet_1 = isSet$1;
  var Stack = _Stack, arrayEach = _arrayEach, assignValue = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer = _cloneBufferExports, copyArray = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys = _getAllKeys, getAllKeysIn = _getAllKeysIn, getTag = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject = _initCloneObject, isArray = isArray_1, isBuffer = isBufferExports, isMap = isMap_1, isObject$1 = isObject_1, isSet = isSet_1, keys = keys_1, keysIn = keysIn_1;
  var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  function baseClone$1(value, bitmask, customizer, key, object2, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
    if (customizer) {
      result = object2 ? customizer(value, key, object2, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject$1(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object2) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object2 ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone$1(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props2 = isArr ? void 0 : keysFunc(value);
    arrayEach(props2 || value, function(subValue, key2) {
      if (props2) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone$1(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  var _baseClone = baseClone$1;
  var baseClone = _baseClone;
  var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }
  var cloneDeep_1 = cloneDeep;
  const cloneDeep$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(cloneDeep_1);
  var classnames = { exports: {} };
  /*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  */
  (function(module2) {
    (function() {
      var hasOwn2 = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue2(arg));
          }
        }
        return classes;
      }
      function parseValue2(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn2.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (module2.exports) {
        classNames.default = classNames;
        module2.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames);
  const consoleTag = "[vue3-aipage-widget]";
  function getFramework(_framework) {
    let defaultFramework = Framework.react;
    if (!_framework) {
      return defaultFramework;
    }
    let curFramework = _framework.toLowerCase().trim();
    switch (curFramework) {
      case "jquery":
      case "jq":
        curFramework = Framework.jquery;
        break;
      case "vue2":
      case "vue 2":
      case "vue2.0":
      case "vue 2.0":
        curFramework = Framework.vue2;
        console.error("vue3-aipage-widget 不支持 vue2.0 技术栈，请改用aipage-widget支持。");
        break;
      case "vue":
      case "vue3":
      case "vue 3":
      case "vue3.0":
      case "vue 3.0":
        curFramework = Framework.vue3;
        break;
      default:
        curFramework = Framework.react;
    }
    return curFramework;
  }
  var Framework;
  (function(Framework2) {
    Framework2["react"] = "react";
    Framework2["vue2"] = "vue2";
    Framework2["vue3"] = "vue3";
    Framework2["jquery"] = "jquery";
  })(Framework || (Framework = {}));
  function isString(str) {
    return Object.prototype.toString.call(str).slice(8, -1) === "String";
  }
  function isObject(curObj) {
    let isObject2 = false;
    if (Object.prototype.toString.call(curObj).slice(8, -1) === "Object") {
      isObject2 = true;
    }
    return isObject2;
  }
  function isNumberFormat(val) {
    return parseFloat(String(val)).toString() !== "NaN";
  }
  function camelToKebab(str) {
    return str.replace(/([A-Z])/g, "-$1").toLowerCase();
  }
  function transformComponentId(str) {
    return `-${str}`.replace(/(-[A-Za-z0-9])/g, (m) => {
      return m.toUpperCase().replace("-", "");
    });
  }
  function cloneObject(target, persistOwnProps = true) {
    const obj = target && target.__super ? Object.create(target.__super, {
      __super: {
        value: target.__super,
        writable: false,
        enumerable: false
      }
    }) : Object.create(Object.prototype);
    persistOwnProps && target && Object.keys(target).forEach((key) => obj[key] = target[key]);
    return obj;
  }
  function extendObject(target, src, persistOwnProps = true) {
    const obj = cloneObject(target, persistOwnProps);
    src && Object.keys(src).forEach((key) => obj[key] = src[key]);
    return obj;
  }
  const viewportWidth = 375;
  const parseThemeColor = function(color2) {
    return color2;
  };
  function toRpx(size) {
    const result = +[size][size && 0] / 375 * viewportWidth;
    return Number.isNaN(result) ? void 0 : `${Math.round(result)}px`;
  }
  function getBackgroundStyle(background = {}) {
    const newBackground = pick$1(cloneDeep$1(background) || {}, "backgroundImage", "backgroundRepeat", "backgroundSize", "backgroundPosition", "backgroundColor");
    if (background.backgroundImage && /linear-gradient/g.test(background.backgroundImage)) {
      newBackground.backgroundImage = background.backgroundImage;
    } else {
      if (background.backgroundColor) {
        newBackground.backgroundColor = parseThemeColor(background.backgroundColor);
      }
      if (background.backgroundImage) {
        newBackground.backgroundImage = `url('${background.backgroundImage}')`;
      }
    }
    return newBackground;
  }
  function getFontStyle(rawFont = {}) {
    let font = pick$1(cloneDeep$1(rawFont) || {}, "color", "fontFamily", "lineHeight", "textAlign");
    if (rawFont.bold) {
      font.fontWeight = "bold";
    }
    if (rawFont.italic) {
      font.fontStyle = "italic";
    }
    if (rawFont.underline) {
      font.textDecoration = "underline";
    }
    if (rawFont.lines) {
      font.WebkitLineClamp = `${rawFont.lines}`;
    }
    if (font.lineHeight) {
      font.lineHeight = font.lineHeight >= 12 ? `${parseInt(font.lineHeight, 10)}px` : parseInt(font.lineHeight, 10);
    }
    font.fontSize = toRpx(+rawFont.fontSize);
    font.letterSpacing = toRpx(+rawFont.letterSpacing);
    return font;
  }
  function getBoxStyle(box = {}) {
    const newBox = pick$1(cloneDeep$1(box) || {}, "borderLeftStyle", "borderRightStyle", "borderTopStyle", "borderBottomStyle", "borderLeftColor", "borderRightColor", "borderTopColor", "borderBottomColor");
    if (+box.borderTopWidth > 0) {
      newBox.borderTopWidth = toRpx(+box.borderTopWidth);
      newBox.borderTopColor = parseThemeColor(box.borderTopColor);
    } else {
      delete newBox.borderTopStyle;
    }
    if (+box.borderLeftWidth > 0) {
      newBox.borderLeftWidth = toRpx(+box.borderLeftWidth);
      newBox.borderLeftColor = parseThemeColor(box.borderLeftColor);
    } else {
      delete newBox.borderLeftStyle;
    }
    if (+box.borderRightWidth > 0) {
      newBox.borderRightWidth = toRpx(+box.borderRightWidth);
      newBox.borderRightColor = parseThemeColor(box.borderRightColor);
    } else {
      delete newBox.borderRightStyle;
    }
    if (+box.borderBottomWidth > 0) {
      newBox.borderBottomWidth = toRpx(+box.borderBottomWidth);
      newBox.borderBottomColor = parseThemeColor(box.borderBottomColor);
    } else {
      delete newBox.borderBottomStyle;
    }
    newBox.marginTop = toRpx(+box.marginTop);
    newBox.marginLeft = toRpx(+box.marginLeft);
    newBox.marginRight = toRpx(+box.marginRight);
    newBox.marginBottom = toRpx(+box.marginBottom);
    newBox.paddingTop = toRpx(+box.paddingTop);
    newBox.paddingLeft = toRpx(+box.paddingLeft);
    newBox.paddingRight = toRpx(+box.paddingRight);
    newBox.paddingBottom = toRpx(+box.paddingBottom);
    newBox.borderTopLeftRadius = toRpx(+box.borderTopLeftRadius);
    newBox.borderTopRightRadius = toRpx(+box.borderTopRightRadius);
    newBox.borderBottomLeftRadius = toRpx(+box.borderBottomLeftRadius);
    newBox.borderBottomRightRadius = toRpx(+box.borderBottomRightRadius);
    return newBox;
  }
  function getFlexStyle(style = {}) {
    var _a2, _b;
    let result = {};
    if (style.display) {
      result.display = style.display;
    }
    if (result.display === "flex") {
      let flexSetting = style.flexSetting || {};
      result.flexDirection = flexSetting.direction || "row";
      result.alignItems = flexSetting.align || "stretch";
      result.justifyContent = flexSetting.justify || "flex-start";
    }
    if (((_a2 = style.flexSetting) == null ? void 0 : _a2.flexShrink) >= 0) {
      result.flexShrink = +style.flexSetting.flexShrink;
    }
    if (((_b = style.flexSetting) == null ? void 0 : _b.flex) >= 0) {
      result.flex = +style.flexSetting.flex;
    }
    return result;
  }
  function toWHset(style, label) {
    const unit = style[label + "Unit"] || "px";
    if (unit === "auto" || style[label] <= 0) {
      return "auto";
    } else if (unit === "px") {
      return toRpx(+style[label]);
    }
    return style[label] + unit;
  }
  function getBoxPosition(component) {
    let { style = {}, isFlow } = (component == null ? void 0 : component.componentProperties) || {};
    let pos = (style.justification || "top left").split(" ");
    let result = {};
    if (isFlow) {
      result.height = toWHset(style, "height");
      result.width = toWHset(style, "width");
      result.maxWidth = "100%";
      if (result.width > 0) {
        result.flexShrink = 0;
      }
    } else {
      result[pos[1]] = +style.x + "px";
      result[pos[0]] = +style.y + "px";
      result.height = toWHset(style, "height") || "auto";
      result.width = toWHset(style, "width") || "100%";
      result.position = style.position || "absolute";
    }
    if (style.opacity >= 0) {
      result.opacity = +style.opacity / 100;
    }
    if (style.display) {
      result.display = style.display;
    }
    return result;
  }
  function getBoxShadow(config2 = {}) {
    const { angle = 0, x, y, blur, size, color: color2, distance } = config2;
    const shadowX = typeof x !== "undefined" ? x : Math.round(Math.sin(angle * (Math.PI / 180)) * distance);
    const shadowY = typeof y !== "undefined" ? y : -Math.round(Math.cos(angle * (Math.PI / 180)) * distance);
    if (!x && !y && !blur && !size && !distance) {
      return {};
    }
    if (isNumber$1(shadowX) && isNumber$1(shadowY)) {
      return {
        boxShadow: `${toRpx(shadowX)} ${toRpx(shadowY)} ${toRpx(blur || 0)} ${toRpx(size || 0)} ${parseThemeColor(color2)}`
      };
    }
    return {};
  }
  function isValidCSS(rule, val) {
    return CSS.supports(rule, val);
  }
  function transformStyle(style = {}) {
    let result = {};
    Object.keys(style).forEach((key) => {
      switch (key) {
        case "box":
          result = Object.assign(result, getBoxStyle(style.box));
          break;
        case "background":
          result = Object.assign(result, getBackgroundStyle(style.background));
          break;
        case "font":
          result = Object.assign(result, getFontStyle(style.font));
          break;
        case "lineHeight":
          result.lineHeight = style[key] >= 12 ? `${parseInt(style[key], 10)}px` : parseInt(style[key], 10);
          break;
        case "boxShadow":
          result = Object.assign(result, getBoxShadow(style.boxShadow));
          break;
        case "opacity":
          result.opacity = +style[key] / 100;
          break;
        case "width":
          result.width = style.autoWidth ? "auto" : toWHset(style, "width");
          break;
        case "flexSetting":
          result = Object.assign(result, getFlexStyle(style));
          break;
        case "height":
          result.height = toWHset(style, "height");
          break;
        default:
          let val = isNumberFormat(style[key]) ? `${+style[key]}px` : style[key];
          if (isObject(style[key])) {
            result = Object.assign(result, { [key]: transformStyle(style[key]) });
          } else if (![
            "x",
            "y",
            "css",
            "lineClamp",
            "columns",
            "flex",
            "scrollX"
          ].includes(key) && isValidCSS(camelToKebab(key), val)) {
            result[key] = isNumberFormat(style[key]) ? `${+style[key]}px` : style[key];
          }
          break;
      }
    });
    return result;
  }
  (_a = window.matchMedia) == null ? void 0 : _a.call(window, "(max-width: 768px)").matches;
  function createVue3Component(vueObj) {
    if (!vueObj || typeof vueObj !== "function" && typeof vueObj !== "object") {
      return;
    }
    class VueFactory extends React.Component {
      constructor(props2) {
        super(props2);
        __publicField(this, "domRef");
        __publicField(this, "app");
        __publicField(this, "vm");
        __publicField(this, "isUnmount");
        this.domRef = React.createRef();
        this.resolveAmisProps = this.resolveAmisProps.bind(this);
      }
      componentDidMount() {
        const { amisData, amisFunc } = this.resolveAmisProps();
        const { data, ...rest } = vueObj = typeof vueObj === "function" ? new vueObj() : vueObj;
        this.app = vue.createApp({
          data: () => extendObject(amisData, typeof data === "function" ? data() : data),
          ...rest,
          props: rest.props || {}
        });
        if (this.app && !this.app.prototype) {
          this.app.prototype = {};
        }
        if (this.app && !this.app.filter) {
          this.app.filter = () => {
          };
        }
        this.app.use(uView);
        Object.keys(amisFunc).forEach((key) => {
          this.app.$props[key] = amisFunc[key];
        });
        this.vm = this.app.mount(this.domRef.current);
        this.domRef.current.setAttribute("data-component-id", this.props.id);
      }
      componentDidUpdate() {
        if (!this.isUnmount) {
          const { amisData } = this.resolveAmisProps();
          if (this.vm) {
            Object.keys(amisData).forEach((key) => {
              this.vm[key] = amisData[key];
            });
            this.vm.$forceUpdate();
          }
        }
      }
      componentWillUnmount() {
        this.isUnmount = true;
        this.app.unmount();
      }
      resolveAmisProps() {
        let amisFunc = {};
        let amisData = {};
        Object.keys(this.props).forEach((key) => {
          const value = this.props[key];
          if (typeof value === "function") {
            amisFunc[key] = value;
          } else {
            if (vue.isProxy(value)) {
              amisData[key] = vue.shallowRef(value);
            } else if (isObject$1$1(value)) {
              amisData[key] = vue.ref(value);
            } else {
              amisData[key] = value;
            }
          }
        });
        return { amisData, amisFunc };
      }
      render() {
        const { componentProperties, node } = this.props;
        const style = componentProperties && componentProperties.style ? componentProperties.style : {};
        const curStyle = {
          ...getBoxPosition(node || this.props),
          ...transformStyle(style)
        };
        return React.createElement("div", { ref: this.domRef, style: curStyle });
      }
    }
    return VueFactory;
  }
  function registerRenderer(newRenderer, rendererOption) {
    if (!newRenderer) {
      return;
    }
    const curRendererOption = {
      type: "",
      framework: Framework.react
      // 默认为 react 技术栈
    };
    if (rendererOption && isString(rendererOption)) {
      Object.assign(curRendererOption, {
        type: rendererOption
      });
    } else {
      Object.assign(curRendererOption, rendererOption);
    }
    if (curRendererOption && !curRendererOption.type) {
      console.error(`${consoleTag}自定义组件注册失败，自定义组件类型（type）不能为空。`);
    } else {
      curRendererOption.framework = getFramework(curRendererOption.framework);
      const resolverMap = {
        react: (i) => i,
        // vue2: createVue2Component,
        vue3: createVue3Component
      };
      const curRendererComponent = resolverMap[curRendererOption.framework](newRenderer);
      if (window) {
        const newComponentId = AddCustomRenderer(curRendererOption.type, curRendererComponent);
        if (newComponentId) {
          console.info(`${consoleTag}触发注册自定义渲染器(${curRendererOption.type})事件:`, {
            type: curRendererOption.type,
            component: curRendererComponent,
            framework: curRendererOption.framework
          });
          window.postMessage({
            type: "aipage-editor-register-renderer-event",
            eventMsg: `${consoleTag}注册一个自定义aipage-editor渲染器`,
            customComponentId: newComponentId
          }, "*");
        }
      }
    }
  }
  function AddCustomRenderer(type2, component) {
    if (window && !window.AIPageEditorCustomRenderers) {
      window.AIPageEditorCustomRenderers = {};
    }
    const componentId = transformComponentId(type2);
    if (!window.AIPageEditorCustomRenderers[componentId]) {
      window.AIPageEditorCustomRenderers[componentId] = component;
      return componentId;
    } else {
      console.error(`${consoleTag}注册自定义渲染器失败，已存在同名渲染器类型(${type2})。`);
    }
    return null;
  }
  const button = "";
  const view = "";
  const textarea = "";
  const resizeSensor = "";
  const input = "";
  const image$1 = "";
  const text = "";
  const uIcon_vue_vue_type_style_index_0_scoped_930a2c40_lang = "";
  const _export_sfc = (sfc, props2) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props2) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$s = {
    name: "u-icon",
    emits: ["click", "touchstart"],
    props: {
      // 图标类名
      name: {
        type: String,
        default: ""
      },
      // 图标颜色，可接受主题色
      color: {
        type: String,
        default: ""
      },
      // 字体大小，单位rpx
      size: {
        type: [Number, String],
        default: "inherit"
      },
      // 是否显示粗体
      bold: {
        type: Boolean,
        default: false
      },
      // 点击图标的时候传递事件出去的index（用于区分点击了哪一个）
      index: {
        type: [Number, String],
        default: ""
      },
      // 触摸图标时的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义扩展前缀，方便用户扩展自己的图标库
      customPrefix: {
        type: String,
        default: "uicon"
      },
      // 图标右边或者下面的文字
      label: {
        type: [String, Number],
        default: ""
      },
      // label的位置，只能右边或者下边
      labelPos: {
        type: String,
        default: "right"
      },
      // label的大小
      labelSize: {
        type: [String, Number],
        default: "28"
      },
      // label的颜色
      labelColor: {
        type: String,
        default: "#606266"
      },
      // label与图标的距离(横向排列)
      marginLeft: {
        type: [String, Number],
        default: "6"
      },
      // label与图标的距离(竖向排列)
      marginTop: {
        type: [String, Number],
        default: "6"
      },
      // label与图标的距离(竖向排列)
      marginRight: {
        type: [String, Number],
        default: "6"
      },
      // label与图标的距离(竖向排列)
      marginBottom: {
        type: [String, Number],
        default: "6"
      },
      // 图片的mode
      imgMode: {
        type: String,
        default: "widthFix"
      },
      // 自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 用于显示图片小图标时，图片的宽度
      width: {
        type: [String, Number],
        default: ""
      },
      // 用于显示图片小图标时，图片的高度
      height: {
        type: [String, Number],
        default: ""
      },
      // 用于解决某些情况下，让图标垂直居中的用途
      top: {
        type: [String, Number],
        default: 0
      },
      // 是否为DecimalIcon
      showDecimalIcon: {
        type: Boolean,
        default: false
      },
      // 背景颜色，可接受主题色，仅Decimal时有效
      inactiveColor: {
        type: String,
        default: "#ececec"
      },
      // 显示的百分比，仅Decimal时有效
      percent: {
        type: [Number, String],
        default: "50"
      }
    },
    computed: {
      customClass() {
        let classes = [];
        let { customPrefix, name } = this;
        let index2 = name.indexOf("-icon-");
        if (index2 > -1) {
          customPrefix = name.substring(0, index2 + 5);
          classes.push(name);
        } else {
          classes.push(`${customPrefix}-${name}`);
        }
        if (customPrefix === "uicon") {
          classes.push("u-iconfont");
        } else {
          classes.push(customPrefix);
        }
        if (this.showDecimalIcon && this.inactiveColor && this.$u.config.type.includes(this.inactiveColor)) {
          classes.push("u-icon__icon--" + this.inactiveColor);
        } else if (this.color && this.$u.config.type.includes(this.color))
          classes.push("u-icon__icon--" + this.color);
        return classes;
      },
      iconStyle() {
        let style = {};
        style = {
          fontSize: this.size == "inherit" ? "inherit" : this.$u.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$u.addUnit(this.top)
        };
        if (this.showDecimalIcon && this.inactiveColor && !this.$u.config.type.includes(this.inactiveColor)) {
          style.color = this.inactiveColor;
        } else if (this.color && !this.$u.config.type.includes(this.color))
          style.color = this.color;
        return style;
      },
      // 判断传入的name属性，是否图片路径，只要带有"/"均认为是图片形式
      isImg() {
        return this.name.indexOf("/") !== -1;
      },
      imgStyle() {
        let style = {};
        style.width = this.width ? this.$u.addUnit(this.width) : this.$u.addUnit(this.size);
        style.height = this.height ? this.$u.addUnit(this.height) : this.$u.addUnit(this.size);
        return style;
      },
      decimalIconStyle() {
        let style = {};
        style = {
          fontSize: this.size == "inherit" ? "inherit" : this.$u.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$u.addUnit(this.top),
          width: this.percent + "%"
        };
        if (this.color && !this.$u.config.type.includes(this.color))
          style.color = this.color;
        return style;
      },
      decimalIconClass() {
        let classes = [];
        classes.push(this.customPrefix + "-" + this.name);
        if (this.customPrefix == "uicon") {
          classes.push("u-iconfont");
        } else {
          classes.push(this.customPrefix);
        }
        if (this.color && this.$u.config.type.includes(this.color))
          classes.push("u-icon__icon--" + this.color);
        else
          classes.push("u-icon__icon--primary");
        return classes;
      }
    },
    methods: {
      click() {
        this.$emit("click", this.index);
      },
      touchstart() {
        this.$emit("touchstart", this.index);
      }
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_image = index$q;
    const _component_v_uni_text = index$i;
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      style: vue.normalizeStyle([$props.customStyle]),
      class: vue.normalizeClass(["u-icon", ["u-icon--" + $props.labelPos]]),
      onClick: $options.click
    }, {
      default: vue.withCtx(() => [
        $options.isImg ? (vue.openBlock(), vue.createBlock(_component_v_uni_image, {
          key: 0,
          class: "u-icon__img",
          src: $props.name,
          mode: $props.imgMode,
          style: vue.normalizeStyle([$options.imgStyle])
        }, null, 8, ["src", "mode", "style"])) : (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 1,
          class: vue.normalizeClass(["u-icon__icon", $options.customClass]),
          style: vue.normalizeStyle([$options.iconStyle]),
          "hover-class": $props.hoverClass,
          onTouchstart: $options.touchstart
        }, {
          default: vue.withCtx(() => [
            $props.showDecimalIcon ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
              key: 0,
              style: vue.normalizeStyle([$options.decimalIconStyle]),
              class: vue.normalizeClass([$options.decimalIconClass, "u-icon__decimal"]),
              "hover-class": $props.hoverClass
            }, null, 8, ["style", "class", "hover-class"])) : vue.createCommentVNode("v-if", true)
          ]),
          _: 1
          /* STABLE */
        }, 8, ["class", "style", "hover-class", "onTouchstart"])),
        vue.createCommentVNode(' 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示，微信小程序不传值默认为null，故需要增加null的判断 '),
        $props.label !== "" && $props.label !== null ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
          key: 2,
          class: "u-icon__label",
          style: vue.normalizeStyle({
            color: $props.labelColor,
            fontSize: _ctx.$u.addUnit($props.labelSize),
            marginLeft: $props.labelPos == "right" ? _ctx.$u.addUnit($props.marginLeft) : 0,
            marginTop: $props.labelPos == "bottom" ? _ctx.$u.addUnit($props.marginTop) : 0,
            marginRight: $props.labelPos == "left" ? _ctx.$u.addUnit($props.marginRight) : 0,
            marginBottom: $props.labelPos == "top" ? _ctx.$u.addUnit($props.marginBottom) : 0
          })
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString($props.label),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["style"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 1
      /* STABLE */
    }, 8, ["style", "onClick", "class"]);
  }
  const __easycom_1$1 = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$s], ["__scopeId", "data-v-930a2c40"]]);
  function resolveEasycom(component, easycom) {
    return isString$1(component) ? easycom : component;
  }
  function broadcast(componentName, eventName, params) {
  }
  const Emitter = {
    methods: {
      /**
       * 派发 (向上查找) (一个)
       * @param componentName // 需要找的组件的名称
       * @param eventName // 事件名称
       * @param params // 需要传递的参数
       */
      dispatch(componentName, eventName, params) {
        let parent = this.$parent || this.$root;
        let name = parent.$options.name;
        while (parent && (!name || name !== componentName)) {
          parent = parent.$parent;
          if (parent) {
            name = parent.$options.name;
          }
        }
        if (parent) {
          parent[eventName](params);
        }
      },
      /**
       * 广播 (向下查找) (广播多个)
       * @param componentName // 需要找的组件的名称
       * @param eventName // 事件名称
       * @param params // 需要传递的参数
       */
      broadcast(componentName, eventName, params) {
        broadcast.call(this, componentName, eventName, params);
      }
    }
  };
  const uInput_vue_vue_type_style_index_0_scoped_738b0ba8_lang = "";
  const _sfc_main$r = {
    name: "u-input",
    emits: ["update:modelValue", "input", "change", "confirm", "clear", "blur", "focus", "click", "touchstart"],
    mixins: [Emitter],
    props: {
      value: {
        type: [String, Number],
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      // 输入框的类型，textarea，text，number
      type: {
        type: String,
        default: "text"
      },
      inputAlign: {
        type: String,
        default: ""
      },
      placeholder: {
        type: String,
        default: "请输入内容"
      },
      disabled: {
        type: Boolean,
        default: false
      },
      maxlength: {
        type: [Number, String],
        default: 140
      },
      placeholderStyle: {
        type: String,
        default: "color: #c0c4cc;"
      },
      confirmType: {
        type: String,
        default: "done"
      },
      // 输入框的自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 如果 textarea 是在一个 position:fixed 的区域，需要显示指定属性 fixed 为 true
      fixed: {
        type: Boolean,
        default: false
      },
      // 是否自动获得焦点
      focus: {
        type: Boolean,
        default: false
      },
      // 密码类型时，是否显示右侧的密码图标
      passwordIcon: {
        type: Boolean,
        default: true
      },
      // input|textarea是否显示边框
      border: {
        type: Boolean,
        default: false
      },
      // 输入框的边框颜色
      borderColor: {
        type: String,
        default: "#dcdfe6"
      },
      autoHeight: {
        type: Boolean,
        default: true
      },
      // type=select时，旋转右侧的图标，标识当前处于打开还是关闭select的状态
      // open-打开，close-关闭
      selectOpen: {
        type: Boolean,
        default: false
      },
      // 高度，单位rpx
      height: {
        type: [Number, String],
        default: ""
      },
      // 是否可清空
      clearable: {
        type: [Boolean, String]
      },
      // 指定光标与键盘的距离，单位 px
      cursorSpacing: {
        type: [Number, String],
        default: 0
      },
      // 光标起始位置，自动聚焦时有效，需与selection-end搭配使用
      selectionStart: {
        type: [Number, String],
        default: -1
      },
      // 光标结束位置，自动聚焦时有效，需与selection-start搭配使用
      selectionEnd: {
        type: [Number, String],
        default: -1
      },
      // 是否自动去除两端的空格
      trim: {
        type: Boolean,
        default: true
      },
      // 是否显示键盘上方带有”完成“按钮那一栏
      showConfirmbar: {
        type: Boolean,
        default: true
      },
      // 弹出键盘时是否自动调节高度，uni-app默认值是true
      adjustPosition: {
        type: Boolean,
        default: true
      },
      // input的背景色
      backgroundColor: {
        type: String
      },
      // input的padding
      padding: {
        type: String
      }
    },
    data() {
      return {
        defaultValue: "",
        inputHeight: 70,
        // input的高度
        textareaHeight: 100,
        // textarea的高度
        validateState: false,
        // 当前input的验证状态，用于错误时，边框是否改为红色
        focused: false,
        // 当前是否处于获得焦点的状态
        showPassword: false,
        // 是否预览密码
        lastValue: "",
        // 用于头条小程序，判断@input中，前后的值是否发生了变化，因为头条中文下，按下键没有输入内容，也会触发@input时间
        uForm: {
          inputAlign: "",
          clearable: ""
        }
      };
    },
    watch: {
      valueCom(nVal, oVal) {
        this.defaultValue = nVal;
        if (nVal != oVal && this.type == "select")
          this.handleInput({
            detail: {
              value: nVal
            }
          });
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      inputAlignCom() {
        return this.inputAlign || this.uForm.inputAlign || "left";
      },
      clearableCom() {
        if (typeof this.clearable == "boolean")
          return this.clearable;
        if (typeof this.uForm.clearable == "boolean")
          return this.uForm.clearable;
        return true;
      },
      // 因为uniapp的input组件的maxlength组件必须要数值，这里转为数值，给用户可以传入字符串数值
      inputMaxlength() {
        return Number(this.maxlength);
      },
      getStyle() {
        let style = {};
        style.minHeight = this.height ? this.height + "rpx" : this.type == "textarea" ? this.textareaHeight + "rpx" : this.inputHeight + "rpx";
        style = Object.assign(style, this.customStyle);
        return style;
      },
      //
      getCursorSpacing() {
        return Number(this.cursorSpacing);
      },
      // 光标起始位置
      uSelectionStart() {
        return String(this.selectionStart);
      },
      // 光标结束位置
      uSelectionEnd() {
        return String(this.selectionEnd);
      }
    },
    created() {
      this.defaultValue = this.valueCom;
    },
    mounted() {
      let parent = this.$u.$parent.call(this, "u-form");
      if (parent) {
        Object.keys(this.uForm).map((key) => {
          this.uForm[key] = parent[key];
        });
      }
    },
    methods: {
      /**
       * change 事件
       * @param event
       */
      handleInput(event) {
        let value = event.detail.value;
        if (this.trim)
          value = this.$u.trim(value);
        this.$emit("input", value);
        this.$emit("update:modelValue", value);
        this.defaultValue = value;
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldChange", value);
        }, 40);
      },
      /**
       * blur 事件
       * @param event
       */
      handleBlur(event) {
        setTimeout(() => {
          this.focused = false;
        }, 100);
        this.$emit("blur", event.detail.value);
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldBlur", event.detail.value);
        }, 40);
      },
      onFormItemError(status) {
        this.validateState = status;
      },
      onFocus(event) {
        this.focused = true;
        this.$emit("focus");
      },
      onConfirm(e2) {
        this.$emit("confirm", e2.detail.value);
      },
      onClear(event) {
        this.$emit("input", "");
        this.$emit("update:modelValue", "");
        this.$emit("clear");
      },
      inputClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_textarea = index$h;
    const _component_v_uni_input = Input;
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_1$1);
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["u-input", {
        "u-input--border": $props.border,
        "u-input--error": $data.validateState
      }]),
      style: vue.normalizeStyle({
        padding: $props.padding ? $props.padding : `0 ${$props.border ? 20 : 0}rpx`,
        borderColor: $props.borderColor,
        textAlign: $options.inputAlignCom,
        backgroundColor: $props.backgroundColor
      }),
      onClick: vue.withModifiers($options.inputClick, ["stop"])
    }, {
      default: vue.withCtx(() => [
        $props.type == "textarea" ? (vue.openBlock(), vue.createBlock(_component_v_uni_textarea, {
          key: 0,
          class: "u-input__input u-input__textarea",
          style: vue.normalizeStyle([$options.getStyle]),
          value: $data.defaultValue,
          placeholder: $props.placeholder,
          placeholderStyle: $props.placeholderStyle,
          disabled: $props.disabled,
          maxlength: $options.inputMaxlength,
          fixed: $props.fixed,
          focus: $props.focus,
          autoHeight: $props.autoHeight,
          "selection-end": $options.uSelectionEnd,
          "selection-start": $options.uSelectionStart,
          "cursor-spacing": $options.getCursorSpacing,
          "show-confirm-bar": $props.showConfirmbar,
          "adjust-position": $props.adjustPosition,
          onInput: $options.handleInput,
          onBlur: $options.handleBlur,
          onFocus: $options.onFocus,
          onConfirm: $options.onConfirm
        }, null, 8, ["style", "value", "placeholder", "placeholderStyle", "disabled", "maxlength", "fixed", "focus", "autoHeight", "selection-end", "selection-start", "cursor-spacing", "show-confirm-bar", "adjust-position", "onInput", "onBlur", "onFocus", "onConfirm"])) : (vue.openBlock(), vue.createBlock(_component_v_uni_input, {
          key: 1,
          class: "u-input__input",
          type: $props.type == "password" ? "text" : $props.type,
          style: vue.normalizeStyle([$options.getStyle]),
          value: $data.defaultValue,
          password: $props.type == "password" && !$data.showPassword,
          placeholder: $props.placeholder,
          placeholderStyle: $props.placeholderStyle,
          disabled: $props.disabled || $props.type === "select",
          maxlength: $options.inputMaxlength,
          focus: $props.focus,
          confirmType: $props.confirmType,
          "cursor-spacing": $options.getCursorSpacing,
          "selection-end": $options.uSelectionEnd,
          "selection-start": $options.uSelectionStart,
          "show-confirm-bar": $props.showConfirmbar,
          "adjust-position": $props.adjustPosition,
          onFocus: $options.onFocus,
          onBlur: $options.handleBlur,
          onInput: $options.handleInput,
          onConfirm: $options.onConfirm
        }, null, 8, ["type", "style", "value", "password", "placeholder", "placeholderStyle", "disabled", "maxlength", "focus", "confirmType", "cursor-spacing", "selection-end", "selection-start", "show-confirm-bar", "adjust-position", "onFocus", "onBlur", "onInput", "onConfirm"])),
        vue.createVNode(_component_v_uni_view, { class: "u-input__right-icon u-flex" }, {
          default: vue.withCtx(() => [
            $options.clearableCom && $options.valueCom != "" && $data.focused ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              key: 0,
              class: "u-input__right-icon__clear u-input__right-icon__item",
              onClick: $options.onClear
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_icon, {
                  size: "32",
                  name: "close-circle-fill",
                  color: "#c0c4cc"
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["onClick"])) : vue.createCommentVNode("v-if", true),
            $props.passwordIcon && $props.type == "password" ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              key: 1,
              class: "u-input__right-icon__clear u-input__right-icon__item"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_icon, {
                  size: "32",
                  name: !$data.showPassword ? "eye" : "eye-fill",
                  color: "#c0c4cc",
                  onClick: _cache[0] || (_cache[0] = ($event) => $data.showPassword = !$data.showPassword)
                }, null, 8, ["name"])
              ]),
              _: 1
              /* STABLE */
            })) : vue.createCommentVNode("v-if", true),
            $props.type == "select" ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              key: 2,
              class: vue.normalizeClass(["u-input__right-icon--select u-input__right-icon__item", {
                "u-input__right-icon--select--reverse": $props.selectOpen
              }])
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_icon, {
                  name: "arrow-down-fill",
                  size: "26",
                  color: "#c0c4cc"
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["class", "style", "onClick"]);
  }
  const __easycom_2$1 = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$r], ["__scopeId", "data-v-738b0ba8"]]);
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var formatRegExp = /%[sdj%]/g;
  var warning = function warning2() {
  };
  if (typeof process !== "undefined" && process.env && false) {
    warning = function warning2(type2, errors) {
      if (typeof console !== "undefined" && console.warn) {
        if (errors.every(function(e2) {
          return typeof e2 === "string";
        })) {
          console.warn(type2, errors);
        }
      }
    };
  }
  function convertFieldsError(errors) {
    if (!errors || !errors.length)
      return null;
    var fields = {};
    errors.forEach(function(error2) {
      var field = error2.field;
      fields[field] = fields[field] || [];
      fields[field].push(error2);
    });
    return fields;
  }
  function format() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var i = 1;
    var f2 = args[0];
    var len = args.length;
    if (typeof f2 === "function") {
      return f2.apply(null, args.slice(1));
    }
    if (typeof f2 === "string") {
      var str = String(f2).replace(formatRegExp, function(x) {
        if (x === "%%") {
          return "%";
        }
        if (i >= len) {
          return x;
        }
        switch (x) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
            break;
          default:
            return x;
        }
      });
      for (var arg = args[i]; i < len; arg = args[++i]) {
        str += " " + arg;
      }
      return str;
    }
    return f2;
  }
  function isNativeStringType(type2) {
    return type2 === "string" || type2 === "url" || type2 === "hex" || type2 === "email" || type2 === "pattern";
  }
  function isEmptyValue(value, type2) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (type2 === "array" && Array.isArray(value) && !value.length) {
      return true;
    }
    if (isNativeStringType(type2) && typeof value === "string" && !value) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func2, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;
    function count(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === arrLength) {
        callback(results);
      }
    }
    arr.forEach(function(a2) {
      func2(a2, count);
    });
  }
  function asyncSerialArray(arr, func2, callback) {
    var index2 = 0;
    var arrLength = arr.length;
    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }
      var original = index2;
      index2 = index2 + 1;
      if (original < arrLength) {
        func2(arr[original], next);
      } else {
        callback([]);
      }
    }
    next([]);
  }
  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k) {
      ret.push.apply(ret, objArr[k]);
    });
    return ret;
  }
  function asyncMap(objArr, option, func2, callback) {
    if (option.first) {
      var _pending = new Promise(function(resolve, reject) {
        var next = function next2(errors) {
          callback(errors);
          return errors.length ? reject({
            errors,
            fields: convertFieldsError(errors)
          }) : resolve();
        };
        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func2, next);
      });
      _pending["catch"](function(e2) {
        return e2;
      });
      return _pending;
    }
    var firstFields = option.firstFields || [];
    if (firstFields === true) {
      firstFields = Object.keys(objArr);
    }
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        results.push.apply(results, errors);
        total++;
        if (total === objArrLength) {
          callback(results);
          return results.length ? reject({
            errors: results,
            fields: convertFieldsError(results)
          }) : resolve();
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve();
      }
      objArrKeys.forEach(function(key) {
        var arr = objArr[key];
        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func2, next);
        } else {
          asyncParallelArray(arr, func2, next);
        }
      });
    });
    pending["catch"](function(e2) {
      return e2;
    });
    return pending;
  }
  function complementError(rule) {
    return function(oe) {
      if (oe && oe.message) {
        oe.field = oe.field || rule.fullField;
        return oe;
      }
      return {
        message: typeof oe === "function" ? oe() : oe,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge$1(target, source) {
    if (source) {
      for (var s in source) {
        if (source.hasOwnProperty(s)) {
          var value = source[s];
          if (typeof value === "object" && typeof target[s] === "object") {
            target[s] = _extends({}, target[s], {}, value);
          } else {
            target[s] = value;
          }
        }
      }
    }
    return target;
  }
  function required(rule, value, source, errors, options, type2) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type2 || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  }
  function whitespace(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === "") {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  }
  var pattern = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    url: new RegExp(
      "^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$",
      "i"
    ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer2(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array2(value) {
      return Array.isArray(value);
    },
    regexp: function regexp2(value) {
      if (value instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value);
      } catch (e2) {
        return false;
      }
    },
    date: function date2(value) {
      return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function";
    },
    number: function number2(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof +value === "number";
    },
    object: function object2(value) {
      return typeof value === "object" && !types.array(value);
    },
    method: function method2(value) {
      return typeof value === "function";
    },
    email: function email2(value) {
      return typeof value === "string" && !!value.match(pattern.email) && value.length < 255;
    },
    url: function url2(value) {
      return typeof value === "string" && !!value.match(pattern.url);
    },
    hex: function hex(value) {
      return typeof value === "string" && !!value.match(pattern.hex);
    }
  };
  function type(rule, value, source, errors, options) {
    if (rule.required && value === void 0) {
      required(rule, value, source, errors, options);
      return;
    }
    var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  }
  function range$2(rule, value, source, errors, options) {
    var len = typeof rule.len === "number";
    var min = typeof rule.min === "number";
    var max = typeof rule.max === "number";
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === "number";
    var str = typeof value === "string";
    var arr = Array.isArray(value);
    if (num) {
      key = "number";
    } else if (str) {
      key = "string";
    } else if (arr) {
      key = "array";
    }
    if (!key) {
      return false;
    }
    if (arr) {
      val = value.length;
    }
    if (str) {
      val = value.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  }
  var ENUM = "enum";
  function enumerable(rule, value, source, errors, options) {
    rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
    if (rule[ENUM].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(", ")));
    }
  }
  function pattern$1(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        var _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  }
  var rules = {
    required,
    whitespace,
    type,
    range: range$2,
    "enum": enumerable,
    pattern: pattern$1
  };
  function string$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "string");
      if (!isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }
    callback(errors);
  }
  function method(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function number$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (value === "") {
        value = void 0;
      }
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function _boolean(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function regexp(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function integer(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function floatFn(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function array$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "array") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "array");
      if (!isEmptyValue(value, "array")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function object$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  var ENUM$1 = "enum";
  function enumerable$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules[ENUM$1](rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function pattern$2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function date$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        var dateObject;
        if (typeof value === "number") {
          dateObject = new Date(value);
        } else {
          dateObject = value;
        }
        rules.type(rule, dateObject, source, errors, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  }
  function required$1(rule, value, callback, source, options) {
    var errors = [];
    var type2 = Array.isArray(value) ? "array" : typeof value;
    rules.required(rule, value, source, errors, options, type2);
    callback(errors);
  }
  function type$1(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, ruleType);
      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function any(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
    }
    callback(errors);
  }
  var validators = {
    string: string$1,
    method,
    number: number$1,
    "boolean": _boolean,
    regexp,
    integer,
    "float": floatFn,
    array: array$1,
    object: object$1,
    "enum": enumerable$1,
    pattern: pattern$2,
    date: date$1,
    url: type$1,
    hex: type$1,
    email: type$1,
    required: required$1,
    any
  };
  function newMessages() {
    return {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        integer: "%s is not an %s",
        "float": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();
  function Schema(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  Schema.prototype = {
    messages: function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge$1(newMessages(), _messages);
      }
      return this._messages;
    },
    define: function define2(rules2) {
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      var z;
      var item;
      for (z in rules2) {
        if (rules2.hasOwnProperty(z)) {
          item = rules2[z];
          this.rules[z] = Array.isArray(item) ? item : [item];
        }
      }
    },
    validate: function validate(source_, o2, oc) {
      var _this = this;
      if (o2 === void 0) {
        o2 = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      var source = source_;
      var options = o2;
      var callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback();
        }
        return Promise.resolve();
      }
      function complete(results) {
        var i;
        var errors = [];
        var fields = {};
        function add(e2) {
          if (Array.isArray(e2)) {
            var _errors;
            errors = (_errors = errors).concat.apply(_errors, e2);
          } else {
            errors.push(e2);
          }
        }
        for (i = 0; i < results.length; i++) {
          add(results[i]);
        }
        if (!errors.length) {
          errors = null;
          fields = null;
        } else {
          fields = convertFieldsError(errors);
        }
        callback(errors, fields);
      }
      if (options.messages) {
        var messages$1 = this.messages();
        if (messages$1 === messages) {
          messages$1 = newMessages();
        }
        deepMerge$1(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }
      var arr;
      var value;
      var series = {};
      var keys2 = options.keys || Object.keys(this.rules);
      keys2.forEach(function(z) {
        arr = _this.rules[z];
        value = source[z];
        arr.forEach(function(r) {
          var rule = r;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = _extends({}, source);
            }
            value = source[z] = rule.transform(value);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends({}, rule);
          }
          rule.validator = _this.getValidationMethod(rule);
          rule.field = z;
          rule.fullField = rule.fullField || z;
          rule.type = _this.getType(rule);
          if (!rule.validator) {
            return;
          }
          series[z] = series[z] || [];
          series[z].push({
            rule,
            value,
            source,
            field: z
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function(data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullfield(key, schema) {
          return _extends({}, schema, {
            fullField: rule.fullField + "." + key
          });
        }
        function cb(e2) {
          if (e2 === void 0) {
            e2 = [];
          }
          var errors = e2;
          if (!Array.isArray(errors)) {
            errors = [errors];
          }
          if (!options.suppressWarning && errors.length) {
            Schema.warning("async-validator:", errors);
          }
          if (errors.length && rule.message) {
            errors = [].concat(rule.message);
          }
          errors = errors.map(complementError(rule));
          if (options.first && errors.length) {
            errorFields[rule.field] = 1;
            return doIt(errors);
          }
          if (!deep) {
            doIt(errors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message) {
                errors = [].concat(rule.message).map(complementError(rule));
              } else if (options.error) {
                errors = [options.error(rule, format(options.messages.required, rule.field))];
              } else {
                errors = [];
              }
              return doIt(errors);
            }
            var fieldsSchema = {};
            if (rule.defaultField) {
              for (var k in data.value) {
                if (data.value.hasOwnProperty(k)) {
                  fieldsSchema[k] = rule.defaultField;
                }
              }
            }
            fieldsSchema = _extends({}, fieldsSchema, {}, data.rule.fields);
            for (var f2 in fieldsSchema) {
              if (fieldsSchema.hasOwnProperty(f2)) {
                var fieldSchema = Array.isArray(fieldsSchema[f2]) ? fieldsSchema[f2] : [fieldsSchema[f2]];
                fieldsSchema[f2] = fieldSchema.map(addFullfield.bind(null, f2));
              }
            }
            var schema = new Schema(fieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, function(errs) {
              var finalErrors = [];
              if (errors && errors.length) {
                finalErrors.push.apply(finalErrors, errors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        var res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          res = rule.validator(rule, data.value, cb, data.source, options);
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(rule.message || rule.field + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(function() {
            return cb();
          }, function(e2) {
            return cb(e2);
          });
        }
      }, function(results) {
        complete(results);
      });
    },
    getType: function getType(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    },
    getValidationMethod: function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      var keys2 = Object.keys(rule);
      var messageIndex = keys2.indexOf("message");
      if (messageIndex !== -1) {
        keys2.splice(messageIndex, 1);
      }
      if (keys2.length === 1 && keys2[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || false;
    }
  };
  Schema.register = function register(type2, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type2] = validator;
  };
  Schema.warning = warning;
  Schema.messages = messages;
  const uFormItem_vue_vue_type_style_index_0_scoped_79cafb1d_lang = "";
  Schema.warning = function() {
  };
  const _sfc_main$q = {
    name: "u-form-item",
    mixins: [Emitter],
    inject: {
      uForm: {
        default() {
          return null;
        }
      }
    },
    props: {
      // input的label提示语
      label: {
        type: String,
        default: ""
      },
      // 绑定的值
      prop: {
        type: String,
        default: ""
      },
      // 是否显示表单域的下划线边框
      borderBottom: {
        type: [String, Boolean],
        default: ""
      },
      // label的位置，left-左边，top-上边
      labelPosition: {
        type: String,
        default: ""
      },
      // label的宽度，单位rpx
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      // lable的样式，对象形式
      labelStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // lable字体的对齐方式
      labelAlign: {
        type: String,
        default: ""
      },
      // 右侧图标
      rightIcon: {
        type: String,
        default: ""
      },
      // 左侧图标
      leftIcon: {
        type: String,
        default: ""
      },
      // 左侧图标的样式
      leftIconStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 左侧图标的样式
      rightIconStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 是否显示左边的必填星号，只作显示用，具体校验必填的逻辑，请在rules中配置
      required: {
        type: Boolean,
        default: false
      },
      inputAlign: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        initialValue: "",
        // 存储的默认值
        // isRequired: false, // 是否必填，由于人性化考虑，必填"*"号通过props的required配置，不再通过rules的规则自动生成
        validateState: "",
        // 是否校验成功
        validateMessage: "",
        // 校验失败的提示语
        // 有错误时的提示方式，message-提示信息，border-如果input设置了边框，变成呈红色，
        errorType: ["message"],
        fieldValue: "",
        // 获取当前子组件input的输入的值
        // 父组件的参数，在computed计算中，无法得知this.parent发生变化，故将父组件的参数值，放到data中
        parentData: {
          borderBottom: true,
          labelWidth: 90,
          labelPosition: "left",
          labelStyle: {},
          labelAlign: "left",
          inputAlign: "left"
        }
      };
    },
    watch: {
      validateState(val) {
        this.broadcastInputError();
      },
      // 监听u-form组件的errorType的变化
      "uForm.errorType"(val) {
        this.errorType = val;
        this.broadcastInputError();
      }
    },
    computed: {
      // 计算后的label宽度，由于需要多个判断，故放到computed中
      uLabelWidth() {
        return this.elLabelPosition == "left" ? this.label === "true" || this.label === "" ? "auto" : this.$u.addUnit(this.elLabelWidth) : "100%";
      },
      showError() {
        return (type2) => {
          if (this.errorType.indexOf("none") >= 0)
            return false;
          else if (this.errorType.indexOf(type2) >= 0)
            return true;
          else
            return false;
        };
      },
      // label的宽度
      elLabelWidth() {
        return this.labelWidth != 0 || this.labelWidth != "" ? this.labelWidth : this.parentData.labelWidth ? this.parentData.labelWidth : 90;
      },
      // label的样式
      elLabelStyle() {
        return Object.keys(this.labelStyle).length ? this.labelStyle : this.parentData.labelStyle ? this.parentData.labelStyle : {};
      },
      // label的位置，左侧或者上方
      elLabelPosition() {
        return this.labelPosition ? this.labelPosition : this.parentData.labelPosition ? this.parentData.labelPosition : "left";
      },
      // label的对齐方式
      elLabelAlign() {
        return this.labelAlign ? this.labelAlign : this.parentData.labelAlign ? this.parentData.labelAlign : "left";
      },
      // label的下划线
      elBorderBottom() {
        return this.borderBottom !== "" ? this.borderBottom : typeof this.parentData.borderBottom === "boolean" ? this.parentData.borderBottom : true;
      },
      elInputAlign() {
        return this.inputAlign ? this.inputAlign : this.parentData.inputAlign ? this.parentData.inputAlign : "left";
      }
    },
    methods: {
      broadcastInputError() {
        this.broadcast("u-input", "onFormItemError", this.validateState === "error" && this.showError("border"));
      },
      // 判断是否需要required校验
      setRules() {
      },
      // 从u-form的rules属性中，取出当前u-form-item的校验规则
      getRules() {
        let rules2 = this.parent.rules;
        rules2 = rules2 ? rules2[this.prop] : [];
        return [].concat(rules2 || []);
      },
      // blur事件时进行表单校验
      onFieldBlur() {
        this.validation("blur");
      },
      // change事件进行表单校验
      onFieldChange() {
        this.validation("change");
      },
      // 过滤出符合要求的rule规则
      getFilteredRule(triggerType = "") {
        let rules2 = this.getRules();
        if (!triggerType)
          return rules2;
        return rules2.filter((res) => res.trigger && res.trigger.indexOf(triggerType) !== -1);
      },
      getData(dataObj, name, defaultValue) {
        let newDataObj;
        if (dataObj) {
          newDataObj = JSON.parse(JSON.stringify(dataObj));
          let k = "", d = ".", l = "[", r = "]";
          name = name.replace(/\s+/g, k) + d;
          let tstr = k;
          for (let i = 0; i < name.length; i++) {
            let theChar = name.charAt(i);
            if (theChar != d && theChar != l && theChar != r) {
              tstr += theChar;
            } else if (newDataObj) {
              if (tstr != k)
                newDataObj = newDataObj[tstr];
              tstr = k;
            }
          }
        }
        if (typeof newDataObj === "undefined" && typeof defaultValue !== "undefined")
          newDataObj = defaultValue;
        return newDataObj;
      },
      setData(dataObj, name, value) {
        let dataValue;
        if (typeof value === "object") {
          dataValue = JSON.parse(JSON.stringify(value));
        } else {
          dataValue = value;
        }
        let regExp2 = new RegExp("([\\w$]+)|\\[(:\\d)\\]", "g");
        const patten = name.match(regExp2);
        for (let i = 0; i < patten.length - 1; i++) {
          let keyName = patten[i];
          if (typeof dataObj[keyName] !== "object")
            dataObj[keyName] = {};
          dataObj = dataObj[keyName];
        }
        dataObj[patten[patten.length - 1]] = dataValue;
      },
      // 校验数据
      validation(trigger, callback = () => {
      }) {
        this.fieldValue = this.getData(this.parent.model, this.prop);
        let rules2 = this.getFilteredRule(trigger);
        if (!rules2 || rules2.length === 0) {
          return callback("");
        }
        this.validateState = "validating";
        let validator = new Schema({
          [this.prop]: rules2
        });
        validator.validate({
          [this.prop]: this.fieldValue
        }, {
          firstFields: true
        }, (errors, fields) => {
          this.validateState = !errors ? "success" : "error";
          this.validateMessage = errors ? errors[0].message : "";
          let field = errors ? errors[0].field : "";
          callback(this.validateMessage, {
            state: this.validateState,
            key: field,
            msg: this.validateMessage
          });
        });
      },
      // 清空当前的u-form-item
      resetField() {
        this.setData(this.parent.model, this.prop, this.initialValue);
        this.validateState = "success";
      }
    },
    // 组件创建完成时，将当前实例保存到u-form中
    mounted() {
      this.parent = this.$u.$parent.call(this, "u-form");
      if (this.parent) {
        Object.keys(this.parentData).map((key) => {
          this.parentData[key] = this.parent[key];
        });
        if (this.prop) {
          this.parent.fields.push(this);
          this.errorType = this.parent.errorType;
          this.initialValue = this.fieldValue;
          this.$nextTick(() => {
            this.setRules();
          });
        }
      }
    },
    beforeUnmount() {
      if (this.parent && this.prop) {
        this.parent.fields.map((item, index2) => {
          if (item === this)
            this.parent.fields.splice(index2, 1);
        });
      }
    }
  };
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_text = index$i;
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_1$1);
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["u-form-item", { "u-border-bottom": $options.elBorderBottom, "u-form-item__border-bottom--error": $data.validateState === "error" && $options.showError("border-bottom") }])
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, {
          class: "u-form-item__body",
          style: vue.normalizeStyle({
            flexDirection: $options.elLabelPosition == "left" ? "row" : "column"
          })
        }, {
          default: vue.withCtx(() => [
            vue.createCommentVNode(' 微信小程序中，将一个参数设置空字符串，结果会变成字符串"true" '),
            vue.createVNode(_component_v_uni_view, {
              class: "u-form-item--left",
              style: vue.normalizeStyle({
                width: $options.uLabelWidth,
                flex: `0 0 ${$options.uLabelWidth}`,
                marginBottom: $options.elLabelPosition == "left" ? 0 : "10rpx"
              })
            }, {
              default: vue.withCtx(() => [
                vue.createCommentVNode(" 为了块对齐 "),
                $props.required || $props.leftIcon || $props.label ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                  key: 0,
                  class: "u-form-item--left__content"
                }, {
                  default: vue.withCtx(() => [
                    vue.createCommentVNode(" nvue不支持伪元素before "),
                    $props.required ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                      key: 0,
                      class: "u-form-item--left__content--required"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("*")
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $props.leftIcon ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                      key: 1,
                      class: "u-form-item--left__content__icon"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_icon, {
                          name: $props.leftIcon,
                          "custom-style": $props.leftIconStyle
                        }, null, 8, ["name", "custom-style"])
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    vue.createVNode(_component_v_uni_view, {
                      class: "u-form-item--left__content__label",
                      style: vue.normalizeStyle([$options.elLabelStyle, {
                        "justify-content": $options.elLabelAlign == "left" ? "flex-start" : $options.elLabelAlign == "center" ? "center" : "flex-end"
                      }])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString($props.label),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["style"])
                  ]),
                  _: 1
                  /* STABLE */
                })) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            }, 8, ["style"]),
            vue.createVNode(_component_v_uni_view, { class: "u-form-item--right u-flex" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, { class: "u-form-item--right__content" }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_view, {
                      class: "u-form-item--right__content__slot",
                      style: vue.normalizeStyle($options.elLabelPosition == "left" && $options.elInputAlign == "right" ? "text-align:right;display: inline-block;line-height:initial;" : "")
                    }, {
                      default: vue.withCtx(() => [
                        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                      ]),
                      _: 3
                      /* FORWARDED */
                    }, 8, ["style"]),
                    _ctx.$slots.right || $props.rightIcon ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                      key: 0,
                      class: "u-form-item--right__content__icon u-flex"
                    }, {
                      default: vue.withCtx(() => [
                        $props.rightIcon ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                          key: 0,
                          "custom-style": $props.rightIconStyle,
                          name: $props.rightIcon
                        }, null, 8, ["custom-style", "name"])) : vue.createCommentVNode("v-if", true),
                        vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
                      ]),
                      _: 3
                      /* FORWARDED */
                    })) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 3
                  /* FORWARDED */
                })
              ]),
              _: 3
              /* FORWARDED */
            })
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["style"]),
        $data.validateState === "error" && $options.showError("message") ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 0,
          class: "u-form-item__message",
          style: vue.normalizeStyle({
            paddingLeft: $options.elLabelPosition == "left" ? _ctx.$u.addUnit($options.elLabelWidth) : "0",
            textAlign: $options.elInputAlign == "right" ? "right" : "left"
          })
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString($data.validateMessage),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["style"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["class"]);
  }
  const __easycom_3 = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$q], ["__scopeId", "data-v-79cafb1d"]]);
  const uCheckbox_vue_vue_type_style_index_0_scoped_409cd9b2_lang = "";
  const _sfc_main$p = {
    name: "u-checkbox",
    emits: ["update:modelValue", "input", "change"],
    props: {
      // 是否为选中状态
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // checkbox的名称
      name: {
        type: [String, Number],
        default: ""
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: ""
      },
      // 是否禁用
      disabled: {
        type: [String, Boolean],
        default: ""
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: [String, Boolean],
        default: ""
      },
      // 选中状态下的颜色，如设置此值，将会覆盖checkboxGroup的activeColor值
      activeColor: {
        type: String,
        default: ""
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: ""
      },
      // label的字体大小，rpx单位
      labelSize: {
        type: [String, Number],
        default: ""
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: ""
      },
      // 设置不确定状态，仅负责样式控制
      indeterminate: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        parentDisabled: false,
        newParams: {}
      };
    },
    created() {
      this.parent = this.$u.$parent.call(this, "u-checkbox-group");
      this.parent && this.parent.children.push(this);
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 是否禁用，如果父组件u-checkbox-group禁用的话，将会忽略子组件的配置
      isDisabled() {
        return this.disabled !== "" ? this.disabled : this.parent ? this.parent.disabled : false;
      },
      // 是否禁用label点击
      isLabelDisabled() {
        return this.labelDisabled !== "" ? this.labelDisabled : this.parent ? this.parent.labelDisabled : false;
      },
      // 组件尺寸，对应size的值，默认值为34rpx
      checkboxSize() {
        return this.size ? this.size : this.parent ? this.parent.size : 34;
      },
      // 组件的勾选图标的尺寸，默认20
      checkboxIconSize() {
        return this.iconSize ? this.iconSize : this.parent ? this.parent.iconSize : 20;
      },
      // 组件选中激活时的颜色
      elActiveColor() {
        return this.activeColor ? this.activeColor : this.parent ? this.parent.activeColor : "primary";
      },
      // 组件的形状
      elShape() {
        return this.shape ? this.shape : this.parent ? this.parent.shape : "square";
      },
      iconStyle() {
        let style = {};
        if (this.elActiveColor && this.valueCom && !this.isDisabled) {
          style.borderColor = this.elActiveColor;
          style.backgroundColor = this.elActiveColor;
        }
        style.width = this.$u.addUnit(this.checkboxSize);
        style.height = this.$u.addUnit(this.checkboxSize);
        return style;
      },
      // checkbox内部的勾选图标，如果选中状态，为白色，否则为透明色即可
      iconColor() {
        if (this.indeterminate)
          return "#ffffff";
        return this.valueCom ? "#ffffff" : "transparent";
      },
      iconClass() {
        let classes = [];
        classes.push("u-checkbox__icon-wrap--" + this.elShape);
        if (this.valueCom == true)
          classes.push("u-checkbox__icon-wrap--checked");
        if (this.isDisabled)
          classes.push("u-checkbox__icon-wrap--disabled");
        if (this.valueCom && this.isDisabled)
          classes.push("u-checkbox__icon-wrap--disabled--checked");
        if (this.indeterminate === true)
          classes.push("u-checkbox__icon-wrap--indeterminate");
        return classes.join(" ");
      },
      checkboxStyle() {
        let style = {};
        if (this.parent && this.parent.width) {
          style.width = this.parent.width;
          style.flex = `0 0 ${this.parent.width}`;
        }
        if (this.parent && this.parent.wrap) {
          style.width = "100%";
          style.flex = "0 0 100%";
        }
        return style;
      }
    },
    mounted() {
      this._emitEvent();
    },
    watch: {
      valueCom: {
        handler: function(newVal, oldVal) {
          this._emitEvent();
        }
      }
    },
    methods: {
      _emitEvent() {
        let value = this.valueCom;
        let obj = {
          value,
          name: this.name
        };
        if (this.parent && this.parent.emitEvent)
          this.parent.emitEvent(obj);
      },
      onClickLabel() {
        if (!this.isLabelDisabled && !this.isDisabled) {
          this.setValue();
        }
      },
      toggle() {
        if (!this.isDisabled) {
          this.setValue();
        }
      },
      emitEvent() {
        let obj = {
          value: !this.valueCom,
          name: this.name
        };
        this.$emit("change", obj);
        if (this.parent && this.parent.emitEvent)
          this.parent.emitEvent(obj);
      },
      // 设置input的值，这里通过input事件，设置通过v-model绑定的组件的值
      setValue() {
        let value = this.valueCom;
        let checkedNum = 0;
        if (this.parent && this.parent.children) {
          this.parent.children.map((val) => {
            if (val.value)
              checkedNum++;
          });
        }
        if (value == true) {
          this.emitEvent();
          this.$emit("input", !value);
          this.$emit("update:modelValue", !value);
        } else {
          if (this.parent && checkedNum >= this.parent.max) {
            return this.$u.toast(`最多可选${this.parent.max}项`);
          }
          this.emitEvent();
          this.$emit("input", !value);
          this.$emit("update:modelValue", !value);
        }
      }
    }
  };
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_1$1);
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: "u-checkbox",
      style: vue.normalizeStyle([$options.checkboxStyle])
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, {
          class: vue.normalizeClass(["u-checkbox__icon-wrap", [$options.iconClass]]),
          onClick: $options.toggle,
          style: vue.normalizeStyle([$options.iconStyle])
        }, {
          default: vue.withCtx(() => [
            $props.indeterminate ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
              key: 0,
              class: "u-checkbox__icon-wrap__icon",
              name: "minus",
              size: $options.checkboxIconSize,
              color: $options.iconColor
            }, null, 8, ["size", "color"])) : (vue.openBlock(), vue.createBlock(_component_u_icon, {
              key: 1,
              class: "u-checkbox__icon-wrap__icon",
              name: "checkbox-mark",
              size: $options.checkboxIconSize,
              color: $options.iconColor
            }, null, 8, ["size", "color"]))
          ]),
          _: 1
          /* STABLE */
        }, 8, ["onClick", "class", "style"]),
        vue.createVNode(_component_v_uni_view, {
          class: "u-checkbox__label",
          onClick: $options.onClickLabel,
          style: vue.normalizeStyle({
            fontSize: _ctx.$u.addUnit($props.labelSize)
          })
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["onClick", "style"])
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["style"]);
  }
  const __easycom_4$1 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$p], ["__scopeId", "data-v-409cd9b2"]]);
  const uCheckboxGroup_vue_vue_type_style_index_0_scoped_83093792_lang = "";
  const _sfc_main$o = {
    name: "u-checkbox-group",
    emits: ["update:modelValue", "input", "change"],
    mixins: [Emitter],
    props: {
      // 匹配某一个radio组件，如果某个radio的name值等于此值，那么这个radio就被会选中
      value: {
        type: [String, Number, Array, Boolean],
        default: ""
      },
      modelValue: {
        type: [String, Number, Array, Boolean],
        default: ""
      },
      // 最多能选中多少个checkbox
      max: {
        type: [Number, String],
        default: 999
      },
      // 所有选中项的 name
      // value: {
      // 	default: Array,
      // 	default() {
      // 		return []
      // 	}
      // },
      // 是否禁用所有复选框
      disabled: {
        type: Boolean,
        default: false
      },
      // 在表单内提交时的标识符
      name: {
        type: [Boolean, String],
        default: ""
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: Boolean,
        default: false
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: "square"
      },
      // 选中状态下的颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: 34
      },
      // 每个checkbox占u-checkbox-group的宽度
      width: {
        type: String,
        default: "auto"
      },
      // 是否每个checkbox都换行
      wrap: {
        type: Boolean,
        default: false
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: 20
      }
    },
    data() {
      return {
        values: [],
        uFromData: {
          inputAlign: "left"
        }
      };
    },
    created() {
      this.children = [];
    },
    mounted() {
      let parent = this.$u.$parent.call(this, "u-form");
      if (parent) {
        Object.keys(this.uFromData).map((key) => {
          this.uFromData[key] = parent[key];
        });
      }
    },
    methods: {
      emitEvent(obj) {
        let values = this.values || [];
        if (obj.value) {
          let index2 = values.indexOf(obj.name);
          if (index2 === -1) {
            values.push(obj.name);
          }
        } else {
          let index2 = values.indexOf(obj.name);
          if (index2 > -1) {
            values.splice(index2, 1);
          }
        }
        this.$emit("change", values);
        this.$emit("input", values);
        this.$emit("update:modelValue", values);
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldChange", values);
        }, 60);
      },
      _emitEvent(obj) {
        let values = this.values || [];
        if (obj.value) {
          let index2 = values.indexOf(obj.name);
          if (index2 === -1) {
            values.push(obj.name);
          }
        } else {
          let index2 = values.indexOf(obj.name);
          if (index2 > -1) {
            values.splice(index2, 1);
          }
        }
      }
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["u-checkbox-group u-clearfix", $data.uFromData.inputAlign == "right" ? "flex-end" : ""])
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["class"]);
  }
  const __easycom_5 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$o], ["__scopeId", "data-v-83093792"]]);
  const uRadio_vue_vue_type_style_index_0_scoped_0b27b50c_lang = "";
  const _sfc_main$n = {
    name: "u-radio",
    emits: ["change"],
    props: {
      // radio的名称
      name: {
        type: [String, Number],
        default: ""
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: 34
      },
      // 形状，square为方形，circle为原型
      shape: {
        type: String,
        default: ""
      },
      // 是否禁用
      disabled: {
        type: [String, Boolean],
        default: ""
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: [String, Boolean],
        default: ""
      },
      // 选中状态下的颜色，如设置此值，将会覆盖parent的activeColor值
      activeColor: {
        type: String,
        default: ""
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: ""
      },
      // label的字体大小，rpx单位
      labelSize: {
        type: [String, Number],
        default: ""
      }
    },
    data() {
      return {
        // 父组件的默认值，因为头条小程序不支持在computed中使用this.parent.shape的形式
        // 故只能使用如此方法
        parentData: {
          iconSize: null,
          labelDisabled: null,
          disabled: null,
          shape: null,
          activeColor: null,
          size: null,
          width: null,
          height: null,
          value: null,
          wrap: null,
          modelValue: null
        }
      };
    },
    created() {
      this.parent = false;
      this.updateParentData();
      this.parent.children.push(this);
    },
    computed: {
      // 是否禁用，如果父组件u-raios-group禁用的话，将会忽略子组件的配置
      elDisabled() {
        return this.disabled !== "" ? this.disabled : this.parentData.disabled !== null ? this.parentData.disabled : false;
      },
      // 是否禁用label点击
      elLabelDisabled() {
        return this.labelDisabled !== "" ? this.labelDisabled : this.parentData.labelDisabled !== null ? this.parentData.labelDisabled : false;
      },
      // 组件尺寸，对应size的值，默认值为34rpx
      elSize() {
        return this.size ? this.size : this.parentData.size ? this.parentData.size : 34;
      },
      // 组件的勾选图标的尺寸，默认20
      elIconSize() {
        return this.iconSize ? this.iconSize : this.parentData.iconSize ? this.parentData.iconSize : 20;
      },
      // 组件选中激活时的颜色
      elActiveColor() {
        return this.activeColor ? this.activeColor : this.parentData.activeColor ? this.parentData.activeColor : "primary";
      },
      // 组件的形状
      elShape() {
        return this.shape ? this.shape : this.parentData.shape ? this.parentData.shape : "circle";
      },
      // 设置radio的状态，要求radio的name等于parent的value时才为选中状态
      iconStyle() {
        let style = {};
        if (this.elActiveColor && this.parentData.value === this.name && !this.elDisabled) {
          style.borderColor = this.elActiveColor;
          style.backgroundColor = this.elActiveColor;
        }
        style.width = this.$u.addUnit(this.elSize);
        style.height = this.$u.addUnit(this.elSize);
        return style;
      },
      iconColor() {
        return this.name === this.parentData.value ? "#ffffff" : "transparent";
      },
      iconClass() {
        let classes = [];
        classes.push("u-radio__icon-wrap--" + this.elShape);
        if (this.name === this.parentData.value)
          classes.push("u-radio__icon-wrap--checked");
        if (this.elDisabled)
          classes.push("u-radio__icon-wrap--disabled");
        if (this.name === this.parentData.value && this.elDisabled)
          classes.push("u-radio__icon-wrap--disabled--checked");
        return classes.join(" ");
      },
      radioStyle() {
        let style = {};
        if (this.parentData.width) {
          style.width = this.$u.addUnit(this.parentData.width);
          style.flex = `0 0 ${this.$u.addUnit(this.parentData.width)}`;
        }
        if (this.parentData.wrap) {
          style.width = "100%";
          style.flex = "0 0 100%";
        }
        return style;
      }
    },
    methods: {
      updateParentData() {
        this.getParentData("u-radio-group");
      },
      onClickLabel() {
        if (!this.elLabelDisabled && !this.elDisabled) {
          this.setRadioCheckedStatus();
        }
      },
      toggle() {
        if (!this.elDisabled) {
          this.setRadioCheckedStatus();
        }
      },
      emitEvent() {
        if (this.parentData.value != this.name)
          this.$emit("change", this.name);
      },
      // 改变组件选中状态
      // 这里的改变的依据是，更改本组件的parentData.value值为本组件的name值，同时通过父组件遍历所有u-radio实例
      // 将本组件外的其他u-radio的parentData.value都设置为空(由computed计算后，都被取消选中状态)，因而只剩下一个为选中状态
      setRadioCheckedStatus() {
        this.emitEvent();
        if (this.parent) {
          this.parent.setValue(this.name);
          this.parentData.value = this.name;
        }
      }
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_1$1);
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: "u-radio",
      style: vue.normalizeStyle([$options.radioStyle])
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, {
          class: vue.normalizeClass(["u-radio__icon-wrap", [$options.iconClass]]),
          onClick: $options.toggle,
          style: vue.normalizeStyle([$options.iconStyle])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_u_icon, {
              class: "u-radio__icon-wrap__icon",
              name: "checkbox-mark",
              size: $options.elIconSize,
              color: $options.iconColor
            }, null, 8, ["size", "color"])
          ]),
          _: 1
          /* STABLE */
        }, 8, ["onClick", "class", "style"]),
        vue.createVNode(_component_v_uni_view, {
          class: "u-radio__label",
          onClick: $options.onClickLabel,
          style: vue.normalizeStyle({ fontSize: _ctx.$u.addUnit($props.labelSize) })
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["onClick", "style"])
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["style"]);
  }
  const __easycom_6 = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$n], ["__scopeId", "data-v-0b27b50c"]]);
  const uRadioGroup_vue_vue_type_style_index_0_scoped_2085a2cd_lang = "";
  const _sfc_main$m = {
    name: "u-radio-group",
    emits: ["update:modelValue", "input", "change"],
    mixins: [Emitter],
    props: {
      // 匹配某一个radio组件，如果某个radio的name值等于此值，那么这个radio就被会选中
      value: {
        type: [String, Number],
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      // 是否禁用所有单选框
      disabled: {
        type: Boolean,
        default: false
      },
      // 选中状态下的颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: 34
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: Boolean,
        default: false
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: "circle"
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: 20
      },
      // 每个checkbox占u-checkbox-group的宽度
      width: {
        type: [String, Number],
        default: "auto"
      },
      // 是否每个checkbox都换行
      wrap: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        uFromData: {
          inputAlign: "left"
        }
      };
    },
    created() {
      this.children = [];
    },
    mounted() {
      let parent = this.$u.$parent.call(this, "u-form");
      if (parent) {
        Object.keys(this.uFromData).map((key) => {
          this.uFromData[key] = parent[key];
        });
      }
    },
    watch: {
      // 当父组件需要子组件需要共享的参数发生了变化，手动通知子组件
      parentData() {
        if (this.children.length) {
          this.children.map((child) => {
            typeof child.updateParentData == "function" && child.updateParentData();
          });
        }
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 这里computed的变量，都是子组件u-radio需要用到的，由于头条小程序的兼容性差异，子组件无法实时监听父组件参数的变化
      // 所以需要手动通知子组件，这里返回一个parentData变量，供watch监听，在其中去通知每一个子组件重新从父组件(u-radio-group)
      // 拉取父组件新的变化后的参数
      parentData() {
        return [
          this.value,
          this.disabled,
          this.activeColor,
          this.size,
          this.labelDisabled,
          this.shape,
          this.iconSize,
          this.width,
          this.wrap,
          this.modelValue
        ];
      }
    },
    methods: {
      // 该方法有子组件radio调用，当一个radio被选中的时候，给父组件设置value值(props传递的value)
      setValue(val) {
        this.children.map((child) => {
          if (child.parentData.value != val)
            child.parentData.value = "";
        });
        this.$emit("input", val);
        this.$emit("update:modelValue", val);
        this.$emit("change", val);
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldChange", val);
        }, 60);
      }
    }
  };
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["u-radio-group u-clearfix", $data.uFromData.inputAlign == "right" ? "flex-end" : ""])
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["class"]);
  }
  const __easycom_7 = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$m], ["__scopeId", "data-v-2085a2cd"]]);
  const modal = "";
  const swiper = "";
  const swiperItem = "";
  const movableArea = "";
  const movableView = "";
  const uLineProgress_vue_vue_type_style_index_0_scoped_2f201511_lang = "";
  const _sfc_main$l = {
    name: "u-line-progress",
    props: {
      // 两端是否显示半圆形
      round: {
        type: Boolean,
        default: true
      },
      // 主题颜色
      type: {
        type: String,
        default: ""
      },
      // 激活部分的颜色
      activeColor: {
        type: String,
        default: "#19be6b"
      },
      inactiveColor: {
        type: String,
        default: "#ececec"
      },
      // 进度百分比，数值
      percent: {
        type: Number,
        default: 0
      },
      // 是否在进度条内部显示百分比的值
      showPercent: {
        type: Boolean,
        default: true
      },
      // 进度条的高度，单位rpx
      height: {
        type: [Number, String],
        default: 28
      },
      // 是否显示条纹
      striped: {
        type: Boolean,
        default: false
      },
      // 条纹是否显示活动状态
      stripedActive: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {};
    },
    computed: {
      progressStyle() {
        let style = {};
        style.width = this.percent + "%";
        if (this.activeColor)
          style.backgroundColor = this.activeColor;
        return style;
      }
    },
    methods: {}
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: "u-progress",
      style: vue.normalizeStyle({
        borderRadius: $props.round ? "100rpx" : 0,
        height: $props.height + "rpx",
        backgroundColor: $props.inactiveColor
      })
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, {
          class: vue.normalizeClass([[
            $props.type ? `u-type-${$props.type}-bg` : "",
            $props.striped ? "u-striped" : "",
            $props.striped && $props.stripedActive ? "u-striped-active" : ""
          ], "u-active"]),
          style: vue.normalizeStyle([$options.progressStyle])
        }, {
          default: vue.withCtx(() => [
            _ctx.$slots.default || _ctx.$slots.$default ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : $props.showPercent ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createTextVNode(
                  vue.toDisplayString($props.percent + "%"),
                  1
                  /* TEXT */
                )
              ],
              64
              /* STABLE_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["class", "style"])
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["style"]);
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$l], ["__scopeId", "data-v-2f201511"]]);
  const uUpload_vue_vue_type_style_index_0_scoped_11251491_lang = "";
  const _sfc_main$k = {
    name: "u-upload",
    emits: ["update:file-list", "on-oversize", "on-list-change", "on-preview", "on-remove", "on-success", "on-change", "on-error", "on-progress", "on-uploaded", "on-choose-complete", "on-choose-fail"],
    props: {
      //是否显示组件自带的图片预览功能
      showUploadList: {
        type: Boolean,
        default: true
      },
      // 后端地址
      action: {
        type: String,
        default: ""
      },
      // 最大上传数量
      maxCount: {
        type: [String, Number],
        default: 52
      },
      //  是否显示进度条
      showProgress: {
        type: Boolean,
        default: true
      },
      // 是否启用
      disabled: {
        type: Boolean,
        default: false
      },
      // 预览上传的图片时的裁剪模式，和image组件mode属性一致
      imageMode: {
        type: String,
        default: "aspectFill"
      },
      // 头部信息
      header: {
        type: Object,
        default() {
          return {};
        }
      },
      // 额外携带的参数
      formData: {
        type: Object,
        default() {
          return {};
        }
      },
      // 上传的文件字段名
      name: {
        type: String,
        default: "file"
      },
      // 所选的图片的尺寸, 可选值为original compressed
      sizeType: {
        type: Array,
        default() {
          return ["original", "compressed"];
        }
      },
      sourceType: {
        type: Array,
        default() {
          return ["album", "camera"];
        }
      },
      // 是否在点击预览图后展示全屏图片预览
      previewFullImage: {
        type: Boolean,
        default: true
      },
      // 是否开启图片多选，部分安卓机型不支持
      multiple: {
        type: Boolean,
        default: true
      },
      // 是否展示删除按钮
      deletable: {
        type: Boolean,
        default: true
      },
      // 文件大小限制，单位为byte
      maxSize: {
        type: [String, Number],
        default: Number.MAX_VALUE
      },
      // 显示已上传的文件列表
      fileList: {
        type: Array,
        default() {
          return [];
        }
      },
      // 上传区域的提示文字
      uploadText: {
        type: String,
        default: "选择图片"
      },
      // 是否自动上传
      autoUpload: {
        type: Boolean,
        default: true
      },
      // 是否显示toast消息提示
      showTips: {
        type: Boolean,
        default: true
      },
      // 是否通过slot自定义传入选择图标的按钮
      customBtn: {
        type: Boolean,
        default: false
      },
      // 内部预览图片区域和选择图片按钮的区域宽度
      width: {
        type: [String, Number],
        default: 200
      },
      // 内部预览图片区域和选择图片按钮的区域高度
      height: {
        type: [String, Number],
        default: 200
      },
      // 右上角关闭按钮的背景颜色
      delBgColor: {
        type: String,
        default: "#fa3534"
      },
      // 右上角关闭按钮的叉号图标的颜色
      delColor: {
        type: String,
        default: "#ffffff"
      },
      // 右上角删除图标名称，只能为uView内置图标
      delIcon: {
        type: String,
        default: "close"
      },
      // 右下角成功图标名称，只能为uView内置图标
      successIcon: {
        type: String,
        default: "checkbox-mark"
      },
      // 右下角成功的叉号图标的颜色
      successColor: {
        type: String,
        default: "#ffffff"
      },
      // 如果上传后的返回值为json字符串，是否自动转json
      toJson: {
        type: Boolean,
        default: true
      },
      // 上传前的钩子，每个文件上传前都会执行
      beforeUpload: {
        type: Function,
        default: null
      },
      // 移除文件前的钩子
      beforeRemove: {
        type: Function,
        default: null
      },
      // 允许上传的图片后缀
      limitType: {
        type: Array,
        default() {
          return ["png", "jpg", "jpeg", "webp", "gif", "image"];
        }
      },
      // 在各个回调事件中的最后一个参数返回，用于区别是哪一个组件的事件
      index: {
        type: [Number, String],
        default: ""
      }
    },
    mounted() {
    },
    data() {
      return {
        lists: [],
        isInCount: true,
        uploading: false
      };
    },
    watch: {
      fileList: {
        immediate: true,
        handler(val) {
          let that = this;
          let lists = JSON.parse(JSON.stringify(that.lists));
          val.map((value) => {
            let tmp = lists.some((val2) => {
              return val2.url == value.url;
            });
            if (!tmp) {
              lists.push({ url: value.url, error: false, progress: 100 });
            }
          });
          that.lists = JSON.parse(JSON.stringify(lists));
        }
      },
      // 监听lists的变化，发出事件
      lists: {
        deep: true,
        handler(n) {
          this.$emit("update:file-list", n);
          this.$emit("on-list-change", n, this.index);
        }
      }
    },
    methods: {
      // 清除列表
      clear() {
        this.lists = [];
      },
      // 重新上传队列中上传失败的所有文件
      reUpload() {
        this.uploadFile();
      },
      // 选择图片
      selectFile() {
        let that = this;
        if (that.disabled)
          return;
        const { name = "", maxCount, multiple, maxSize, sizeType, camera, compressed, maxDuration, sourceType } = that;
        let chooseFile = null;
        let lists = JSON.parse(JSON.stringify(that.lists));
        const newMaxCount = maxCount - lists.length;
        chooseFile = new Promise((resolve, reject) => {
          chooseImage({
            count: multiple ? newMaxCount > 9 ? 9 : newMaxCount : 1,
            sourceType,
            sizeType,
            success: resolve,
            fail: reject
          });
        });
        chooseFile.then((res) => {
          let listOldLength = that.lists.length;
          res.tempFiles.map((val, index2) => {
            if (!that.checkFileExt(val))
              return;
            if (!multiple && index2 >= 1)
              return;
            if (val.size > maxSize) {
              that.$emit("on-oversize", val, that.lists, that.index);
              that.showToast("超出允许的文件大小");
            } else {
              if (maxCount <= lists.length) {
                that.$emit("on-exceed", val, that.lists, that.index);
                that.showToast("超出最大允许的文件个数");
                return;
              }
              lists.push({
                url: val.path,
                progress: 0,
                error: false,
                file: val
              });
            }
          });
          this.deepClone(lists, that.lists);
          that.$emit("on-choose-complete", that.lists, that.index);
          if (that.autoUpload)
            that.uploadFile(listOldLength);
        }).catch((error2) => {
          that.$emit("on-choose-fail", error2);
        });
      },
      // 提示用户消息
      showToast(message, force = false) {
        if (this.showTips || force) {
          showToast({
            title: message,
            icon: "none"
          });
        }
      },
      // 该方法供用户通过ref调用，手动上传
      upload() {
        this.uploadFile();
      },
      // 对失败的图片重新上传
      retry(index2) {
        this.lists[index2].progress = 0;
        this.lists[index2].error = false;
        this.lists[index2].response = null;
        showLoading({
          title: "重新上传"
        });
        this.uploadFile(index2);
      },
      // 上传图片
      async uploadFile(index2 = 0) {
        if (this.disabled)
          return;
        if (this.uploading)
          return;
        if (index2 >= this.lists.length) {
          this.$emit("on-uploaded", this.lists, this.index);
          return;
        }
        if (this.lists[index2].progress == 100) {
          if (this.autoUpload == false)
            this.uploadFile(index2 + 1);
          return;
        }
        if (this.beforeUpload && typeof this.beforeUpload === "function") {
          let beforeResponse = this.beforeUpload.bind(this.$u.$parent.call(this))(index2, this.lists);
          if (!!beforeResponse && typeof beforeResponse.then === "function") {
            await beforeResponse.then((res) => {
            }).catch((err) => {
              return this.uploadFile(index2 + 1);
            });
          } else if (beforeResponse === false) {
            return this.uploadFile(index2 + 1);
          } else
            ;
        }
        if (!this.action) {
          this.showToast("请配置上传地址", true);
          return;
        }
        this.lists[index2].error = false;
        this.uploading = true;
        const task = uploadFile({
          url: this.action,
          filePath: this.lists[index2].url,
          name: this.name,
          formData: this.formData,
          header: this.header,
          success: (res) => {
            let data = this.toJson && this.$u.test.jsonString(res.data) ? JSON.parse(res.data) : res.data;
            if (![200, 201, 204].includes(res.statusCode)) {
              this.uploadError(index2, data);
            } else {
              this.lists[index2].response = data;
              this.lists[index2].progress = 100;
              this.lists[index2].error = false;
              this.$emit("on-success", data, index2, this.lists, this.index);
            }
          },
          fail: (e2) => {
            this.uploadError(index2, e2);
          },
          complete: (res) => {
            hideLoading();
            this.uploading = false;
            this.uploadFile(index2 + 1);
            this.$emit("on-change", res, index2, this.lists, this.index);
          }
        });
        task.onProgressUpdate((res) => {
          if (res.progress > 0) {
            this.lists[index2].progress = res.progress;
            this.$emit("on-progress", res, index2, this.lists, this.index);
          }
        });
      },
      // 上传失败
      uploadError(index2, err) {
        this.lists[index2].progress = 0;
        this.lists[index2].error = true;
        this.lists[index2].response = null;
        this.$emit("on-error", err, index2, this.lists, this.index);
        this.showToast("上传失败，请重试");
      },
      // 删除一个图片
      deleteItem(index2) {
        showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: async (res) => {
            if (res.confirm) {
              if (this.beforeRemove && typeof this.beforeRemove === "function") {
                let beforeResponse = this.beforeRemove.bind(this.$u.$parent.call(this))(index2, this.lists);
                if (!!beforeResponse && typeof beforeResponse.then === "function") {
                  await beforeResponse.then((res2) => {
                    this.handlerDeleteItem(index2);
                  }).catch((err) => {
                    this.showToast("已终止移除");
                  });
                } else if (beforeResponse === false) {
                  this.showToast("已终止移除");
                } else {
                  this.handlerDeleteItem(index2);
                }
              } else {
                this.handlerDeleteItem(index2);
              }
            }
          }
        });
      },
      // 执行移除图片的动作，上方代码只是判断是否可以移除
      handlerDeleteItem(index2) {
        if (this.lists[index2].progress < 100 && this.lists[index2].progress > 0) {
          typeof this.lists[index2].uploadTask != "undefined" && this.lists[index2].uploadTask.abort();
        }
        this.lists.splice(index2, 1);
        this.$forceUpdate();
        this.$emit("on-remove", index2, this.lists, this.index);
      },
      // 用户通过ref手动的形式，移除一张图片
      remove(index2) {
        if (index2 >= 0 && index2 < this.lists.length) {
          this.lists.splice(index2, 1);
          this.$emit("on-list-change", this.lists, this.index);
        }
      },
      // 预览图片
      doPreviewImage(url2, index2) {
        if (!this.previewFullImage) {
          this.$emit("on-preview", url2, this.lists, this.index);
          return;
        }
        const images = this.lists.map((item) => item.url || item.path);
        previewImage({
          urls: images,
          current: url2,
          success: () => {
            this.$emit("on-preview", url2, this.lists, this.index);
          },
          fail: () => {
            showToast({
              title: "预览图片失败",
              icon: "none"
            });
          }
        });
      },
      // 判断文件后缀是否允许
      checkFileExt(file) {
        let noArrowExt = false;
        let fileExt = "";
        const reg = /.+\./;
        fileExt = file.name.replace(reg, "").toLowerCase();
        noArrowExt = this.limitType.some((ext) => {
          return ext.toLowerCase() === fileExt;
        });
        if (!noArrowExt)
          this.showToast(`不允许选择${fileExt}格式的文件`);
        return noArrowExt;
      },
      // 深拷贝
      deepClone(obj, newObj) {
        for (let k in obj) {
          const value = obj[k];
          if (Array.isArray(value)) {
            newObj[k] = [];
            this.deepClone(value, newObj[k]);
          } else if (value !== null && typeof value === "object") {
            newObj[k] = {};
            this.deepClone(value, newObj[k]);
          } else {
            newObj[k] = value;
          }
        }
      }
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_1$1);
    const _component_v_uni_view = index$g;
    const _component_u_line_progress = resolveEasycom(vue.resolveDynamicComponent("u-line-progress"), __easycom_2);
    const _component_v_uni_image = index$q;
    return !$props.disabled ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      key: 0,
      class: "u-upload"
    }, {
      default: vue.withCtx(() => [
        $props.showUploadList ? (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 0 },
          vue.renderList($data.lists, (item, index2) => {
            return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              class: "u-list-item u-preview-wrap",
              key: index2,
              style: vue.normalizeStyle({
                width: _ctx.$u.addUnit($props.width),
                height: _ctx.$u.addUnit($props.height)
              })
            }, {
              default: vue.withCtx(() => [
                $props.deletable ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                  key: 0,
                  class: "u-delete-icon",
                  onClick: vue.withModifiers(($event) => $options.deleteItem(index2), ["stop"]),
                  style: vue.normalizeStyle({
                    background: $props.delBgColor
                  })
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_icon, {
                      class: "u-icon",
                      name: $props.delIcon,
                      size: "20",
                      color: $props.delColor
                    }, null, 8, ["name", "color"])
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["onClick", "style"])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(' <view\r\n				v-if="item.progress >= 100"\r\n				class="u-success-icon"\r\n			>\r\n				<u-icon class="u-icon" :name="successIcon" size="20" :color="successColor"></u-icon>\r\n			</view> '),
                $props.showProgress && item.progress > 0 && item.progress != 100 && !item.error ? (vue.openBlock(), vue.createBlock(_component_u_line_progress, {
                  key: 1,
                  "show-percent": false,
                  height: "16",
                  class: "u-progress",
                  percent: item.progress
                }, null, 8, ["percent"])) : vue.createCommentVNode("v-if", true),
                item.error ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                  key: 2,
                  onClick: vue.withModifiers(($event) => $options.retry(index2), ["stop"]),
                  class: "u-error-btn"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("点击重试")
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["onClick"])) : vue.createCommentVNode("v-if", true),
                !item.isImage ? (vue.openBlock(), vue.createBlock(_component_v_uni_image, {
                  key: 3,
                  onClick: vue.withModifiers(($event) => $options.doPreviewImage(item.url || item.path, index2), ["stop"]),
                  class: "u-preview-image",
                  src: item.url || item.path,
                  mode: $props.imageMode
                }, null, 8, ["onClick", "src", "mode"])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["style"]);
          }),
          128
          /* KEYED_FRAGMENT */
        )) : vue.createCommentVNode("v-if", true),
        vue.renderSlot(_ctx.$slots, "file", { file: $data.lists }, void 0, true),
        $props.maxCount > $data.lists.length ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 1,
          style: { "display": "inline-block" },
          onClick: $options.selectFile
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "addBtn", {}, void 0, true),
            !$props.customBtn ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              key: 0,
              class: "u-list-item u-add-wrap",
              "hover-class": "u-add-wrap__hover",
              "hover-stay-time": "150",
              style: vue.normalizeStyle({
                width: _ctx.$u.addUnit($props.width),
                height: _ctx.$u.addUnit($props.height)
              })
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_icon, {
                  name: "plus",
                  class: "u-add-btn",
                  size: "40"
                }),
                vue.createVNode(_component_v_uni_view, { class: "u-add-tips" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString($props.uploadText),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["style"])) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["onClick"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 3
      /* FORWARDED */
    })) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_8 = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$k], ["__scopeId", "data-v-11251491"]]);
  const uForm_vue_vue_type_style_index_0_scoped_e007e42e_lang = "";
  const _sfc_main$j = {
    name: "u-form",
    props: {
      // 当前form的需要验证字段的集合
      model: {
        type: Object,
        default() {
          return {};
        }
      },
      // 验证规则
      // rules: {
      // 	type: [Object, Function, Array],
      // 	default() {
      // 		return {};
      // 	}
      // },
      // 有错误时的提示方式，message-提示信息，border-如果input设置了边框，变成呈红色，
      // border-bottom-下边框呈现红色，none-无提示
      errorType: {
        type: Array,
        default() {
          return ["message", "toast"];
        }
      },
      // 是否显示表单域的下划线边框
      borderBottom: {
        type: Boolean,
        default: true
      },
      // label的位置，left-左边，top-上边
      labelPosition: {
        type: String,
        default: "left"
      },
      // label的宽度，单位rpx
      labelWidth: {
        type: [String, Number],
        default: 90
      },
      // lable字体的对齐方式
      labelAlign: {
        type: String,
        default: "left"
      },
      // lable的样式，对象形式
      labelStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 表单内所有input的inputAlign属性的值
      inputAlign: {
        type: String,
        default: "left"
      },
      // 表单内所有input的clearable属性的值
      clearable: {
        type: Boolean,
        default: true
      }
    },
    provide() {
      return {
        uForm: this
      };
    },
    data() {
      return {
        rules: {}
      };
    },
    created() {
      this.fields = [];
    },
    methods: {
      setRules(rules2) {
        this.rules = rules2;
      },
      // 清空所有u-form-item组件的内容，本质上是调用了u-form-item组件中的resetField()方法
      resetFields() {
        this.fields.map((field) => {
          field.resetField();
        });
      },
      // 校验全部数据
      validate(callback) {
        return new Promise((resolve) => {
          let valid = true;
          let count = 0;
          let errorArr = [];
          let errorObjArr = [];
          this.fields.map((field) => {
            field.validation("", (errorMsg, errObj) => {
              if (errorMsg) {
                valid = false;
                errorArr.push(errorMsg);
                errorObjArr.push(errObj);
              }
              if (++count === this.fields.length) {
                resolve(valid, errorObjArr[0]);
                if (this.errorType.indexOf("none") === -1 && this.errorType.indexOf("toast") >= 0 && errorArr.length) {
                  this.$u.toast(errorArr[0]);
                }
                if (typeof callback == "function")
                  callback(valid, errorObjArr[0]);
              }
            });
          });
        });
      }
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, { class: "u-form" }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    });
  }
  const __easycom_9 = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$j], ["__scopeId", "data-v-e007e42e"]]);
  const uButton_vue_vue_type_style_index_0_scoped_f0d20854_lang = "";
  const _sfc_main$i = {
    name: "u-button",
    emits: ["click", "getphonenumber", "getuserinfo", "error", "opensetting", "launchapp", "chooseavatar"],
    props: {
      // 是否细边框
      hairLine: {
        type: Boolean,
        default: true
      },
      // 按钮的预置样式，default，primary，error，warning，success
      type: {
        type: String,
        default: "default"
      },
      // 按钮尺寸，default，medium，mini
      size: {
        type: String,
        default: "default"
      },
      // 按钮形状，circle（两边为半圆），square（带圆角）
      shape: {
        type: String,
        default: "square"
      },
      // 按钮是否镂空
      plain: {
        type: Boolean,
        default: false
      },
      // 是否禁止状态
      disabled: {
        type: Boolean,
        default: false
      },
      // 是否加载中
      loading: {
        type: Boolean,
        default: false
      },
      // 开放能力，具体请看uniapp稳定关于button组件部分说明
      // https://uniapp.dcloud.io/component/button
      openType: {
        type: String,
        default: ""
      },
      // 用于 <form> 组件，点击分别会触发 <form> 组件的 submit/reset 事件
      // 取值为submit（提交表单），reset（重置表单）
      formType: {
        type: String,
        default: ""
      },
      // 打开 APP 时，向 APP 传递的参数，open-type=launchApp时有效
      // 只微信小程序、QQ小程序有效
      appParameter: {
        type: String,
        default: ""
      },
      // 指定是否阻止本节点的祖先节点出现点击态，微信小程序有效
      hoverStopPropagation: {
        type: Boolean,
        default: false
      },
      // 指定返回用户信息的语言，zh_CN 简体中文，zh_TW 繁体中文，en 英文。只微信小程序有效
      lang: {
        type: String,
        default: "en"
      },
      // 会话来源，open-type="contact"时有效。只微信小程序有效
      sessionFrom: {
        type: String,
        default: ""
      },
      // 会话内消息卡片标题，open-type="contact"时有效
      // 默认当前标题，只微信小程序有效
      sendMessageTitle: {
        type: String,
        default: ""
      },
      // 会话内消息卡片点击跳转小程序路径，open-type="contact"时有效
      // 默认当前分享路径，只微信小程序有效
      sendMessagePath: {
        type: String,
        default: ""
      },
      // 会话内消息卡片图片，open-type="contact"时有效
      // 默认当前页面截图，只微信小程序有效
      sendMessageImg: {
        type: String,
        default: ""
      },
      // 是否显示会话内消息卡片，设置此参数为 true，用户进入客服会话会在右下角显示"可能要发送的小程序"提示，
      // 用户点击后可以快速发送小程序消息，open-type="contact"时有效
      showMessageCard: {
        type: Boolean,
        default: false
      },
      // 手指按（触摸）按钮时按钮时的背景颜色
      hoverBgColor: {
        type: String,
        default: ""
      },
      // 水波纹的背景颜色
      rippleBgColor: {
        type: String,
        default: ""
      },
      // 是否开启水波纹效果
      ripple: {
        type: Boolean,
        default: false
      },
      // 按下的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义样式，对象形式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 额外传参参数，用于小程序的data-xxx属性，通过target.dataset.name获取
      dataName: {
        type: String,
        default: ""
      },
      // 节流，一定时间内只能触发一次
      throttleTime: {
        type: [String, Number],
        default: 500
      },
      // 按住后多久出现点击态，单位毫秒
      hoverStartTime: {
        type: [String, Number],
        default: 20
      },
      // 手指松开后点击态保留时间，单位毫秒
      hoverStayTime: {
        type: [String, Number],
        default: 150
      },
      timerId: {
        type: [String, Number]
      }
    },
    computed: {
      // 当没有传bgColor变量时，按钮按下去的颜色类名
      getHoverClass() {
        if (this.loading || this.disabled || this.ripple || this.hoverClass)
          return "";
        let hoverClass = "";
        hoverClass = this.plain ? "u-" + this.type + "-plain-hover" : "u-" + this.type + "-hover";
        return hoverClass;
      },
      // 在'primary', 'success', 'error', 'warning'类型下，不显示边框，否则会造成四角有毛刺现象
      showHairLineBorder() {
        if (["primary", "success", "error", "warning"].indexOf(this.type) >= 0 && !this.plain) {
          return "";
        } else {
          return "u-hairline-border";
        }
      }
    },
    data() {
      let btnTimerId = this.timerId || "button_" + Math.floor(Math.random() * 1e8 + 0);
      return {
        btnTimerId,
        rippleTop: 0,
        // 水波纹的起点Y坐标到按钮上边界的距离
        rippleLeft: 0,
        // 水波纹起点X坐标到按钮左边界的距离
        fields: {},
        // 波纹按钮节点信息
        waveActive: false
        // 激活水波纹
      };
    },
    methods: {
      // 按钮点击
      click(e2) {
        this.$u.throttle(() => {
          if (this.loading === true || this.disabled === true)
            return;
          if (this.ripple) {
            this.waveActive = false;
            this.$nextTick(function() {
              this.getWaveQuery(e2);
            });
          }
          this.$emit("click", e2);
        }, this.throttleTime, true, this.btnTimerId);
      },
      // 查询按钮的节点信息
      getWaveQuery(e2) {
        this.getElQuery().then((res) => {
          let data = res[0];
          if (!data.width || !data.width)
            return;
          data.targetWidth = data.height > data.width ? data.height : data.width;
          if (!data.targetWidth)
            return;
          this.fields = data;
          let touchesX = "", touchesY = "";
          touchesX = e2.touches[0].clientX;
          touchesY = e2.touches[0].clientY;
          this.rippleTop = touchesY - data.top - data.targetWidth / 2;
          this.rippleLeft = touchesX - data.left - data.targetWidth / 2;
          this.$nextTick(() => {
            this.waveActive = true;
          });
        });
      },
      // 获取节点信息
      getElQuery() {
        return new Promise((resolve) => {
          let queryInfo = "";
          queryInfo = createSelectorQuery().in(this);
          queryInfo.select(".u-btn").boundingClientRect();
          queryInfo.exec((data) => {
            resolve(data);
          });
        });
      },
      // 下面为对接uniapp官方按钮开放能力事件回调的对接
      getphonenumber(res) {
        this.$emit("getphonenumber", res);
      },
      getuserinfo(res) {
        this.$emit("getuserinfo", res);
      },
      error(res) {
        this.$emit("error", res);
      },
      opensetting(res) {
        this.$emit("opensetting", res);
      },
      launchapp(res) {
        this.$emit("launchapp", res);
      },
      chooseavatar(res) {
        this.$emit("chooseavatar", res);
      }
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    const _component_v_uni_button = index$x;
    return vue.openBlock(), vue.createBlock(_component_v_uni_button, {
      id: "u-wave-btn",
      class: vue.normalizeClass(["u-btn u-line-1 u-fix-ios-appearance", [
        "u-size-" + $props.size,
        $props.plain ? "u-btn--" + $props.type + "--plain" : "",
        $props.loading ? "u-loading" : "",
        $props.shape == "circle" ? "u-round-circle" : "",
        $props.hairLine ? $options.showHairLineBorder : "u-btn--bold-border",
        "u-btn--" + $props.type,
        $props.disabled ? `u-btn--${$props.type}--disabled` : ""
      ]]),
      "hover-start-time": Number($props.hoverStartTime),
      "hover-stay-time": Number($props.hoverStayTime),
      disabled: $props.disabled,
      "form-type": $props.formType,
      "open-type": $props.openType,
      "app-parameter": $props.appParameter,
      "hover-stop-propagation": $props.hoverStopPropagation,
      "send-message-title": $props.sendMessageTitle,
      "send-message-path": "sendMessagePath",
      lang: $props.lang,
      "data-name": $props.dataName,
      "session-from": $props.sessionFrom,
      "send-message-img": $props.sendMessageImg,
      "show-message-card": $props.showMessageCard,
      onGetphonenumber: $options.getphonenumber,
      onGetuserinfo: $options.getuserinfo,
      onError: $options.error,
      onOpensetting: $options.opensetting,
      onLaunchapp: $options.launchapp,
      onChooseavatar: $options.chooseavatar,
      style: vue.normalizeStyle([$props.customStyle, {
        overflow: $props.ripple ? "hidden" : "visible"
      }]),
      onClick: _cache[0] || (_cache[0] = vue.withModifiers(($event) => $options.click($event), ["stop"])),
      "hover-class": $options.getHoverClass,
      loading: $props.loading
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
        $props.ripple ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 0,
          class: vue.normalizeClass(["u-wave-ripple", [$data.waveActive ? "u-wave-active" : ""]]),
          style: vue.normalizeStyle({
            top: $data.rippleTop + "px",
            left: $data.rippleLeft + "px",
            width: $data.fields.targetWidth + "px",
            height: $data.fields.targetWidth + "px",
            "background-color": $props.rippleBgColor || "rgba(0, 0, 0, 0.15)"
          })
        }, null, 8, ["class", "style"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["class", "hover-start-time", "hover-stay-time", "disabled", "form-type", "open-type", "app-parameter", "hover-stop-propagation", "send-message-title", "lang", "data-name", "session-from", "send-message-img", "show-message-card", "onGetphonenumber", "onGetuserinfo", "onError", "onOpensetting", "onLaunchapp", "onChooseavatar", "style", "hover-class", "loading"]);
  }
  const __easycom_10 = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$i], ["__scopeId", "data-v-f0d20854"]]);
  const uMask_vue_vue_type_style_index_0_scoped_47d621de_lang = "";
  const _sfc_main$h = {
    name: "u-mask",
    emits: ["click"],
    props: {
      // 是否显示遮罩
      show: {
        type: Boolean,
        default: false
      },
      // 层级z-index
      zIndex: {
        type: [Number, String],
        default: ""
      },
      // 用户自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 遮罩的动画样式， 是否使用使用zoom进行scale进行缩放
      zoom: {
        type: Boolean,
        default: true
      },
      // 遮罩的过渡时间，单位为ms
      duration: {
        type: [Number, String],
        default: 300
      },
      // 是否可以通过点击遮罩进行关闭
      maskClickAble: {
        type: Boolean,
        default: true
      },
      // 遮罩的模糊度
      blur: {
        type: [Number, String],
        default: 0
      }
    },
    data() {
      return {
        zoomStyle: {
          transform: ""
        },
        scale: "scale(1.2, 1.2)"
      };
    },
    watch: {
      show(n) {
        if (n && this.zoom) {
          this.zoomStyle.transform = "scale(1, 1)";
        } else if (!n && this.zoom) {
          this.zoomStyle.transform = this.scale;
        }
      }
    },
    computed: {
      maskStyle() {
        let style = {};
        style.backgroundColor = "rgba(0, 0, 0, 0.6)";
        if (this.show)
          style.zIndex = this.zIndex ? this.zIndex : this.$u.zIndex.mask;
        else
          style.zIndex = -1;
        style.transition = `all ${this.duration / 1e3}s ease-in-out`;
        if (Object.keys(this.customStyle).length)
          style = {
            ...style,
            ...this.customStyle
          };
        return style;
      },
      filterStyle() {
        let { blur } = this;
        let style = {};
        if (blur) {
          style.backdropFilter = `blur(${blur}rpx)`;
        }
        return style;
      }
    },
    methods: {
      click() {
        if (!this.maskClickAble)
          return;
        this.$emit("click");
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["u-mask", {
        "u-mask-zoom": $props.zoom,
        "u-mask-show": $props.show
      }]),
      "hover-stop-propagation": "",
      style: vue.normalizeStyle([$options.maskStyle, $data.zoomStyle, $options.filterStyle]),
      onClick: $options.click,
      onTouchmove: _cache[0] || (_cache[0] = vue.withModifiers(() => {
      }, ["stop", "prevent"]))
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["style", "onClick", "class"]);
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$h], ["__scopeId", "data-v-47d621de"]]);
  const scrollView = "";
  const uPopup_vue_vue_type_style_index_0_scoped_c725eed0_lang = "";
  const _sfc_main$g = {
    name: "u-popup",
    emits: ["update:modelValue", "input", "open", "close"],
    props: {
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      /**
       * 显示状态
       */
      show: {
        type: Boolean,
        default: false
      },
      /**
       * 弹出方向，left|right|top|bottom|center
       */
      mode: {
        type: String,
        default: "left"
      },
      /**
       * 是否显示遮罩
       */
      mask: {
        type: Boolean,
        default: true
      },
      // 抽屉的宽度(mode=left|right)，或者高度(mode=top|bottom)，单位rpx，或者"auto"
      // 或者百分比"50%"，表示由内容撑开高度或者宽度
      length: {
        type: [Number, String],
        default: "auto"
      },
      // 是否开启缩放动画，只在mode=center时有效
      zoom: {
        type: Boolean,
        default: true
      },
      // 是否开启底部安全区适配，开启的话，会在iPhoneX机型底部添加一定的内边距
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 是否可以通过点击遮罩进行关闭
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 用户自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 此为内部参数，不在文档对外使用，为了解决Picker和keyboard等融合了弹窗的组件
      // 对v-model双向绑定多层调用造成报错不能修改props值的问题
      popup: {
        type: Boolean,
        default: true
      },
      // 显示显示弹窗的圆角，单位rpx
      borderRadius: {
        type: [Number, String],
        default: 0
      },
      zIndex: {
        type: [Number, String],
        default: ""
      },
      // 是否显示关闭图标
      closeable: {
        type: Boolean,
        default: false
      },
      // 关闭图标的名称，只能uView的内置图标
      closeIcon: {
        type: String,
        default: "close"
      },
      // 自定义关闭图标位置，top-left为左上角，top-right为右上角，bottom-left为左下角，bottom-right为右下角
      closeIconPos: {
        type: String,
        default: "top-right"
      },
      // 关闭图标的颜色
      closeIconColor: {
        type: String,
        default: "#909399"
      },
      // 关闭图标的大小，单位rpx
      closeIconSize: {
        type: [String, Number],
        default: "30"
      },
      // 宽度，只对左，右，中部弹出时起作用，单位rpx，或者"auto"
      // 或者百分比"50%"，表示由内容撑开高度或者宽度，优先级高于length参数
      width: {
        type: String,
        default: ""
      },
      // 高度，只对上，下，中部弹出时起作用，单位rpx，或者"auto"
      // 或者百分比"50%"，表示由内容撑开高度或者宽度，优先级高于length参数
      height: {
        type: String,
        default: ""
      },
      // 给一个负的margin-top，往上偏移，避免和键盘重合的情况，仅在mode=center时有效
      negativeTop: {
        type: [String, Number],
        default: 0
      },
      // 遮罩的样式，一般用于修改遮罩的透明度
      maskCustomStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 遮罩打开或收起的动画过渡时间，单位ms
      duration: {
        type: [String, Number],
        default: 250
      },
      // 遮罩的模糊度
      blur: {
        type: [String, Number],
        default: 0
      }
    },
    data() {
      return {
        visibleSync: false,
        showDrawer: false,
        timer: null,
        closeFromInner: false
        // value的值改变，是发生在内部还是外部
      };
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 根据mode的位置，设定其弹窗的宽度(mode = left|right)，或者高度(mode = top|bottom)
      style() {
        let style = {};
        if (this.mode == "left" || this.mode == "right") {
          style = {
            width: this.width ? this.getUnitValue(this.width) : this.getUnitValue(this.length),
            height: "100%",
            transform: `translate3D(${this.mode == "left" ? "-100%" : "100%"},0px,0px)`
          };
        } else if (this.mode == "top" || this.mode == "bottom") {
          style = {
            width: "100%",
            height: this.height ? this.getUnitValue(this.height) : this.getUnitValue(this.length),
            transform: `translate3D(0px,${this.mode == "top" ? "-100%" : "100%"},0px)`
          };
        }
        style.zIndex = this.uZindex;
        if (this.borderRadius) {
          switch (this.mode) {
            case "left":
              style.borderRadius = `0 ${this.borderRadius}rpx ${this.borderRadius}rpx 0`;
              break;
            case "top":
              style.borderRadius = `0 0 ${this.borderRadius}rpx ${this.borderRadius}rpx`;
              break;
            case "right":
              style.borderRadius = `${this.borderRadius}rpx 0 0 ${this.borderRadius}rpx`;
              break;
            case "bottom":
              style.borderRadius = `${this.borderRadius}rpx ${this.borderRadius}rpx 0 0`;
              break;
          }
          style.overflow = "hidden";
        }
        if (this.duration)
          style.transition = `all ${this.duration / 1e3}s linear`;
        return style;
      },
      // 中部弹窗的特有样式
      centerStyle() {
        let style = {};
        style.width = this.width ? this.getUnitValue(this.width) : this.getUnitValue(this.length);
        style.height = this.height ? this.getUnitValue(this.height) : "auto";
        style.zIndex = this.uZindex;
        style.marginTop = `-${this.$u.addUnit(this.negativeTop)}`;
        if (this.borderRadius) {
          style.borderRadius = `${this.borderRadius}rpx`;
          style.overflow = "hidden";
        }
        return style;
      },
      // 计算整理后的z-index值
      uZindex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      }
    },
    watch: {
      valueCom: {
        immediate: true,
        handler(val) {
          if (val) {
            this.open();
          } else if (!this.closeFromInner) {
            this.close();
          }
          this.closeFromInner = false;
        }
      }
    },
    mounted() {
      this.valueCom && this.open();
    },
    methods: {
      // 判断传入的值，是否带有单位，如果没有，就默认用rpx单位
      getUnitValue(val) {
        if (/(%|px|rpx|auto)$/.test(val))
          return val;
        else
          return val + "rpx";
      },
      // 遮罩被点击
      maskClick() {
        this.close();
      },
      close() {
        this.closeFromInner = true;
        this.change("showDrawer", "visibleSync", false);
      },
      // 中部弹出时，需要.u-drawer-content将居中内容，此元素会铺满屏幕，点击需要关闭弹窗
      // 让其只在mode=center时起作用
      modeCenterClose(mode) {
        if (mode != "center" || !this.maskCloseAble)
          return;
        this.close();
      },
      open() {
        this.change("visibleSync", "showDrawer", true);
      },
      // 此处的原理是，关闭时先通过动画隐藏弹窗和遮罩，再移除整个组件
      // 打开时，先渲染组件，延时一定时间再让遮罩和弹窗的动画起作用
      change(param1, param2, status) {
        if (this.popup == true) {
          this.$emit("input", status);
          this.$emit("update:modelValue", status);
        }
        this[param1] = status;
        if (status) {
          this.timer = setTimeout(() => {
            this[param2] = status;
            this.$emit(status ? "open" : "close");
          }, 50);
        } else {
          this.timer = setTimeout(() => {
            this[param2] = status;
            this.$emit(status ? "open" : "close");
          }, this.duration);
        }
      }
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_mask = resolveEasycom(vue.resolveDynamicComponent("u-mask"), __easycom_0);
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_1$1);
    const _component_v_uni_scroll_view = ScrollView;
    const _component_v_uni_view = index$g;
    return $data.visibleSync ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      key: 0,
      style: vue.normalizeStyle([$props.customStyle, {
        zIndex: $options.uZindex - 1
      }]),
      class: "u-drawer",
      "hover-stop-propagation": ""
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_u_mask, {
          blur: $props.blur,
          duration: $props.duration,
          "custom-style": $props.maskCustomStyle,
          maskClickAble: $props.maskCloseAble,
          "z-index": $options.uZindex - 2,
          show: $data.showDrawer && $props.mask,
          onClick: $options.maskClick
        }, null, 8, ["blur", "duration", "custom-style", "maskClickAble", "z-index", "show", "onClick"]),
        vue.createCommentVNode(" 移除	@tap.stop.prevent "),
        vue.createVNode(_component_v_uni_view, {
          class: vue.normalizeClass(["u-drawer-content", [
            $props.safeAreaInsetBottom ? "safe-area-inset-bottom" : "",
            "u-drawer-" + $props.mode,
            $data.showDrawer ? "u-drawer-content-visible" : "",
            $props.zoom && $props.mode == "center" ? "u-animation-zoom" : ""
          ]]),
          onClick: _cache[2] || (_cache[2] = ($event) => $options.modeCenterClose($props.mode)),
          onTouchmove: _cache[3] || (_cache[3] = vue.withModifiers(() => {
          }, ["stop", "prevent"])),
          style: vue.normalizeStyle([$options.style])
        }, {
          default: vue.withCtx(() => [
            $props.mode == "center" ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              key: 0,
              class: "u-mode-center-box",
              onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {
              }, ["stop", "prevent"])),
              onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(() => {
              }, ["stop", "prevent"])),
              style: vue.normalizeStyle([$options.centerStyle])
            }, {
              default: vue.withCtx(() => [
                $props.closeable ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                  key: 0,
                  onClick: $options.close,
                  class: vue.normalizeClass(["u-close", ["u-close--" + $props.closeIconPos]]),
                  name: $props.closeIcon,
                  color: $props.closeIconColor,
                  size: $props.closeIconSize
                }, null, 8, ["onClick", "class", "name", "color", "size"])) : vue.createCommentVNode("v-if", true),
                vue.createVNode(_component_v_uni_scroll_view, {
                  class: "u-drawer__scroll-view",
                  "scroll-y": "true"
                }, {
                  default: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ]),
                  _: 3
                  /* FORWARDED */
                })
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["style"])) : (vue.openBlock(), vue.createBlock(_component_v_uni_scroll_view, {
              key: 1,
              class: "u-drawer__scroll-view",
              "scroll-y": "true"
            }, {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
              ]),
              _: 3
              /* FORWARDED */
            })),
            vue.createVNode(_component_v_uni_view, {
              onClick: $options.close,
              class: vue.normalizeClass(["u-close", ["u-close--" + $props.closeIconPos]])
            }, {
              default: vue.withCtx(() => [
                $props.mode != "center" && $props.closeable ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                  key: 0,
                  name: $props.closeIcon,
                  color: $props.closeIconColor,
                  size: $props.closeIconSize
                }, null, 8, ["name", "color", "size"])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            }, 8, ["onClick", "class"])
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["class", "style"])
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["style"])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_4 = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$g], ["__scopeId", "data-v-c725eed0"]]);
  const uActionSheet_vue_vue_type_style_index_0_scoped_3336f367_lang = "";
  const _sfc_main$f = {
    name: "u-action-sheet",
    emits: ["update:modelValue", "input", "click", "close"],
    props: {
      // 通过双向绑定控制组件的弹出与收起
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // 点击遮罩是否可以关闭actionsheet
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 按钮的文字数组，可以自定义颜色和字体大小，字体单位为rpx
      list: {
        type: Array,
        default() {
          return [];
        }
      },
      // 顶部的提示文字
      tips: {
        type: Object,
        default() {
          return {
            text: "",
            color: "",
            fontSize: "26"
          };
        }
      },
      // 底部的取消按钮
      cancelBtn: {
        type: Boolean,
        default: true
      },
      // 是否开启底部安全区适配，开启的话，会在iPhoneX机型底部添加一定的内边距
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 弹出的顶部圆角值
      borderRadius: {
        type: [String, Number],
        default: 0
      },
      // 弹出的z-index值
      zIndex: {
        type: [String, Number],
        default: 0
      },
      // 取消按钮的文字提示
      cancelText: {
        type: String,
        default: "取消"
      },
      // 自定义label属性名
      labelName: {
        type: String,
        default: "text"
      },
      // 遮罩的模糊度
      blur: {
        type: [Number, String],
        default: 0
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 顶部提示的样式
      tipsStyle() {
        let style = {};
        if (this.tips.color)
          style.color = this.tips.color;
        if (this.tips.fontSize)
          style.fontSize = this.tips.fontSize + "rpx";
        return style;
      },
      // 操作项目的样式
      itemStyle() {
        return (index2) => {
          let style = {};
          if (this.list[index2].color)
            style.color = this.list[index2].color;
          if (this.list[index2].fontSize)
            style.fontSize = this.list[index2].fontSize + "rpx";
          if (this.list[index2].disabled)
            style.color = "#c0c4cc";
          return style;
        };
      },
      uZIndex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      }
    },
    data() {
      return {
        popupValue: false
      };
    },
    watch: {
      valueCom(v1, v2) {
        this.popupValue = v1;
      }
    },
    methods: {
      // 点击取消按钮
      close() {
        this.popupClose();
        this.$emit("close");
      },
      // 弹窗关闭
      popupClose() {
        this.$emit("input", false);
        this.$emit("update:modelValue", false);
      },
      // 点击某一个item
      itemClick(index2) {
        if (this.list[index2].disabled)
          return;
        this.$emit("click", index2);
        this.$emit("input", false);
        this.$emit("update:modelValue", false);
      }
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_text = index$i;
    const _component_v_uni_view = index$g;
    const _component_u_popup = resolveEasycom(vue.resolveDynamicComponent("u-popup"), __easycom_4);
    return vue.openBlock(), vue.createBlock(_component_u_popup, {
      blur: $props.blur,
      mode: "bottom",
      "border-radius": $props.borderRadius,
      popup: false,
      modelValue: $data.popupValue,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.popupValue = $event),
      maskCloseAble: $props.maskCloseAble,
      length: "auto",
      safeAreaInsetBottom: $props.safeAreaInsetBottom,
      onClose: $options.popupClose,
      "z-index": $options.uZIndex
    }, {
      default: vue.withCtx(() => [
        $props.tips.text ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 0,
          class: "u-tips u-border-bottom",
          style: vue.normalizeStyle([$options.tipsStyle])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_text, null, {
              default: vue.withCtx(() => [
                vue.createTextVNode(
                  vue.toDisplayString($props.tips.text),
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["style"])) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($props.list, (item, index2) => {
            return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              key: index2,
              onTouchmove: _cache[0] || (_cache[0] = vue.withModifiers(() => {
              }, ["stop", "prevent"])),
              onClick: ($event) => $options.itemClick(index2),
              style: vue.normalizeStyle([$options.itemStyle(index2)]),
              class: vue.normalizeClass(["u-action-sheet-item u-line-1", [index2 < $props.list.length - 1 ? "u-border-bottom" : ""]]),
              "hover-stay-time": 150
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(
                  _component_v_uni_text,
                  null,
                  {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item[$props.labelName]),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                ),
                item.subText ? (vue.openBlock(), vue.createBlock(
                  _component_v_uni_text,
                  {
                    key: 0,
                    class: "u-action-sheet-item__subtext u-line-1"
                  },
                  {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.subText),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )) : vue.createCommentVNode("v-if", true)
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["onClick", "style", "class"]);
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        $props.cancelBtn ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 1,
          class: "u-gab"
        })) : vue.createCommentVNode("v-if", true),
        $props.cancelBtn ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
          key: 2,
          onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(() => {
          }, ["stop", "prevent"])),
          class: "u-actionsheet-cancel u-action-sheet-item",
          "hover-class": "u-hover-class",
          "hover-stay-time": 150,
          onClick: $options.close
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString($props.cancelText),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["onClick"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 1
      /* STABLE */
    }, 8, ["blur", "border-radius", "modelValue", "maskCloseAble", "safeAreaInsetBottom", "onClose", "z-index"]);
  }
  const __easycom_11 = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$f], ["__scopeId", "data-v-3336f367"]]);
  const pickerViewColumn = "";
  const pickerView = "";
  const uSelect_vue_vue_type_style_index_0_scoped_e06119c1_lang = "";
  const _sfc_main$e = {
    emits: ["update:modelValue", "input", "confirm"],
    props: {
      // 通过双向绑定控制组件的弹出与收起
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // 列数据
      list: {
        type: Array,
        default() {
          return [];
        }
      },
      // 是否显示边框
      border: {
        type: Boolean,
        default: true
      },
      // "取消"按钮的颜色
      cancelColor: {
        type: String,
        default: "#606266"
      },
      // "确定"按钮的颜色
      confirmColor: {
        type: String,
        default: "#2979ff"
      },
      // 弹出的z-index值
      zIndex: {
        type: [String, Number],
        default: 0
      },
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 是否允许通过点击遮罩关闭Picker
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 提供的默认选中的下标
      defaultValue: {
        type: Array,
        default() {
          return [0];
        }
      },
      // 模式选择，single-column-单列，mutil-column-多列，mutil-column-auto-多列联动
      mode: {
        type: String,
        default: "single-column"
      },
      // 自定义value属性名
      valueName: {
        type: String,
        default: "value"
      },
      // 自定义label属性名
      labelName: {
        type: String,
        default: "label"
      },
      // 自定义多列联动模式的children属性名
      childName: {
        type: String,
        default: "children"
      },
      // 顶部标题
      title: {
        type: String,
        default: ""
      },
      // 取消按钮的文字
      cancelText: {
        type: String,
        default: "取消"
      },
      // 确认按钮的文字
      confirmText: {
        type: String,
        default: "确认"
      },
      // 遮罩的模糊度
      blur: {
        type: [Number, String],
        default: 0
      }
    },
    data() {
      return {
        popupValue: false,
        // 用于列改变时，保存当前的索引，下一次变化时比较得出是哪一列发生了变化
        defaultSelector: [0],
        // picker-view的数据
        columnData: [],
        // 每次队列发生变化时，保存选择的结果
        selectValue: [],
        // 上一次列变化时的index
        lastSelectIndex: [],
        // 列数
        columnNum: 0,
        // 列是否还在滑动中，微信小程序如果在滑动中就点确定，结果可能不准确
        moving: false,
        reset: false
      };
    },
    watch: {
      // 在select弹起的时候，重新初始化所有数据
      valueCom: {
        immediate: true,
        handler(val) {
          if (val) {
            this.reset = true;
            setTimeout(() => this.init(), 10);
          }
          this.popupValue = val;
        }
      }
    },
    computed: {
      uZIndex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      },
      valueCom() {
        return this.modelValue;
      },
      // 用来兼容小程序、App、h5
      showColumnCom() {
        return true;
      }
    },
    methods: {
      // 标识滑动开始，只有微信小程序才有这样的事件
      pickstart() {
      },
      // 标识滑动结束
      pickend() {
      },
      init() {
        this.reset = false;
        this.setColumnNum();
        this.setDefaultSelector();
        this.setColumnData();
        this.setSelectValue();
      },
      // 获取默认选中列下标
      setDefaultSelector() {
        this.defaultSelector = this.defaultValue.length == this.columnNum ? this.defaultValue : Array(this.columnNum).fill(0);
        this.lastSelectIndex = this.$u.deepClone(this.defaultSelector);
      },
      // 计算列数
      setColumnNum() {
        if (this.mode == "single-column")
          this.columnNum = 1;
        else if (this.mode == "mutil-column")
          this.columnNum = this.list.length;
        else if (this.mode == "mutil-column-auto") {
          let num = 1;
          let column = this.list;
          while (column[0][this.childName]) {
            column = column[0] ? column[0][this.childName] : {};
            num++;
          }
          this.columnNum = num;
        }
      },
      // 获取需要展示在picker中的列数据
      setColumnData() {
        let data = [];
        this.selectValue = [];
        if (this.mode == "mutil-column-auto") {
          let column = this.list[this.defaultSelector.length ? this.defaultSelector[0] : 0];
          for (let i = 0; i < this.columnNum; i++) {
            if (i == 0) {
              data[i] = this.list;
              column = column[this.childName];
            } else {
              data[i] = column;
              column = column[this.defaultSelector[i]][this.childName];
            }
          }
        } else if (this.mode == "single-column") {
          data[0] = this.list;
        } else {
          data = this.list;
        }
        this.columnData = data;
      },
      // 获取默认选中的值，如果没有设置defaultValue，就默认选中每列的第一个
      setSelectValue() {
        let tmp = null;
        for (let i = 0; i < this.columnNum; i++) {
          tmp = this.columnData[i][this.defaultSelector[i]];
          let data = {
            index: this.defaultSelector[i],
            value: tmp ? tmp[this.valueName] : null,
            label: tmp ? tmp[this.labelName] : null
          };
          if (tmp && tmp.extra !== void 0)
            data.extra = tmp.extra;
          this.selectValue.push(data);
        }
      },
      // 列选项
      columnChange(e2) {
        let index2 = null;
        let columnIndex = e2.detail.value;
        this.selectValue = [];
        if (this.mode == "mutil-column-auto") {
          this.lastSelectIndex.map((val, idx) => {
            if (val != columnIndex[idx])
              index2 = idx;
          });
          this.defaultSelector = columnIndex;
          for (let i = index2 + 1; i < this.columnNum; i++) {
            this.columnData[i] = this.columnData[i - 1][i - 1 == index2 ? columnIndex[index2] : 0][this.childName];
            this.defaultSelector[i] = 0;
          }
          columnIndex.map((item, index3) => {
            let data = this.columnData[index3][columnIndex[index3]];
            let tmp = {
              index: columnIndex[index3],
              value: data ? data[this.valueName] : null,
              label: data ? data[this.labelName] : null
            };
            if (data && data.extra !== void 0)
              tmp.extra = data.extra;
            this.selectValue.push(tmp);
          });
          this.lastSelectIndex = columnIndex;
        } else if (this.mode == "single-column") {
          let data = this.columnData[0][columnIndex[0]];
          let tmp = {
            index: columnIndex[0],
            value: data ? data[this.valueName] : null,
            label: data ? data[this.labelName] : null
          };
          if (data && data.extra !== void 0)
            tmp.extra = data.extra;
          this.selectValue.push(tmp);
          this.lastSelectIndex = columnIndex;
        } else if (this.mode == "mutil-column") {
          columnIndex.map((item, index3) => {
            let data = this.columnData[index3][columnIndex[index3]];
            let tmp = {
              index: columnIndex[index3],
              value: data ? data[this.valueName] : null,
              label: data ? data[this.labelName] : null
            };
            if (data && data.extra !== void 0)
              tmp.extra = data.extra;
            this.selectValue.push(tmp);
          });
          this.lastSelectIndex = columnIndex;
        }
      },
      close() {
        this.$emit("input", false);
        this.$emit("update:modelValue", false);
      },
      // 点击确定或者取消
      getResult(event = null) {
        if (event)
          this.$emit(event, this.selectValue);
        this.close();
      },
      selectHandler() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    const _component_v_uni_picker_view_column = PickerViewColumn;
    const _component_v_uni_picker_view = PickerView;
    const _component_u_popup = resolveEasycom(vue.resolveDynamicComponent("u-popup"), __easycom_4);
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, { class: "u-select" }, {
      default: vue.withCtx(() => [
        vue.createCommentVNode(` <view class="u-select__action" :class="{\r
			'u-select--border': border\r
		}" @tap.stop="selectHandler">\r
			<view class="u-select__action__icon" :class="{\r
				'u-select__action__icon--reverse': value == true\r
			}">\r
				<u-icon name="arrow-down-fill" size="26" color="#c0c4cc"></u-icon>\r
			</view>\r
		</view> `),
        vue.createVNode(_component_u_popup, {
          blur: $props.blur,
          maskCloseAble: $props.maskCloseAble,
          mode: "bottom",
          popup: false,
          modelValue: $data.popupValue,
          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.popupValue = $event),
          length: "auto",
          safeAreaInsetBottom: $props.safeAreaInsetBottom,
          onClose: $options.close,
          "z-index": $options.uZIndex
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_view, { class: "u-select" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  class: "u-select__header",
                  onTouchmove: _cache[3] || (_cache[3] = vue.withModifiers(() => {
                  }, ["stop", "prevent"]))
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_view, {
                      class: "u-select__header__cancel u-select__header__btn",
                      style: vue.normalizeStyle({ color: $props.cancelColor }),
                      "hover-class": "u-hover-class",
                      "hover-stay-time": 150,
                      onClick: _cache[0] || (_cache[0] = ($event) => $options.getResult("cancel"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString($props.cancelText),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["style"]),
                    vue.createVNode(_component_v_uni_view, { class: "u-select__header__title" }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString($props.title),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_view, {
                      class: "u-select__header__confirm u-select__header__btn",
                      style: vue.normalizeStyle({ color: $data.moving ? $props.cancelColor : $props.confirmColor }),
                      "hover-class": "u-hover-class",
                      "hover-stay-time": 150,
                      onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(() => {
                      }, ["stop"])),
                      onClick: _cache[2] || (_cache[2] = vue.withModifiers(($event) => $options.getResult("confirm"), ["stop"]))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString($props.confirmText),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["style"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_v_uni_view, { class: "u-select__body" }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_picker_view, {
                      onChange: $options.columnChange,
                      class: "u-select__body__picker-view",
                      value: $data.defaultSelector,
                      onPickstart: $options.pickstart,
                      onPickend: $options.pickend
                    }, {
                      default: vue.withCtx(() => [
                        $options.showColumnCom ? (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          { key: 0 },
                          vue.renderList($data.columnData, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_picker_view_column,
                              { key: index2 },
                              {
                                default: vue.withCtx(() => [
                                  (vue.openBlock(true), vue.createElementBlock(
                                    vue.Fragment,
                                    null,
                                    vue.renderList(item, (item1, index1) => {
                                      return vue.openBlock(), vue.createBlock(
                                        _component_v_uni_view,
                                        {
                                          class: "u-select__body__picker-view__item",
                                          key: index1
                                        },
                                        {
                                          default: vue.withCtx(() => [
                                            vue.createVNode(
                                              _component_v_uni_view,
                                              { class: "u-line-1" },
                                              {
                                                default: vue.withCtx(() => [
                                                  vue.createTextVNode(
                                                    vue.toDisplayString(item1[$props.labelName]),
                                                    1
                                                    /* TEXT */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      );
                                    }),
                                    128
                                    /* KEYED_FRAGMENT */
                                  ))
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        )) : vue.createCommentVNode("v-if", true)
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["onChange", "value", "onPickstart", "onPickend"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["blur", "maskCloseAble", "modelValue", "safeAreaInsetBottom", "onClose", "z-index"])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const __easycom_12 = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$e], ["__scopeId", "data-v-e06119c1"]]);
  const provinces = [
    {
      code: "110000",
      name: "北京市"
    },
    {
      code: "120000",
      name: "天津市"
    },
    {
      code: "130000",
      name: "河北省"
    },
    {
      code: "140000",
      name: "山西省"
    },
    {
      code: "150000",
      name: "内蒙古自治区"
    },
    {
      code: "210000",
      name: "辽宁省"
    },
    {
      code: "220000",
      name: "吉林省"
    },
    {
      code: "230000",
      name: "黑龙江省"
    },
    {
      code: "310000",
      name: "上海市"
    },
    {
      code: "320000",
      name: "江苏省"
    },
    {
      code: "330000",
      name: "浙江省"
    },
    {
      code: "340000",
      name: "安徽省"
    },
    {
      code: "350000",
      name: "福建省"
    },
    {
      code: "360000",
      name: "江西省"
    },
    {
      code: "370000",
      name: "山东省"
    },
    {
      code: "410000",
      name: "河南省"
    },
    {
      code: "420000",
      name: "湖北省"
    },
    {
      code: "430000",
      name: "湖南省"
    },
    {
      code: "440000",
      name: "广东省"
    },
    {
      code: "450000",
      name: "广西壮族自治区"
    },
    {
      code: "460000",
      name: "海南省"
    },
    {
      code: "500000",
      name: "重庆市"
    },
    {
      code: "510000",
      name: "四川省"
    },
    {
      code: "520000",
      name: "贵州省"
    },
    {
      code: "530000",
      name: "云南省"
    },
    {
      code: "540000",
      name: "西藏自治区"
    },
    {
      code: "610000",
      name: "陕西省"
    },
    {
      code: "620000",
      name: "甘肃省"
    },
    {
      code: "630000",
      name: "青海省"
    },
    {
      code: "640000",
      name: "宁夏回族自治区"
    },
    {
      code: "650000",
      name: "新疆维吾尔自治区"
    },
    {
      code: "710000",
      name: "台湾省"
    },
    {
      code: "810000",
      name: "香港特别行政区"
    },
    {
      code: "820000",
      name: "澳门特别行政区"
    }
  ];
  const citys = [
    [
      {
        code: "110100",
        name: "北京市"
      }
    ],
    [
      {
        code: "120100",
        name: "天津市"
      }
    ],
    [
      {
        code: "130100",
        name: "石家庄市"
      },
      {
        code: "130200",
        name: "唐山市"
      },
      {
        code: "130300",
        name: "秦皇岛市"
      },
      {
        code: "130400",
        name: "邯郸市"
      },
      {
        code: "130500",
        name: "邢台市"
      },
      {
        code: "130600",
        name: "保定市"
      },
      {
        code: "130700",
        name: "张家口市"
      },
      {
        code: "130800",
        name: "承德市"
      },
      {
        code: "130900",
        name: "沧州市"
      },
      {
        code: "131000",
        name: "廊坊市"
      },
      {
        code: "131100",
        name: "衡水市"
      }
    ],
    [
      {
        code: "140100",
        name: "太原市"
      },
      {
        code: "140200",
        name: "大同市"
      },
      {
        code: "140300",
        name: "阳泉市"
      },
      {
        code: "140400",
        name: "长治市"
      },
      {
        code: "140500",
        name: "晋城市"
      },
      {
        code: "140600",
        name: "朔州市"
      },
      {
        code: "140700",
        name: "晋中市"
      },
      {
        code: "140800",
        name: "运城市"
      },
      {
        code: "140900",
        name: "忻州市"
      },
      {
        code: "141000",
        name: "临汾市"
      },
      {
        code: "141100",
        name: "吕梁市"
      }
    ],
    [
      {
        code: "150100",
        name: "呼和浩特市"
      },
      {
        code: "150200",
        name: "包头市"
      },
      {
        code: "150300",
        name: "乌海市"
      },
      {
        code: "150400",
        name: "赤峰市"
      },
      {
        code: "150500",
        name: "通辽市"
      },
      {
        code: "150600",
        name: "鄂尔多斯市"
      },
      {
        code: "150700",
        name: "呼伦贝尔市"
      },
      {
        code: "150800",
        name: "巴彦淖尔市"
      },
      {
        code: "150900",
        name: "乌兰察布市"
      },
      {
        code: "152200",
        name: "兴安盟"
      },
      {
        code: "152500",
        name: "锡林郭勒盟"
      },
      {
        code: "152900",
        name: "阿拉善盟"
      }
    ],
    [
      {
        code: "210100",
        name: "沈阳市"
      },
      {
        code: "210200",
        name: "大连市"
      },
      {
        code: "210300",
        name: "鞍山市"
      },
      {
        code: "210400",
        name: "抚顺市"
      },
      {
        code: "210500",
        name: "本溪市"
      },
      {
        code: "210600",
        name: "丹东市"
      },
      {
        code: "210700",
        name: "锦州市"
      },
      {
        code: "210800",
        name: "营口市"
      },
      {
        code: "210900",
        name: "阜新市"
      },
      {
        code: "211000",
        name: "辽阳市"
      },
      {
        code: "211100",
        name: "盘锦市"
      },
      {
        code: "211200",
        name: "铁岭市"
      },
      {
        code: "211300",
        name: "朝阳市"
      },
      {
        code: "211400",
        name: "葫芦岛市"
      }
    ],
    [
      {
        code: "220100",
        name: "长春市"
      },
      {
        code: "220200",
        name: "吉林市"
      },
      {
        code: "220300",
        name: "四平市"
      },
      {
        code: "220400",
        name: "辽源市"
      },
      {
        code: "220500",
        name: "通化市"
      },
      {
        code: "220600",
        name: "白山市"
      },
      {
        code: "220700",
        name: "松原市"
      },
      {
        code: "220800",
        name: "白城市"
      },
      {
        code: "222400",
        name: "延边朝鲜族自治州"
      }
    ],
    [
      {
        code: "230100",
        name: "哈尔滨市"
      },
      {
        code: "230200",
        name: "齐齐哈尔市"
      },
      {
        code: "230300",
        name: "鸡西市"
      },
      {
        code: "230400",
        name: "鹤岗市"
      },
      {
        code: "230500",
        name: "双鸭山市"
      },
      {
        code: "230600",
        name: "大庆市"
      },
      {
        code: "230700",
        name: "伊春市"
      },
      {
        code: "230800",
        name: "佳木斯市"
      },
      {
        code: "230900",
        name: "七台河市"
      },
      {
        code: "231000",
        name: "牡丹江市"
      },
      {
        code: "231100",
        name: "黑河市"
      },
      {
        code: "231200",
        name: "绥化市"
      },
      {
        code: "232700",
        name: "大兴安岭地区"
      }
    ],
    [
      {
        code: "310100",
        name: "上海市"
      }
    ],
    [
      {
        code: "320100",
        name: "南京市"
      },
      {
        code: "320200",
        name: "无锡市"
      },
      {
        code: "320300",
        name: "徐州市"
      },
      {
        code: "320400",
        name: "常州市"
      },
      {
        code: "320500",
        name: "苏州市"
      },
      {
        code: "320600",
        name: "南通市"
      },
      {
        code: "320700",
        name: "连云港市"
      },
      {
        code: "320800",
        name: "淮安市"
      },
      {
        code: "320900",
        name: "盐城市"
      },
      {
        code: "321000",
        name: "扬州市"
      },
      {
        code: "321100",
        name: "镇江市"
      },
      {
        code: "321200",
        name: "泰州市"
      },
      {
        code: "321300",
        name: "宿迁市"
      }
    ],
    [
      {
        code: "330100",
        name: "杭州市"
      },
      {
        code: "330200",
        name: "宁波市"
      },
      {
        code: "330300",
        name: "温州市"
      },
      {
        code: "330400",
        name: "嘉兴市"
      },
      {
        code: "330500",
        name: "湖州市"
      },
      {
        code: "330600",
        name: "绍兴市"
      },
      {
        code: "330700",
        name: "金华市"
      },
      {
        code: "330800",
        name: "衢州市"
      },
      {
        code: "330900",
        name: "舟山市"
      },
      {
        code: "331000",
        name: "台州市"
      },
      {
        code: "331100",
        name: "丽水市"
      }
    ],
    [
      {
        code: "340100",
        name: "合肥市"
      },
      {
        code: "340200",
        name: "芜湖市"
      },
      {
        code: "340300",
        name: "蚌埠市"
      },
      {
        code: "340400",
        name: "淮南市"
      },
      {
        code: "340500",
        name: "马鞍山市"
      },
      {
        code: "340600",
        name: "淮北市"
      },
      {
        code: "340700",
        name: "铜陵市"
      },
      {
        code: "340800",
        name: "安庆市"
      },
      {
        code: "341000",
        name: "黄山市"
      },
      {
        code: "341100",
        name: "滁州市"
      },
      {
        code: "341200",
        name: "阜阳市"
      },
      {
        code: "341300",
        name: "宿州市"
      },
      {
        code: "341500",
        name: "六安市"
      },
      {
        code: "341600",
        name: "亳州市"
      },
      {
        code: "341700",
        name: "池州市"
      },
      {
        code: "341800",
        name: "宣城市"
      }
    ],
    [
      {
        code: "350100",
        name: "福州市"
      },
      {
        code: "350200",
        name: "厦门市"
      },
      {
        code: "350300",
        name: "莆田市"
      },
      {
        code: "350400",
        name: "三明市"
      },
      {
        code: "350500",
        name: "泉州市"
      },
      {
        code: "350600",
        name: "漳州市"
      },
      {
        code: "350700",
        name: "南平市"
      },
      {
        code: "350800",
        name: "龙岩市"
      },
      {
        code: "350900",
        name: "宁德市"
      }
    ],
    [
      {
        code: "360100",
        name: "南昌市"
      },
      {
        code: "360200",
        name: "景德镇市"
      },
      {
        code: "360300",
        name: "萍乡市"
      },
      {
        code: "360400",
        name: "九江市"
      },
      {
        code: "360500",
        name: "新余市"
      },
      {
        code: "360600",
        name: "鹰潭市"
      },
      {
        code: "360700",
        name: "赣州市"
      },
      {
        code: "360800",
        name: "吉安市"
      },
      {
        code: "360900",
        name: "宜春市"
      },
      {
        code: "361000",
        name: "抚州市"
      },
      {
        code: "361100",
        name: "上饶市"
      }
    ],
    [
      {
        code: "370100",
        name: "济南市"
      },
      {
        code: "370200",
        name: "青岛市"
      },
      {
        code: "370300",
        name: "淄博市"
      },
      {
        code: "370400",
        name: "枣庄市"
      },
      {
        code: "370500",
        name: "东营市"
      },
      {
        code: "370600",
        name: "烟台市"
      },
      {
        code: "370700",
        name: "潍坊市"
      },
      {
        code: "370800",
        name: "济宁市"
      },
      {
        code: "370900",
        name: "泰安市"
      },
      {
        code: "371000",
        name: "威海市"
      },
      {
        code: "371100",
        name: "日照市"
      },
      {
        code: "371200",
        name: "莱芜市"
      },
      {
        code: "371300",
        name: "临沂市"
      },
      {
        code: "371400",
        name: "德州市"
      },
      {
        code: "371500",
        name: "聊城市"
      },
      {
        code: "371600",
        name: "滨州市"
      },
      {
        code: "371700",
        name: "菏泽市"
      }
    ],
    [
      {
        code: "410100",
        name: "郑州市"
      },
      {
        code: "410200",
        name: "开封市"
      },
      {
        code: "410300",
        name: "洛阳市"
      },
      {
        code: "410400",
        name: "平顶山市"
      },
      {
        code: "410500",
        name: "安阳市"
      },
      {
        code: "410600",
        name: "鹤壁市"
      },
      {
        code: "410700",
        name: "新乡市"
      },
      {
        code: "410800",
        name: "焦作市"
      },
      {
        code: "410900",
        name: "濮阳市"
      },
      {
        code: "411000",
        name: "许昌市"
      },
      {
        code: "411100",
        name: "漯河市"
      },
      {
        code: "411200",
        name: "三门峡市"
      },
      {
        code: "411300",
        name: "南阳市"
      },
      {
        code: "411400",
        name: "商丘市"
      },
      {
        code: "411500",
        name: "信阳市"
      },
      {
        code: "411600",
        name: "周口市"
      },
      {
        code: "411700",
        name: "驻马店市"
      },
      {
        code: "419000",
        name: "省直辖县级行政区划"
      }
    ],
    [
      {
        code: "420100",
        name: "武汉市"
      },
      {
        code: "420200",
        name: "黄石市"
      },
      {
        code: "420300",
        name: "十堰市"
      },
      {
        code: "420500",
        name: "宜昌市"
      },
      {
        code: "420600",
        name: "襄阳市"
      },
      {
        code: "420700",
        name: "鄂州市"
      },
      {
        code: "420800",
        name: "荆门市"
      },
      {
        code: "420900",
        name: "孝感市"
      },
      {
        code: "421000",
        name: "荆州市"
      },
      {
        code: "421100",
        name: "黄冈市"
      },
      {
        code: "421200",
        name: "咸宁市"
      },
      {
        code: "421300",
        name: "随州市"
      },
      {
        code: "422800",
        name: "恩施土家族苗族自治州"
      },
      {
        code: "429000",
        name: "省直辖县级行政区划"
      }
    ],
    [
      {
        code: "430100",
        name: "长沙市"
      },
      {
        code: "430200",
        name: "株洲市"
      },
      {
        code: "430300",
        name: "湘潭市"
      },
      {
        code: "430400",
        name: "衡阳市"
      },
      {
        code: "430500",
        name: "邵阳市"
      },
      {
        code: "430600",
        name: "岳阳市"
      },
      {
        code: "430700",
        name: "常德市"
      },
      {
        code: "430800",
        name: "张家界市"
      },
      {
        code: "430900",
        name: "益阳市"
      },
      {
        code: "431000",
        name: "郴州市"
      },
      {
        code: "431100",
        name: "永州市"
      },
      {
        code: "431200",
        name: "怀化市"
      },
      {
        code: "431300",
        name: "娄底市"
      },
      {
        code: "433100",
        name: "湘西土家族苗族自治州"
      }
    ],
    [
      {
        code: "440100",
        name: "广州市"
      },
      {
        code: "440200",
        name: "韶关市"
      },
      {
        code: "440300",
        name: "深圳市"
      },
      {
        code: "440400",
        name: "珠海市"
      },
      {
        code: "440500",
        name: "汕头市"
      },
      {
        code: "440600",
        name: "佛山市"
      },
      {
        code: "440700",
        name: "江门市"
      },
      {
        code: "440800",
        name: "湛江市"
      },
      {
        code: "440900",
        name: "茂名市"
      },
      {
        code: "441200",
        name: "肇庆市"
      },
      {
        code: "441300",
        name: "惠州市"
      },
      {
        code: "441400",
        name: "梅州市"
      },
      {
        code: "441500",
        name: "汕尾市"
      },
      {
        code: "441600",
        name: "河源市"
      },
      {
        code: "441700",
        name: "阳江市"
      },
      {
        code: "441800",
        name: "清远市"
      },
      {
        code: "441900",
        name: "东莞市"
      },
      {
        code: "442000",
        name: "中山市"
      },
      {
        code: "445100",
        name: "潮州市"
      },
      {
        code: "445200",
        name: "揭阳市"
      },
      {
        code: "445300",
        name: "云浮市"
      }
    ],
    [
      {
        code: "450100",
        name: "南宁市"
      },
      {
        code: "450200",
        name: "柳州市"
      },
      {
        code: "450300",
        name: "桂林市"
      },
      {
        code: "450400",
        name: "梧州市"
      },
      {
        code: "450500",
        name: "北海市"
      },
      {
        code: "450600",
        name: "防城港市"
      },
      {
        code: "450700",
        name: "钦州市"
      },
      {
        code: "450800",
        name: "贵港市"
      },
      {
        code: "450900",
        name: "玉林市"
      },
      {
        code: "451000",
        name: "百色市"
      },
      {
        code: "451100",
        name: "贺州市"
      },
      {
        code: "451200",
        name: "河池市"
      },
      {
        code: "451300",
        name: "来宾市"
      },
      {
        code: "451400",
        name: "崇左市"
      }
    ],
    [
      {
        code: "460100",
        name: "海口市"
      },
      {
        code: "460200",
        name: "三亚市"
      },
      {
        code: "460300",
        name: "三沙市"
      },
      {
        code: "460400",
        name: "儋州市"
      },
      {
        code: "469000",
        name: "省直辖县级行政区划"
      }
    ],
    [
      {
        code: "500100",
        name: "重庆市"
      },
      {
        code: "500200",
        name: "县"
      }
    ],
    [
      {
        code: "510100",
        name: "成都市"
      },
      {
        code: "510300",
        name: "自贡市"
      },
      {
        code: "510400",
        name: "攀枝花市"
      },
      {
        code: "510500",
        name: "泸州市"
      },
      {
        code: "510600",
        name: "德阳市"
      },
      {
        code: "510700",
        name: "绵阳市"
      },
      {
        code: "510800",
        name: "广元市"
      },
      {
        code: "510900",
        name: "遂宁市"
      },
      {
        code: "511000",
        name: "内江市"
      },
      {
        code: "511100",
        name: "乐山市"
      },
      {
        code: "511300",
        name: "南充市"
      },
      {
        code: "511400",
        name: "眉山市"
      },
      {
        code: "511500",
        name: "宜宾市"
      },
      {
        code: "511600",
        name: "广安市"
      },
      {
        code: "511700",
        name: "达州市"
      },
      {
        code: "511800",
        name: "雅安市"
      },
      {
        code: "511900",
        name: "巴中市"
      },
      {
        code: "512000",
        name: "资阳市"
      },
      {
        code: "513200",
        name: "阿坝藏族羌族自治州"
      },
      {
        code: "513300",
        name: "甘孜藏族自治州"
      },
      {
        code: "513400",
        name: "凉山彝族自治州"
      }
    ],
    [
      {
        code: "520100",
        name: "贵阳市"
      },
      {
        code: "520200",
        name: "六盘水市"
      },
      {
        code: "520300",
        name: "遵义市"
      },
      {
        code: "520400",
        name: "安顺市"
      },
      {
        code: "520500",
        name: "毕节市"
      },
      {
        code: "520600",
        name: "铜仁市"
      },
      {
        code: "522300",
        name: "黔西南布依族苗族自治州"
      },
      {
        code: "522600",
        name: "黔东南苗族侗族自治州"
      },
      {
        code: "522700",
        name: "黔南布依族苗族自治州"
      }
    ],
    [
      {
        code: "530100",
        name: "昆明市"
      },
      {
        code: "530300",
        name: "曲靖市"
      },
      {
        code: "530400",
        name: "玉溪市"
      },
      {
        code: "530500",
        name: "保山市"
      },
      {
        code: "530600",
        name: "昭通市"
      },
      {
        code: "530700",
        name: "丽江市"
      },
      {
        code: "530800",
        name: "普洱市"
      },
      {
        code: "530900",
        name: "临沧市"
      },
      {
        code: "532300",
        name: "楚雄彝族自治州"
      },
      {
        code: "532500",
        name: "红河哈尼族彝族自治州"
      },
      {
        code: "532600",
        name: "文山壮族苗族自治州"
      },
      {
        code: "532800",
        name: "西双版纳傣族自治州"
      },
      {
        code: "532900",
        name: "大理白族自治州"
      },
      {
        code: "533100",
        name: "德宏傣族景颇族自治州"
      },
      {
        code: "533300",
        name: "怒江傈僳族自治州"
      },
      {
        code: "533400",
        name: "迪庆藏族自治州"
      }
    ],
    [
      {
        code: "540100",
        name: "拉萨市"
      },
      {
        code: "540200",
        name: "日喀则市"
      },
      {
        code: "540300",
        name: "昌都市"
      },
      {
        code: "540400",
        name: "林芝市"
      },
      {
        code: "540500",
        name: "山南市"
      },
      {
        code: "542400",
        name: "那曲地区"
      },
      {
        code: "542500",
        name: "阿里地区"
      }
    ],
    [
      {
        code: "610100",
        name: "西安市"
      },
      {
        code: "610200",
        name: "铜川市"
      },
      {
        code: "610300",
        name: "宝鸡市"
      },
      {
        code: "610400",
        name: "咸阳市"
      },
      {
        code: "610500",
        name: "渭南市"
      },
      {
        code: "610600",
        name: "延安市"
      },
      {
        code: "610700",
        name: "汉中市"
      },
      {
        code: "610800",
        name: "榆林市"
      },
      {
        code: "610900",
        name: "安康市"
      },
      {
        code: "611000",
        name: "商洛市"
      }
    ],
    [
      {
        code: "620100",
        name: "兰州市"
      },
      {
        code: "620200",
        name: "嘉峪关市"
      },
      {
        code: "620300",
        name: "金昌市"
      },
      {
        code: "620400",
        name: "白银市"
      },
      {
        code: "620500",
        name: "天水市"
      },
      {
        code: "620600",
        name: "武威市"
      },
      {
        code: "620700",
        name: "张掖市"
      },
      {
        code: "620800",
        name: "平凉市"
      },
      {
        code: "620900",
        name: "酒泉市"
      },
      {
        code: "621000",
        name: "庆阳市"
      },
      {
        code: "621100",
        name: "定西市"
      },
      {
        code: "621200",
        name: "陇南市"
      },
      {
        code: "622900",
        name: "临夏回族自治州"
      },
      {
        code: "623000",
        name: "甘南藏族自治州"
      }
    ],
    [
      {
        code: "630100",
        name: "西宁市"
      },
      {
        code: "630200",
        name: "海东市"
      },
      {
        code: "632200",
        name: "海北藏族自治州"
      },
      {
        code: "632300",
        name: "黄南藏族自治州"
      },
      {
        code: "632500",
        name: "海南藏族自治州"
      },
      {
        code: "632600",
        name: "果洛藏族自治州"
      },
      {
        code: "632700",
        name: "玉树藏族自治州"
      },
      {
        code: "632800",
        name: "海西蒙古族藏族自治州"
      }
    ],
    [
      {
        code: "640100",
        name: "银川市"
      },
      {
        code: "640200",
        name: "石嘴山市"
      },
      {
        code: "640300",
        name: "吴忠市"
      },
      {
        code: "640400",
        name: "固原市"
      },
      {
        code: "640500",
        name: "中卫市"
      }
    ],
    [
      {
        code: "650100",
        name: "乌鲁木齐市"
      },
      {
        code: "650200",
        name: "克拉玛依市"
      },
      {
        code: "650400",
        name: "吐鲁番市"
      },
      {
        code: "650500",
        name: "哈密市"
      },
      {
        code: "652300",
        name: "昌吉回族自治州"
      },
      {
        code: "652700",
        name: "博尔塔拉蒙古自治州"
      },
      {
        code: "652800",
        name: "巴音郭楞蒙古自治州"
      },
      {
        code: "652900",
        name: "阿克苏地区"
      },
      {
        code: "653000",
        name: "克孜勒苏柯尔克孜自治州"
      },
      {
        code: "653100",
        name: "喀什地区"
      },
      {
        code: "653200",
        name: "和田地区"
      },
      {
        code: "654000",
        name: "伊犁哈萨克自治州"
      },
      {
        code: "654200",
        name: "塔城地区"
      },
      {
        code: "654300",
        name: "阿勒泰地区"
      },
      {
        code: "659000",
        name: "自治区直辖县级行政区划"
      }
    ],
    [
      {
        code: "710100",
        name: "台北市"
      },
      {
        code: "710200",
        name: "高雄市"
      },
      {
        code: "710300",
        name: "台南市"
      },
      {
        code: "710400",
        name: "台中市"
      },
      {
        code: "710600",
        name: "南投县"
      },
      {
        code: "710700",
        name: "基隆市"
      },
      {
        code: "710800",
        name: "新竹市"
      },
      {
        code: "710900",
        name: "嘉义市"
      },
      {
        code: "711100",
        name: "新北市"
      },
      {
        code: "711200",
        name: "宜兰县"
      },
      {
        code: "711300",
        name: "新竹县"
      },
      {
        code: "711400",
        name: "桃园市"
      },
      {
        code: "711500",
        name: "苗栗县"
      },
      {
        code: "711700",
        name: "彰化县"
      },
      {
        code: "711900",
        name: "嘉义县"
      },
      {
        code: "712100",
        name: "云林县"
      },
      {
        code: "712400",
        name: "屏东县"
      },
      {
        code: "712500",
        name: "台东县"
      },
      {
        code: "712600",
        name: "花莲县"
      },
      {
        code: "712700",
        name: "澎湖县"
      }
    ],
    [
      {
        code: "810100",
        name: "香港特别行政区"
      }
    ],
    [
      {
        code: "820100",
        name: "澳门特别行政区"
      }
    ]
  ];
  const areas = [
    [
      [
        {
          code: "110101",
          name: "东城区"
        },
        {
          code: "110102",
          name: "西城区"
        },
        {
          code: "110105",
          name: "朝阳区"
        },
        {
          code: "110106",
          name: "丰台区"
        },
        {
          code: "110107",
          name: "石景山区"
        },
        {
          code: "110108",
          name: "海淀区"
        },
        {
          code: "110109",
          name: "门头沟区"
        },
        {
          code: "110111",
          name: "房山区"
        },
        {
          code: "110112",
          name: "通州区"
        },
        {
          code: "110113",
          name: "顺义区"
        },
        {
          code: "110114",
          name: "昌平区"
        },
        {
          code: "110115",
          name: "大兴区"
        },
        {
          code: "110116",
          name: "怀柔区"
        },
        {
          code: "110117",
          name: "平谷区"
        },
        {
          code: "110118",
          name: "密云区"
        },
        {
          code: "110119",
          name: "延庆区"
        }
      ]
    ],
    [
      [
        {
          code: "120101",
          name: "和平区"
        },
        {
          code: "120102",
          name: "河东区"
        },
        {
          code: "120103",
          name: "河西区"
        },
        {
          code: "120104",
          name: "南开区"
        },
        {
          code: "120105",
          name: "河北区"
        },
        {
          code: "120106",
          name: "红桥区"
        },
        {
          code: "120110",
          name: "东丽区"
        },
        {
          code: "120111",
          name: "西青区"
        },
        {
          code: "120112",
          name: "津南区"
        },
        {
          code: "120113",
          name: "北辰区"
        },
        {
          code: "120114",
          name: "武清区"
        },
        {
          code: "120115",
          name: "宝坻区"
        },
        {
          code: "120116",
          name: "滨海新区"
        },
        {
          code: "120117",
          name: "宁河区"
        },
        {
          code: "120118",
          name: "静海区"
        },
        {
          code: "120119",
          name: "蓟州区"
        }
      ]
    ],
    [
      [
        {
          code: "130102",
          name: "长安区"
        },
        {
          code: "130104",
          name: "桥西区"
        },
        {
          code: "130105",
          name: "新华区"
        },
        {
          code: "130107",
          name: "井陉矿区"
        },
        {
          code: "130108",
          name: "裕华区"
        },
        {
          code: "130109",
          name: "藁城区"
        },
        {
          code: "130110",
          name: "鹿泉区"
        },
        {
          code: "130111",
          name: "栾城区"
        },
        {
          code: "130121",
          name: "井陉县"
        },
        {
          code: "130123",
          name: "正定县"
        },
        {
          code: "130125",
          name: "行唐县"
        },
        {
          code: "130126",
          name: "灵寿县"
        },
        {
          code: "130127",
          name: "高邑县"
        },
        {
          code: "130128",
          name: "深泽县"
        },
        {
          code: "130129",
          name: "赞皇县"
        },
        {
          code: "130130",
          name: "无极县"
        },
        {
          code: "130131",
          name: "平山县"
        },
        {
          code: "130132",
          name: "元氏县"
        },
        {
          code: "130133",
          name: "赵县"
        },
        {
          code: "130181",
          name: "辛集市"
        },
        {
          code: "130183",
          name: "晋州市"
        },
        {
          code: "130184",
          name: "新乐市"
        }
      ],
      [
        {
          code: "130202",
          name: "路南区"
        },
        {
          code: "130203",
          name: "路北区"
        },
        {
          code: "130204",
          name: "古冶区"
        },
        {
          code: "130205",
          name: "开平区"
        },
        {
          code: "130207",
          name: "丰南区"
        },
        {
          code: "130208",
          name: "丰润区"
        },
        {
          code: "130209",
          name: "曹妃甸区"
        },
        {
          code: "130223",
          name: "滦县"
        },
        {
          code: "130224",
          name: "滦南县"
        },
        {
          code: "130225",
          name: "乐亭县"
        },
        {
          code: "130227",
          name: "迁西县"
        },
        {
          code: "130229",
          name: "玉田县"
        },
        {
          code: "130281",
          name: "遵化市"
        },
        {
          code: "130283",
          name: "迁安市"
        }
      ],
      [
        {
          code: "130302",
          name: "海港区"
        },
        {
          code: "130303",
          name: "山海关区"
        },
        {
          code: "130304",
          name: "北戴河区"
        },
        {
          code: "130306",
          name: "抚宁区"
        },
        {
          code: "130321",
          name: "青龙满族自治县"
        },
        {
          code: "130322",
          name: "昌黎县"
        },
        {
          code: "130324",
          name: "卢龙县"
        }
      ],
      [
        {
          code: "130402",
          name: "邯山区"
        },
        {
          code: "130403",
          name: "丛台区"
        },
        {
          code: "130404",
          name: "复兴区"
        },
        {
          code: "130406",
          name: "峰峰矿区"
        },
        {
          code: "130407",
          name: "肥乡区"
        },
        {
          code: "130408",
          name: "永年区"
        },
        {
          code: "130423",
          name: "临漳县"
        },
        {
          code: "130424",
          name: "成安县"
        },
        {
          code: "130425",
          name: "大名县"
        },
        {
          code: "130426",
          name: "涉县"
        },
        {
          code: "130427",
          name: "磁县"
        },
        {
          code: "130430",
          name: "邱县"
        },
        {
          code: "130431",
          name: "鸡泽县"
        },
        {
          code: "130432",
          name: "广平县"
        },
        {
          code: "130433",
          name: "馆陶县"
        },
        {
          code: "130434",
          name: "魏县"
        },
        {
          code: "130435",
          name: "曲周县"
        },
        {
          code: "130481",
          name: "武安市"
        }
      ],
      [
        {
          code: "130502",
          name: "桥东区"
        },
        {
          code: "130503",
          name: "桥西区"
        },
        {
          code: "130521",
          name: "邢台县"
        },
        {
          code: "130522",
          name: "临城县"
        },
        {
          code: "130523",
          name: "内丘县"
        },
        {
          code: "130524",
          name: "柏乡县"
        },
        {
          code: "130525",
          name: "隆尧县"
        },
        {
          code: "130526",
          name: "任县"
        },
        {
          code: "130527",
          name: "南和县"
        },
        {
          code: "130528",
          name: "宁晋县"
        },
        {
          code: "130529",
          name: "巨鹿县"
        },
        {
          code: "130530",
          name: "新河县"
        },
        {
          code: "130531",
          name: "广宗县"
        },
        {
          code: "130532",
          name: "平乡县"
        },
        {
          code: "130533",
          name: "威县"
        },
        {
          code: "130534",
          name: "清河县"
        },
        {
          code: "130535",
          name: "临西县"
        },
        {
          code: "130581",
          name: "南宫市"
        },
        {
          code: "130582",
          name: "沙河市"
        }
      ],
      [
        {
          code: "130602",
          name: "竞秀区"
        },
        {
          code: "130606",
          name: "莲池区"
        },
        {
          code: "130607",
          name: "满城区"
        },
        {
          code: "130608",
          name: "清苑区"
        },
        {
          code: "130609",
          name: "徐水区"
        },
        {
          code: "130623",
          name: "涞水县"
        },
        {
          code: "130624",
          name: "阜平县"
        },
        {
          code: "130626",
          name: "定兴县"
        },
        {
          code: "130627",
          name: "唐县"
        },
        {
          code: "130628",
          name: "高阳县"
        },
        {
          code: "130629",
          name: "容城县"
        },
        {
          code: "130630",
          name: "涞源县"
        },
        {
          code: "130631",
          name: "望都县"
        },
        {
          code: "130632",
          name: "安新县"
        },
        {
          code: "130633",
          name: "易县"
        },
        {
          code: "130634",
          name: "曲阳县"
        },
        {
          code: "130635",
          name: "蠡县"
        },
        {
          code: "130636",
          name: "顺平县"
        },
        {
          code: "130637",
          name: "博野县"
        },
        {
          code: "130638",
          name: "雄县"
        },
        {
          code: "130681",
          name: "涿州市"
        },
        {
          code: "130682",
          name: "定州市"
        },
        {
          code: "130683",
          name: "安国市"
        },
        {
          code: "130684",
          name: "高碑店市"
        }
      ],
      [
        {
          code: "130702",
          name: "桥东区"
        },
        {
          code: "130703",
          name: "桥西区"
        },
        {
          code: "130705",
          name: "宣化区"
        },
        {
          code: "130706",
          name: "下花园区"
        },
        {
          code: "130708",
          name: "万全区"
        },
        {
          code: "130709",
          name: "崇礼区"
        },
        {
          code: "130722",
          name: "张北县"
        },
        {
          code: "130723",
          name: "康保县"
        },
        {
          code: "130724",
          name: "沽源县"
        },
        {
          code: "130725",
          name: "尚义县"
        },
        {
          code: "130726",
          name: "蔚县"
        },
        {
          code: "130727",
          name: "阳原县"
        },
        {
          code: "130728",
          name: "怀安县"
        },
        {
          code: "130730",
          name: "怀来县"
        },
        {
          code: "130731",
          name: "涿鹿县"
        },
        {
          code: "130732",
          name: "赤城县"
        }
      ],
      [
        {
          code: "130802",
          name: "双桥区"
        },
        {
          code: "130803",
          name: "双滦区"
        },
        {
          code: "130804",
          name: "鹰手营子矿区"
        },
        {
          code: "130821",
          name: "承德县"
        },
        {
          code: "130822",
          name: "兴隆县"
        },
        {
          code: "130824",
          name: "滦平县"
        },
        {
          code: "130825",
          name: "隆化县"
        },
        {
          code: "130826",
          name: "丰宁满族自治县"
        },
        {
          code: "130827",
          name: "宽城满族自治县"
        },
        {
          code: "130828",
          name: "围场满族蒙古族自治县"
        },
        {
          code: "130881",
          name: "平泉市"
        }
      ],
      [
        {
          code: "130902",
          name: "新华区"
        },
        {
          code: "130903",
          name: "运河区"
        },
        {
          code: "130921",
          name: "沧县"
        },
        {
          code: "130922",
          name: "青县"
        },
        {
          code: "130923",
          name: "东光县"
        },
        {
          code: "130924",
          name: "海兴县"
        },
        {
          code: "130925",
          name: "盐山县"
        },
        {
          code: "130926",
          name: "肃宁县"
        },
        {
          code: "130927",
          name: "南皮县"
        },
        {
          code: "130928",
          name: "吴桥县"
        },
        {
          code: "130929",
          name: "献县"
        },
        {
          code: "130930",
          name: "孟村回族自治县"
        },
        {
          code: "130981",
          name: "泊头市"
        },
        {
          code: "130982",
          name: "任丘市"
        },
        {
          code: "130983",
          name: "黄骅市"
        },
        {
          code: "130984",
          name: "河间市"
        }
      ],
      [
        {
          code: "131002",
          name: "安次区"
        },
        {
          code: "131003",
          name: "广阳区"
        },
        {
          code: "131022",
          name: "固安县"
        },
        {
          code: "131023",
          name: "永清县"
        },
        {
          code: "131024",
          name: "香河县"
        },
        {
          code: "131025",
          name: "大城县"
        },
        {
          code: "131026",
          name: "文安县"
        },
        {
          code: "131028",
          name: "大厂回族自治县"
        },
        {
          code: "131081",
          name: "霸州市"
        },
        {
          code: "131082",
          name: "三河市"
        }
      ],
      [
        {
          code: "131102",
          name: "桃城区"
        },
        {
          code: "131103",
          name: "冀州区"
        },
        {
          code: "131121",
          name: "枣强县"
        },
        {
          code: "131122",
          name: "武邑县"
        },
        {
          code: "131123",
          name: "武强县"
        },
        {
          code: "131124",
          name: "饶阳县"
        },
        {
          code: "131125",
          name: "安平县"
        },
        {
          code: "131126",
          name: "故城县"
        },
        {
          code: "131127",
          name: "景县"
        },
        {
          code: "131128",
          name: "阜城县"
        },
        {
          code: "131182",
          name: "深州市"
        }
      ]
    ],
    [
      [
        {
          code: "140105",
          name: "小店区"
        },
        {
          code: "140106",
          name: "迎泽区"
        },
        {
          code: "140107",
          name: "杏花岭区"
        },
        {
          code: "140108",
          name: "尖草坪区"
        },
        {
          code: "140109",
          name: "万柏林区"
        },
        {
          code: "140110",
          name: "晋源区"
        },
        {
          code: "140121",
          name: "清徐县"
        },
        {
          code: "140122",
          name: "阳曲县"
        },
        {
          code: "140123",
          name: "娄烦县"
        },
        {
          code: "140181",
          name: "古交市"
        }
      ],
      [
        {
          code: "140202",
          name: "城区"
        },
        {
          code: "140203",
          name: "矿区"
        },
        {
          code: "140211",
          name: "南郊区"
        },
        {
          code: "140212",
          name: "新荣区"
        },
        {
          code: "140221",
          name: "阳高县"
        },
        {
          code: "140222",
          name: "天镇县"
        },
        {
          code: "140223",
          name: "广灵县"
        },
        {
          code: "140224",
          name: "灵丘县"
        },
        {
          code: "140225",
          name: "浑源县"
        },
        {
          code: "140226",
          name: "左云县"
        },
        {
          code: "140227",
          name: "大同县"
        }
      ],
      [
        {
          code: "140302",
          name: "城区"
        },
        {
          code: "140303",
          name: "矿区"
        },
        {
          code: "140311",
          name: "郊区"
        },
        {
          code: "140321",
          name: "平定县"
        },
        {
          code: "140322",
          name: "盂县"
        }
      ],
      [
        {
          code: "140402",
          name: "城区"
        },
        {
          code: "140411",
          name: "郊区"
        },
        {
          code: "140421",
          name: "长治县"
        },
        {
          code: "140423",
          name: "襄垣县"
        },
        {
          code: "140424",
          name: "屯留县"
        },
        {
          code: "140425",
          name: "平顺县"
        },
        {
          code: "140426",
          name: "黎城县"
        },
        {
          code: "140427",
          name: "壶关县"
        },
        {
          code: "140428",
          name: "长子县"
        },
        {
          code: "140429",
          name: "武乡县"
        },
        {
          code: "140430",
          name: "沁县"
        },
        {
          code: "140431",
          name: "沁源县"
        },
        {
          code: "140481",
          name: "潞城市"
        }
      ],
      [
        {
          code: "140502",
          name: "城区"
        },
        {
          code: "140521",
          name: "沁水县"
        },
        {
          code: "140522",
          name: "阳城县"
        },
        {
          code: "140524",
          name: "陵川县"
        },
        {
          code: "140525",
          name: "泽州县"
        },
        {
          code: "140581",
          name: "高平市"
        }
      ],
      [
        {
          code: "140602",
          name: "朔城区"
        },
        {
          code: "140603",
          name: "平鲁区"
        },
        {
          code: "140621",
          name: "山阴县"
        },
        {
          code: "140622",
          name: "应县"
        },
        {
          code: "140623",
          name: "右玉县"
        },
        {
          code: "140624",
          name: "怀仁县"
        }
      ],
      [
        {
          code: "140702",
          name: "榆次区"
        },
        {
          code: "140721",
          name: "榆社县"
        },
        {
          code: "140722",
          name: "左权县"
        },
        {
          code: "140723",
          name: "和顺县"
        },
        {
          code: "140724",
          name: "昔阳县"
        },
        {
          code: "140725",
          name: "寿阳县"
        },
        {
          code: "140726",
          name: "太谷县"
        },
        {
          code: "140727",
          name: "祁县"
        },
        {
          code: "140728",
          name: "平遥县"
        },
        {
          code: "140729",
          name: "灵石县"
        },
        {
          code: "140781",
          name: "介休市"
        }
      ],
      [
        {
          code: "140802",
          name: "盐湖区"
        },
        {
          code: "140821",
          name: "临猗县"
        },
        {
          code: "140822",
          name: "万荣县"
        },
        {
          code: "140823",
          name: "闻喜县"
        },
        {
          code: "140824",
          name: "稷山县"
        },
        {
          code: "140825",
          name: "新绛县"
        },
        {
          code: "140826",
          name: "绛县"
        },
        {
          code: "140827",
          name: "垣曲县"
        },
        {
          code: "140828",
          name: "夏县"
        },
        {
          code: "140829",
          name: "平陆县"
        },
        {
          code: "140830",
          name: "芮城县"
        },
        {
          code: "140881",
          name: "永济市"
        },
        {
          code: "140882",
          name: "河津市"
        }
      ],
      [
        {
          code: "140902",
          name: "忻府区"
        },
        {
          code: "140921",
          name: "定襄县"
        },
        {
          code: "140922",
          name: "五台县"
        },
        {
          code: "140923",
          name: "代县"
        },
        {
          code: "140924",
          name: "繁峙县"
        },
        {
          code: "140925",
          name: "宁武县"
        },
        {
          code: "140926",
          name: "静乐县"
        },
        {
          code: "140927",
          name: "神池县"
        },
        {
          code: "140928",
          name: "五寨县"
        },
        {
          code: "140929",
          name: "岢岚县"
        },
        {
          code: "140930",
          name: "河曲县"
        },
        {
          code: "140931",
          name: "保德县"
        },
        {
          code: "140932",
          name: "偏关县"
        },
        {
          code: "140981",
          name: "原平市"
        }
      ],
      [
        {
          code: "141002",
          name: "尧都区"
        },
        {
          code: "141021",
          name: "曲沃县"
        },
        {
          code: "141022",
          name: "翼城县"
        },
        {
          code: "141023",
          name: "襄汾县"
        },
        {
          code: "141024",
          name: "洪洞县"
        },
        {
          code: "141025",
          name: "古县"
        },
        {
          code: "141026",
          name: "安泽县"
        },
        {
          code: "141027",
          name: "浮山县"
        },
        {
          code: "141028",
          name: "吉县"
        },
        {
          code: "141029",
          name: "乡宁县"
        },
        {
          code: "141030",
          name: "大宁县"
        },
        {
          code: "141031",
          name: "隰县"
        },
        {
          code: "141032",
          name: "永和县"
        },
        {
          code: "141033",
          name: "蒲县"
        },
        {
          code: "141034",
          name: "汾西县"
        },
        {
          code: "141081",
          name: "侯马市"
        },
        {
          code: "141082",
          name: "霍州市"
        }
      ],
      [
        {
          code: "141102",
          name: "离石区"
        },
        {
          code: "141121",
          name: "文水县"
        },
        {
          code: "141122",
          name: "交城县"
        },
        {
          code: "141123",
          name: "兴县"
        },
        {
          code: "141124",
          name: "临县"
        },
        {
          code: "141125",
          name: "柳林县"
        },
        {
          code: "141126",
          name: "石楼县"
        },
        {
          code: "141127",
          name: "岚县"
        },
        {
          code: "141128",
          name: "方山县"
        },
        {
          code: "141129",
          name: "中阳县"
        },
        {
          code: "141130",
          name: "交口县"
        },
        {
          code: "141181",
          name: "孝义市"
        },
        {
          code: "141182",
          name: "汾阳市"
        }
      ]
    ],
    [
      [
        {
          code: "150102",
          name: "新城区"
        },
        {
          code: "150103",
          name: "回民区"
        },
        {
          code: "150104",
          name: "玉泉区"
        },
        {
          code: "150105",
          name: "赛罕区"
        },
        {
          code: "150121",
          name: "土默特左旗"
        },
        {
          code: "150122",
          name: "托克托县"
        },
        {
          code: "150123",
          name: "和林格尔县"
        },
        {
          code: "150124",
          name: "清水河县"
        },
        {
          code: "150125",
          name: "武川县"
        }
      ],
      [
        {
          code: "150202",
          name: "东河区"
        },
        {
          code: "150203",
          name: "昆都仑区"
        },
        {
          code: "150204",
          name: "青山区"
        },
        {
          code: "150205",
          name: "石拐区"
        },
        {
          code: "150206",
          name: "白云鄂博矿区"
        },
        {
          code: "150207",
          name: "九原区"
        },
        {
          code: "150221",
          name: "土默特右旗"
        },
        {
          code: "150222",
          name: "固阳县"
        },
        {
          code: "150223",
          name: "达尔罕茂明安联合旗"
        }
      ],
      [
        {
          code: "150302",
          name: "海勃湾区"
        },
        {
          code: "150303",
          name: "海南区"
        },
        {
          code: "150304",
          name: "乌达区"
        }
      ],
      [
        {
          code: "150402",
          name: "红山区"
        },
        {
          code: "150403",
          name: "元宝山区"
        },
        {
          code: "150404",
          name: "松山区"
        },
        {
          code: "150421",
          name: "阿鲁科尔沁旗"
        },
        {
          code: "150422",
          name: "巴林左旗"
        },
        {
          code: "150423",
          name: "巴林右旗"
        },
        {
          code: "150424",
          name: "林西县"
        },
        {
          code: "150425",
          name: "克什克腾旗"
        },
        {
          code: "150426",
          name: "翁牛特旗"
        },
        {
          code: "150428",
          name: "喀喇沁旗"
        },
        {
          code: "150429",
          name: "宁城县"
        },
        {
          code: "150430",
          name: "敖汉旗"
        }
      ],
      [
        {
          code: "150502",
          name: "科尔沁区"
        },
        {
          code: "150521",
          name: "科尔沁左翼中旗"
        },
        {
          code: "150522",
          name: "科尔沁左翼后旗"
        },
        {
          code: "150523",
          name: "开鲁县"
        },
        {
          code: "150524",
          name: "库伦旗"
        },
        {
          code: "150525",
          name: "奈曼旗"
        },
        {
          code: "150526",
          name: "扎鲁特旗"
        },
        {
          code: "150581",
          name: "霍林郭勒市"
        }
      ],
      [
        {
          code: "150602",
          name: "东胜区"
        },
        {
          code: "150603",
          name: "康巴什区"
        },
        {
          code: "150621",
          name: "达拉特旗"
        },
        {
          code: "150622",
          name: "准格尔旗"
        },
        {
          code: "150623",
          name: "鄂托克前旗"
        },
        {
          code: "150624",
          name: "鄂托克旗"
        },
        {
          code: "150625",
          name: "杭锦旗"
        },
        {
          code: "150626",
          name: "乌审旗"
        },
        {
          code: "150627",
          name: "伊金霍洛旗"
        }
      ],
      [
        {
          code: "150702",
          name: "海拉尔区"
        },
        {
          code: "150703",
          name: "扎赉诺尔区"
        },
        {
          code: "150721",
          name: "阿荣旗"
        },
        {
          code: "150722",
          name: "莫力达瓦达斡尔族自治旗"
        },
        {
          code: "150723",
          name: "鄂伦春自治旗"
        },
        {
          code: "150724",
          name: "鄂温克族自治旗"
        },
        {
          code: "150725",
          name: "陈巴尔虎旗"
        },
        {
          code: "150726",
          name: "新巴尔虎左旗"
        },
        {
          code: "150727",
          name: "新巴尔虎右旗"
        },
        {
          code: "150781",
          name: "满洲里市"
        },
        {
          code: "150782",
          name: "牙克石市"
        },
        {
          code: "150783",
          name: "扎兰屯市"
        },
        {
          code: "150784",
          name: "额尔古纳市"
        },
        {
          code: "150785",
          name: "根河市"
        }
      ],
      [
        {
          code: "150802",
          name: "临河区"
        },
        {
          code: "150821",
          name: "五原县"
        },
        {
          code: "150822",
          name: "磴口县"
        },
        {
          code: "150823",
          name: "乌拉特前旗"
        },
        {
          code: "150824",
          name: "乌拉特中旗"
        },
        {
          code: "150825",
          name: "乌拉特后旗"
        },
        {
          code: "150826",
          name: "杭锦后旗"
        }
      ],
      [
        {
          code: "150902",
          name: "集宁区"
        },
        {
          code: "150921",
          name: "卓资县"
        },
        {
          code: "150922",
          name: "化德县"
        },
        {
          code: "150923",
          name: "商都县"
        },
        {
          code: "150924",
          name: "兴和县"
        },
        {
          code: "150925",
          name: "凉城县"
        },
        {
          code: "150926",
          name: "察哈尔右翼前旗"
        },
        {
          code: "150927",
          name: "察哈尔右翼中旗"
        },
        {
          code: "150928",
          name: "察哈尔右翼后旗"
        },
        {
          code: "150929",
          name: "四子王旗"
        },
        {
          code: "150981",
          name: "丰镇市"
        }
      ],
      [
        {
          code: "152201",
          name: "乌兰浩特市"
        },
        {
          code: "152202",
          name: "阿尔山市"
        },
        {
          code: "152221",
          name: "科尔沁右翼前旗"
        },
        {
          code: "152222",
          name: "科尔沁右翼中旗"
        },
        {
          code: "152223",
          name: "扎赉特旗"
        },
        {
          code: "152224",
          name: "突泉县"
        }
      ],
      [
        {
          code: "152501",
          name: "二连浩特市"
        },
        {
          code: "152502",
          name: "锡林浩特市"
        },
        {
          code: "152522",
          name: "阿巴嘎旗"
        },
        {
          code: "152523",
          name: "苏尼特左旗"
        },
        {
          code: "152524",
          name: "苏尼特右旗"
        },
        {
          code: "152525",
          name: "东乌珠穆沁旗"
        },
        {
          code: "152526",
          name: "西乌珠穆沁旗"
        },
        {
          code: "152527",
          name: "太仆寺旗"
        },
        {
          code: "152528",
          name: "镶黄旗"
        },
        {
          code: "152529",
          name: "正镶白旗"
        },
        {
          code: "152530",
          name: "正蓝旗"
        },
        {
          code: "152531",
          name: "多伦县"
        }
      ],
      [
        {
          code: "152921",
          name: "阿拉善左旗"
        },
        {
          code: "152922",
          name: "阿拉善右旗"
        },
        {
          code: "152923",
          name: "额济纳旗"
        }
      ]
    ],
    [
      [
        {
          code: "210102",
          name: "和平区"
        },
        {
          code: "210103",
          name: "沈河区"
        },
        {
          code: "210104",
          name: "大东区"
        },
        {
          code: "210105",
          name: "皇姑区"
        },
        {
          code: "210106",
          name: "铁西区"
        },
        {
          code: "210111",
          name: "苏家屯区"
        },
        {
          code: "210112",
          name: "浑南区"
        },
        {
          code: "210113",
          name: "沈北新区"
        },
        {
          code: "210114",
          name: "于洪区"
        },
        {
          code: "210115",
          name: "辽中区"
        },
        {
          code: "210123",
          name: "康平县"
        },
        {
          code: "210124",
          name: "法库县"
        },
        {
          code: "210181",
          name: "新民市"
        }
      ],
      [
        {
          code: "210202",
          name: "中山区"
        },
        {
          code: "210203",
          name: "西岗区"
        },
        {
          code: "210204",
          name: "沙河口区"
        },
        {
          code: "210211",
          name: "甘井子区"
        },
        {
          code: "210212",
          name: "旅顺口区"
        },
        {
          code: "210213",
          name: "金州区"
        },
        {
          code: "210214",
          name: "普兰店区"
        },
        {
          code: "210224",
          name: "长海县"
        },
        {
          code: "210281",
          name: "瓦房店市"
        },
        {
          code: "210283",
          name: "庄河市"
        }
      ],
      [
        {
          code: "210302",
          name: "铁东区"
        },
        {
          code: "210303",
          name: "铁西区"
        },
        {
          code: "210304",
          name: "立山区"
        },
        {
          code: "210311",
          name: "千山区"
        },
        {
          code: "210321",
          name: "台安县"
        },
        {
          code: "210323",
          name: "岫岩满族自治县"
        },
        {
          code: "210381",
          name: "海城市"
        }
      ],
      [
        {
          code: "210402",
          name: "新抚区"
        },
        {
          code: "210403",
          name: "东洲区"
        },
        {
          code: "210404",
          name: "望花区"
        },
        {
          code: "210411",
          name: "顺城区"
        },
        {
          code: "210421",
          name: "抚顺县"
        },
        {
          code: "210422",
          name: "新宾满族自治县"
        },
        {
          code: "210423",
          name: "清原满族自治县"
        }
      ],
      [
        {
          code: "210502",
          name: "平山区"
        },
        {
          code: "210503",
          name: "溪湖区"
        },
        {
          code: "210504",
          name: "明山区"
        },
        {
          code: "210505",
          name: "南芬区"
        },
        {
          code: "210521",
          name: "本溪满族自治县"
        },
        {
          code: "210522",
          name: "桓仁满族自治县"
        }
      ],
      [
        {
          code: "210602",
          name: "元宝区"
        },
        {
          code: "210603",
          name: "振兴区"
        },
        {
          code: "210604",
          name: "振安区"
        },
        {
          code: "210624",
          name: "宽甸满族自治县"
        },
        {
          code: "210681",
          name: "东港市"
        },
        {
          code: "210682",
          name: "凤城市"
        }
      ],
      [
        {
          code: "210702",
          name: "古塔区"
        },
        {
          code: "210703",
          name: "凌河区"
        },
        {
          code: "210711",
          name: "太和区"
        },
        {
          code: "210726",
          name: "黑山县"
        },
        {
          code: "210727",
          name: "义县"
        },
        {
          code: "210781",
          name: "凌海市"
        },
        {
          code: "210782",
          name: "北镇市"
        }
      ],
      [
        {
          code: "210802",
          name: "站前区"
        },
        {
          code: "210803",
          name: "西市区"
        },
        {
          code: "210804",
          name: "鲅鱼圈区"
        },
        {
          code: "210811",
          name: "老边区"
        },
        {
          code: "210881",
          name: "盖州市"
        },
        {
          code: "210882",
          name: "大石桥市"
        }
      ],
      [
        {
          code: "210902",
          name: "海州区"
        },
        {
          code: "210903",
          name: "新邱区"
        },
        {
          code: "210904",
          name: "太平区"
        },
        {
          code: "210905",
          name: "清河门区"
        },
        {
          code: "210911",
          name: "细河区"
        },
        {
          code: "210921",
          name: "阜新蒙古族自治县"
        },
        {
          code: "210922",
          name: "彰武县"
        }
      ],
      [
        {
          code: "211002",
          name: "白塔区"
        },
        {
          code: "211003",
          name: "文圣区"
        },
        {
          code: "211004",
          name: "宏伟区"
        },
        {
          code: "211005",
          name: "弓长岭区"
        },
        {
          code: "211011",
          name: "太子河区"
        },
        {
          code: "211021",
          name: "辽阳县"
        },
        {
          code: "211081",
          name: "灯塔市"
        }
      ],
      [
        {
          code: "211102",
          name: "双台子区"
        },
        {
          code: "211103",
          name: "兴隆台区"
        },
        {
          code: "211104",
          name: "大洼区"
        },
        {
          code: "211122",
          name: "盘山县"
        }
      ],
      [
        {
          code: "211202",
          name: "银州区"
        },
        {
          code: "211204",
          name: "清河区"
        },
        {
          code: "211221",
          name: "铁岭县"
        },
        {
          code: "211223",
          name: "西丰县"
        },
        {
          code: "211224",
          name: "昌图县"
        },
        {
          code: "211281",
          name: "调兵山市"
        },
        {
          code: "211282",
          name: "开原市"
        }
      ],
      [
        {
          code: "211302",
          name: "双塔区"
        },
        {
          code: "211303",
          name: "龙城区"
        },
        {
          code: "211321",
          name: "朝阳县"
        },
        {
          code: "211322",
          name: "建平县"
        },
        {
          code: "211324",
          name: "喀喇沁左翼蒙古族自治县"
        },
        {
          code: "211381",
          name: "北票市"
        },
        {
          code: "211382",
          name: "凌源市"
        }
      ],
      [
        {
          code: "211402",
          name: "连山区"
        },
        {
          code: "211403",
          name: "龙港区"
        },
        {
          code: "211404",
          name: "南票区"
        },
        {
          code: "211421",
          name: "绥中县"
        },
        {
          code: "211422",
          name: "建昌县"
        },
        {
          code: "211481",
          name: "兴城市"
        }
      ]
    ],
    [
      [
        {
          code: "220102",
          name: "南关区"
        },
        {
          code: "220103",
          name: "宽城区"
        },
        {
          code: "220104",
          name: "朝阳区"
        },
        {
          code: "220105",
          name: "二道区"
        },
        {
          code: "220106",
          name: "绿园区"
        },
        {
          code: "220112",
          name: "双阳区"
        },
        {
          code: "220113",
          name: "九台区"
        },
        {
          code: "220122",
          name: "农安县"
        },
        {
          code: "220182",
          name: "榆树市"
        },
        {
          code: "220183",
          name: "德惠市"
        }
      ],
      [
        {
          code: "220202",
          name: "昌邑区"
        },
        {
          code: "220203",
          name: "龙潭区"
        },
        {
          code: "220204",
          name: "船营区"
        },
        {
          code: "220211",
          name: "丰满区"
        },
        {
          code: "220221",
          name: "永吉县"
        },
        {
          code: "220281",
          name: "蛟河市"
        },
        {
          code: "220282",
          name: "桦甸市"
        },
        {
          code: "220283",
          name: "舒兰市"
        },
        {
          code: "220284",
          name: "磐石市"
        }
      ],
      [
        {
          code: "220302",
          name: "铁西区"
        },
        {
          code: "220303",
          name: "铁东区"
        },
        {
          code: "220322",
          name: "梨树县"
        },
        {
          code: "220323",
          name: "伊通满族自治县"
        },
        {
          code: "220381",
          name: "公主岭市"
        },
        {
          code: "220382",
          name: "双辽市"
        }
      ],
      [
        {
          code: "220402",
          name: "龙山区"
        },
        {
          code: "220403",
          name: "西安区"
        },
        {
          code: "220421",
          name: "东丰县"
        },
        {
          code: "220422",
          name: "东辽县"
        }
      ],
      [
        {
          code: "220502",
          name: "东昌区"
        },
        {
          code: "220503",
          name: "二道江区"
        },
        {
          code: "220521",
          name: "通化县"
        },
        {
          code: "220523",
          name: "辉南县"
        },
        {
          code: "220524",
          name: "柳河县"
        },
        {
          code: "220581",
          name: "梅河口市"
        },
        {
          code: "220582",
          name: "集安市"
        }
      ],
      [
        {
          code: "220602",
          name: "浑江区"
        },
        {
          code: "220605",
          name: "江源区"
        },
        {
          code: "220621",
          name: "抚松县"
        },
        {
          code: "220622",
          name: "靖宇县"
        },
        {
          code: "220623",
          name: "长白朝鲜族自治县"
        },
        {
          code: "220681",
          name: "临江市"
        }
      ],
      [
        {
          code: "220702",
          name: "宁江区"
        },
        {
          code: "220721",
          name: "前郭尔罗斯蒙古族自治县"
        },
        {
          code: "220722",
          name: "长岭县"
        },
        {
          code: "220723",
          name: "乾安县"
        },
        {
          code: "220781",
          name: "扶余市"
        }
      ],
      [
        {
          code: "220802",
          name: "洮北区"
        },
        {
          code: "220821",
          name: "镇赉县"
        },
        {
          code: "220822",
          name: "通榆县"
        },
        {
          code: "220881",
          name: "洮南市"
        },
        {
          code: "220882",
          name: "大安市"
        }
      ],
      [
        {
          code: "222401",
          name: "延吉市"
        },
        {
          code: "222402",
          name: "图们市"
        },
        {
          code: "222403",
          name: "敦化市"
        },
        {
          code: "222404",
          name: "珲春市"
        },
        {
          code: "222405",
          name: "龙井市"
        },
        {
          code: "222406",
          name: "和龙市"
        },
        {
          code: "222424",
          name: "汪清县"
        },
        {
          code: "222426",
          name: "安图县"
        }
      ]
    ],
    [
      [
        {
          code: "230102",
          name: "道里区"
        },
        {
          code: "230103",
          name: "南岗区"
        },
        {
          code: "230104",
          name: "道外区"
        },
        {
          code: "230108",
          name: "平房区"
        },
        {
          code: "230109",
          name: "松北区"
        },
        {
          code: "230110",
          name: "香坊区"
        },
        {
          code: "230111",
          name: "呼兰区"
        },
        {
          code: "230112",
          name: "阿城区"
        },
        {
          code: "230113",
          name: "双城区"
        },
        {
          code: "230123",
          name: "依兰县"
        },
        {
          code: "230124",
          name: "方正县"
        },
        {
          code: "230125",
          name: "宾县"
        },
        {
          code: "230126",
          name: "巴彦县"
        },
        {
          code: "230127",
          name: "木兰县"
        },
        {
          code: "230128",
          name: "通河县"
        },
        {
          code: "230129",
          name: "延寿县"
        },
        {
          code: "230183",
          name: "尚志市"
        },
        {
          code: "230184",
          name: "五常市"
        }
      ],
      [
        {
          code: "230202",
          name: "龙沙区"
        },
        {
          code: "230203",
          name: "建华区"
        },
        {
          code: "230204",
          name: "铁锋区"
        },
        {
          code: "230205",
          name: "昂昂溪区"
        },
        {
          code: "230206",
          name: "富拉尔基区"
        },
        {
          code: "230207",
          name: "碾子山区"
        },
        {
          code: "230208",
          name: "梅里斯达斡尔族区"
        },
        {
          code: "230221",
          name: "龙江县"
        },
        {
          code: "230223",
          name: "依安县"
        },
        {
          code: "230224",
          name: "泰来县"
        },
        {
          code: "230225",
          name: "甘南县"
        },
        {
          code: "230227",
          name: "富裕县"
        },
        {
          code: "230229",
          name: "克山县"
        },
        {
          code: "230230",
          name: "克东县"
        },
        {
          code: "230231",
          name: "拜泉县"
        },
        {
          code: "230281",
          name: "讷河市"
        }
      ],
      [
        {
          code: "230302",
          name: "鸡冠区"
        },
        {
          code: "230303",
          name: "恒山区"
        },
        {
          code: "230304",
          name: "滴道区"
        },
        {
          code: "230305",
          name: "梨树区"
        },
        {
          code: "230306",
          name: "城子河区"
        },
        {
          code: "230307",
          name: "麻山区"
        },
        {
          code: "230321",
          name: "鸡东县"
        },
        {
          code: "230381",
          name: "虎林市"
        },
        {
          code: "230382",
          name: "密山市"
        }
      ],
      [
        {
          code: "230402",
          name: "向阳区"
        },
        {
          code: "230403",
          name: "工农区"
        },
        {
          code: "230404",
          name: "南山区"
        },
        {
          code: "230405",
          name: "兴安区"
        },
        {
          code: "230406",
          name: "东山区"
        },
        {
          code: "230407",
          name: "兴山区"
        },
        {
          code: "230421",
          name: "萝北县"
        },
        {
          code: "230422",
          name: "绥滨县"
        }
      ],
      [
        {
          code: "230502",
          name: "尖山区"
        },
        {
          code: "230503",
          name: "岭东区"
        },
        {
          code: "230505",
          name: "四方台区"
        },
        {
          code: "230506",
          name: "宝山区"
        },
        {
          code: "230521",
          name: "集贤县"
        },
        {
          code: "230522",
          name: "友谊县"
        },
        {
          code: "230523",
          name: "宝清县"
        },
        {
          code: "230524",
          name: "饶河县"
        }
      ],
      [
        {
          code: "230602",
          name: "萨尔图区"
        },
        {
          code: "230603",
          name: "龙凤区"
        },
        {
          code: "230604",
          name: "让胡路区"
        },
        {
          code: "230605",
          name: "红岗区"
        },
        {
          code: "230606",
          name: "大同区"
        },
        {
          code: "230621",
          name: "肇州县"
        },
        {
          code: "230622",
          name: "肇源县"
        },
        {
          code: "230623",
          name: "林甸县"
        },
        {
          code: "230624",
          name: "杜尔伯特蒙古族自治县"
        }
      ],
      [
        {
          code: "230702",
          name: "伊春区"
        },
        {
          code: "230703",
          name: "南岔区"
        },
        {
          code: "230704",
          name: "友好区"
        },
        {
          code: "230705",
          name: "西林区"
        },
        {
          code: "230706",
          name: "翠峦区"
        },
        {
          code: "230707",
          name: "新青区"
        },
        {
          code: "230708",
          name: "美溪区"
        },
        {
          code: "230709",
          name: "金山屯区"
        },
        {
          code: "230710",
          name: "五营区"
        },
        {
          code: "230711",
          name: "乌马河区"
        },
        {
          code: "230712",
          name: "汤旺河区"
        },
        {
          code: "230713",
          name: "带岭区"
        },
        {
          code: "230714",
          name: "乌伊岭区"
        },
        {
          code: "230715",
          name: "红星区"
        },
        {
          code: "230716",
          name: "上甘岭区"
        },
        {
          code: "230722",
          name: "嘉荫县"
        },
        {
          code: "230781",
          name: "铁力市"
        }
      ],
      [
        {
          code: "230803",
          name: "向阳区"
        },
        {
          code: "230804",
          name: "前进区"
        },
        {
          code: "230805",
          name: "东风区"
        },
        {
          code: "230811",
          name: "郊区"
        },
        {
          code: "230822",
          name: "桦南县"
        },
        {
          code: "230826",
          name: "桦川县"
        },
        {
          code: "230828",
          name: "汤原县"
        },
        {
          code: "230881",
          name: "同江市"
        },
        {
          code: "230882",
          name: "富锦市"
        },
        {
          code: "230883",
          name: "抚远市"
        }
      ],
      [
        {
          code: "230902",
          name: "新兴区"
        },
        {
          code: "230903",
          name: "桃山区"
        },
        {
          code: "230904",
          name: "茄子河区"
        },
        {
          code: "230921",
          name: "勃利县"
        }
      ],
      [
        {
          code: "231002",
          name: "东安区"
        },
        {
          code: "231003",
          name: "阳明区"
        },
        {
          code: "231004",
          name: "爱民区"
        },
        {
          code: "231005",
          name: "西安区"
        },
        {
          code: "231025",
          name: "林口县"
        },
        {
          code: "231081",
          name: "绥芬河市"
        },
        {
          code: "231083",
          name: "海林市"
        },
        {
          code: "231084",
          name: "宁安市"
        },
        {
          code: "231085",
          name: "穆棱市"
        },
        {
          code: "231086",
          name: "东宁市"
        }
      ],
      [
        {
          code: "231102",
          name: "爱辉区"
        },
        {
          code: "231121",
          name: "嫩江县"
        },
        {
          code: "231123",
          name: "逊克县"
        },
        {
          code: "231124",
          name: "孙吴县"
        },
        {
          code: "231181",
          name: "北安市"
        },
        {
          code: "231182",
          name: "五大连池市"
        }
      ],
      [
        {
          code: "231202",
          name: "北林区"
        },
        {
          code: "231221",
          name: "望奎县"
        },
        {
          code: "231222",
          name: "兰西县"
        },
        {
          code: "231223",
          name: "青冈县"
        },
        {
          code: "231224",
          name: "庆安县"
        },
        {
          code: "231225",
          name: "明水县"
        },
        {
          code: "231226",
          name: "绥棱县"
        },
        {
          code: "231281",
          name: "安达市"
        },
        {
          code: "231282",
          name: "肇东市"
        },
        {
          code: "231283",
          name: "海伦市"
        }
      ],
      [
        {
          code: "232701",
          name: "加格达奇区"
        },
        {
          code: "232702",
          name: "松岭区"
        },
        {
          code: "232703",
          name: "新林区"
        },
        {
          code: "232704",
          name: "呼中区"
        },
        {
          code: "232721",
          name: "呼玛县"
        },
        {
          code: "232722",
          name: "塔河县"
        },
        {
          code: "232723",
          name: "漠河县"
        }
      ]
    ],
    [
      [
        {
          code: "310101",
          name: "黄浦区"
        },
        {
          code: "310104",
          name: "徐汇区"
        },
        {
          code: "310105",
          name: "长宁区"
        },
        {
          code: "310106",
          name: "静安区"
        },
        {
          code: "310107",
          name: "普陀区"
        },
        {
          code: "310109",
          name: "虹口区"
        },
        {
          code: "310110",
          name: "杨浦区"
        },
        {
          code: "310112",
          name: "闵行区"
        },
        {
          code: "310113",
          name: "宝山区"
        },
        {
          code: "310114",
          name: "嘉定区"
        },
        {
          code: "310115",
          name: "浦东新区"
        },
        {
          code: "310116",
          name: "金山区"
        },
        {
          code: "310117",
          name: "松江区"
        },
        {
          code: "310118",
          name: "青浦区"
        },
        {
          code: "310120",
          name: "奉贤区"
        },
        {
          code: "310151",
          name: "崇明区"
        }
      ]
    ],
    [
      [
        {
          code: "320102",
          name: "玄武区"
        },
        {
          code: "320104",
          name: "秦淮区"
        },
        {
          code: "320105",
          name: "建邺区"
        },
        {
          code: "320106",
          name: "鼓楼区"
        },
        {
          code: "320111",
          name: "浦口区"
        },
        {
          code: "320113",
          name: "栖霞区"
        },
        {
          code: "320114",
          name: "雨花台区"
        },
        {
          code: "320115",
          name: "江宁区"
        },
        {
          code: "320116",
          name: "六合区"
        },
        {
          code: "320117",
          name: "溧水区"
        },
        {
          code: "320118",
          name: "高淳区"
        }
      ],
      [
        {
          code: "320205",
          name: "锡山区"
        },
        {
          code: "320206",
          name: "惠山区"
        },
        {
          code: "320211",
          name: "滨湖区"
        },
        {
          code: "320213",
          name: "梁溪区"
        },
        {
          code: "320214",
          name: "新吴区"
        },
        {
          code: "320281",
          name: "江阴市"
        },
        {
          code: "320282",
          name: "宜兴市"
        }
      ],
      [
        {
          code: "320302",
          name: "鼓楼区"
        },
        {
          code: "320303",
          name: "云龙区"
        },
        {
          code: "320305",
          name: "贾汪区"
        },
        {
          code: "320311",
          name: "泉山区"
        },
        {
          code: "320312",
          name: "铜山区"
        },
        {
          code: "320321",
          name: "丰县"
        },
        {
          code: "320322",
          name: "沛县"
        },
        {
          code: "320324",
          name: "睢宁县"
        },
        {
          code: "320381",
          name: "新沂市"
        },
        {
          code: "320382",
          name: "邳州市"
        }
      ],
      [
        {
          code: "320402",
          name: "天宁区"
        },
        {
          code: "320404",
          name: "钟楼区"
        },
        {
          code: "320411",
          name: "新北区"
        },
        {
          code: "320412",
          name: "武进区"
        },
        {
          code: "320413",
          name: "金坛区"
        },
        {
          code: "320481",
          name: "溧阳市"
        }
      ],
      [
        {
          code: "320505",
          name: "虎丘区"
        },
        {
          code: "320506",
          name: "吴中区"
        },
        {
          code: "320507",
          name: "相城区"
        },
        {
          code: "320508",
          name: "姑苏区"
        },
        {
          code: "320509",
          name: "吴江区"
        },
        {
          code: "320581",
          name: "常熟市"
        },
        {
          code: "320582",
          name: "张家港市"
        },
        {
          code: "320583",
          name: "昆山市"
        },
        {
          code: "320585",
          name: "太仓市"
        }
      ],
      [
        {
          code: "320602",
          name: "崇川区"
        },
        {
          code: "320611",
          name: "港闸区"
        },
        {
          code: "320612",
          name: "通州区"
        },
        {
          code: "320621",
          name: "海安县"
        },
        {
          code: "320623",
          name: "如东县"
        },
        {
          code: "320681",
          name: "启东市"
        },
        {
          code: "320682",
          name: "如皋市"
        },
        {
          code: "320684",
          name: "海门市"
        }
      ],
      [
        {
          code: "320703",
          name: "连云区"
        },
        {
          code: "320706",
          name: "海州区"
        },
        {
          code: "320707",
          name: "赣榆区"
        },
        {
          code: "320722",
          name: "东海县"
        },
        {
          code: "320723",
          name: "灌云县"
        },
        {
          code: "320724",
          name: "灌南县"
        }
      ],
      [
        {
          code: "320803",
          name: "淮安区"
        },
        {
          code: "320804",
          name: "淮阴区"
        },
        {
          code: "320812",
          name: "清江浦区"
        },
        {
          code: "320813",
          name: "洪泽区"
        },
        {
          code: "320826",
          name: "涟水县"
        },
        {
          code: "320830",
          name: "盱眙县"
        },
        {
          code: "320831",
          name: "金湖县"
        }
      ],
      [
        {
          code: "320902",
          name: "亭湖区"
        },
        {
          code: "320903",
          name: "盐都区"
        },
        {
          code: "320904",
          name: "大丰区"
        },
        {
          code: "320921",
          name: "响水县"
        },
        {
          code: "320922",
          name: "滨海县"
        },
        {
          code: "320923",
          name: "阜宁县"
        },
        {
          code: "320924",
          name: "射阳县"
        },
        {
          code: "320925",
          name: "建湖县"
        },
        {
          code: "320981",
          name: "东台市"
        }
      ],
      [
        {
          code: "321002",
          name: "广陵区"
        },
        {
          code: "321003",
          name: "邗江区"
        },
        {
          code: "321012",
          name: "江都区"
        },
        {
          code: "321023",
          name: "宝应县"
        },
        {
          code: "321081",
          name: "仪征市"
        },
        {
          code: "321084",
          name: "高邮市"
        }
      ],
      [
        {
          code: "321102",
          name: "京口区"
        },
        {
          code: "321111",
          name: "润州区"
        },
        {
          code: "321112",
          name: "丹徒区"
        },
        {
          code: "321181",
          name: "丹阳市"
        },
        {
          code: "321182",
          name: "扬中市"
        },
        {
          code: "321183",
          name: "句容市"
        }
      ],
      [
        {
          code: "321202",
          name: "海陵区"
        },
        {
          code: "321203",
          name: "高港区"
        },
        {
          code: "321204",
          name: "姜堰区"
        },
        {
          code: "321281",
          name: "兴化市"
        },
        {
          code: "321282",
          name: "靖江市"
        },
        {
          code: "321283",
          name: "泰兴市"
        }
      ],
      [
        {
          code: "321302",
          name: "宿城区"
        },
        {
          code: "321311",
          name: "宿豫区"
        },
        {
          code: "321322",
          name: "沭阳县"
        },
        {
          code: "321323",
          name: "泗阳县"
        },
        {
          code: "321324",
          name: "泗洪县"
        }
      ]
    ],
    [
      [
        {
          code: "330102",
          name: "上城区"
        },
        {
          code: "330105",
          name: "拱墅区"
        },
        {
          code: "330106",
          name: "西湖区"
        },
        {
          code: "330108",
          name: "滨江区"
        },
        {
          code: "330109",
          name: "萧山区"
        },
        {
          code: "330110",
          name: "余杭区"
        },
        {
          code: "330111",
          name: "富阳区"
        },
        {
          code: "330112",
          name: "临安区"
        },
        {
          code: "330113",
          name: "临平区"
        },
        {
          code: "330114",
          name: "钱塘区"
        },
        {
          code: "330122",
          name: "桐庐县"
        },
        {
          code: "330127",
          name: "淳安县"
        },
        {
          code: "330182",
          name: "建德市"
        }
      ],
      [
        {
          code: "330203",
          name: "海曙区"
        },
        {
          code: "330205",
          name: "江北区"
        },
        {
          code: "330206",
          name: "北仑区"
        },
        {
          code: "330211",
          name: "镇海区"
        },
        {
          code: "330212",
          name: "鄞州区"
        },
        {
          code: "330213",
          name: "奉化区"
        },
        {
          code: "330225",
          name: "象山县"
        },
        {
          code: "330226",
          name: "宁海县"
        },
        {
          code: "330281",
          name: "余姚市"
        },
        {
          code: "330282",
          name: "慈溪市"
        }
      ],
      [
        {
          code: "330302",
          name: "鹿城区"
        },
        {
          code: "330303",
          name: "龙湾区"
        },
        {
          code: "330304",
          name: "瓯海区"
        },
        {
          code: "330305",
          name: "洞头区"
        },
        {
          code: "330324",
          name: "永嘉县"
        },
        {
          code: "330326",
          name: "平阳县"
        },
        {
          code: "330327",
          name: "苍南县"
        },
        {
          code: "330328",
          name: "文成县"
        },
        {
          code: "330329",
          name: "泰顺县"
        },
        {
          code: "330381",
          name: "瑞安市"
        },
        {
          code: "330382",
          name: "乐清市"
        }
      ],
      [
        {
          code: "330402",
          name: "南湖区"
        },
        {
          code: "330411",
          name: "秀洲区"
        },
        {
          code: "330421",
          name: "嘉善县"
        },
        {
          code: "330424",
          name: "海盐县"
        },
        {
          code: "330481",
          name: "海宁市"
        },
        {
          code: "330482",
          name: "平湖市"
        },
        {
          code: "330483",
          name: "桐乡市"
        }
      ],
      [
        {
          code: "330502",
          name: "吴兴区"
        },
        {
          code: "330503",
          name: "南浔区"
        },
        {
          code: "330521",
          name: "德清县"
        },
        {
          code: "330522",
          name: "长兴县"
        },
        {
          code: "330523",
          name: "安吉县"
        }
      ],
      [
        {
          code: "330602",
          name: "越城区"
        },
        {
          code: "330603",
          name: "柯桥区"
        },
        {
          code: "330604",
          name: "上虞区"
        },
        {
          code: "330624",
          name: "新昌县"
        },
        {
          code: "330681",
          name: "诸暨市"
        },
        {
          code: "330683",
          name: "嵊州市"
        }
      ],
      [
        {
          code: "330702",
          name: "婺城区"
        },
        {
          code: "330703",
          name: "金东区"
        },
        {
          code: "330723",
          name: "武义县"
        },
        {
          code: "330726",
          name: "浦江县"
        },
        {
          code: "330727",
          name: "磐安县"
        },
        {
          code: "330781",
          name: "兰溪市"
        },
        {
          code: "330782",
          name: "义乌市"
        },
        {
          code: "330783",
          name: "东阳市"
        },
        {
          code: "330784",
          name: "永康市"
        }
      ],
      [
        {
          code: "330802",
          name: "柯城区"
        },
        {
          code: "330803",
          name: "衢江区"
        },
        {
          code: "330822",
          name: "常山县"
        },
        {
          code: "330824",
          name: "开化县"
        },
        {
          code: "330825",
          name: "龙游县"
        },
        {
          code: "330881",
          name: "江山市"
        }
      ],
      [
        {
          code: "330902",
          name: "定海区"
        },
        {
          code: "330903",
          name: "普陀区"
        },
        {
          code: "330921",
          name: "岱山县"
        },
        {
          code: "330922",
          name: "嵊泗县"
        }
      ],
      [
        {
          code: "331002",
          name: "椒江区"
        },
        {
          code: "331003",
          name: "黄岩区"
        },
        {
          code: "331004",
          name: "路桥区"
        },
        {
          code: "331022",
          name: "三门县"
        },
        {
          code: "331023",
          name: "天台县"
        },
        {
          code: "331024",
          name: "仙居县"
        },
        {
          code: "331081",
          name: "温岭市"
        },
        {
          code: "331082",
          name: "临海市"
        },
        {
          code: "331083",
          name: "玉环市"
        }
      ],
      [
        {
          code: "331102",
          name: "莲都区"
        },
        {
          code: "331121",
          name: "青田县"
        },
        {
          code: "331122",
          name: "缙云县"
        },
        {
          code: "331123",
          name: "遂昌县"
        },
        {
          code: "331124",
          name: "松阳县"
        },
        {
          code: "331125",
          name: "云和县"
        },
        {
          code: "331126",
          name: "庆元县"
        },
        {
          code: "331127",
          name: "景宁畲族自治县"
        },
        {
          code: "331181",
          name: "龙泉市"
        }
      ]
    ],
    [
      [
        {
          code: "340102",
          name: "瑶海区"
        },
        {
          code: "340103",
          name: "庐阳区"
        },
        {
          code: "340104",
          name: "蜀山区"
        },
        {
          code: "340111",
          name: "包河区"
        },
        {
          code: "340121",
          name: "长丰县"
        },
        {
          code: "340122",
          name: "肥东县"
        },
        {
          code: "340123",
          name: "肥西县"
        },
        {
          code: "340124",
          name: "庐江县"
        },
        {
          code: "340181",
          name: "巢湖市"
        }
      ],
      [
        {
          code: "340202",
          name: "镜湖区"
        },
        {
          code: "340203",
          name: "弋江区"
        },
        {
          code: "340207",
          name: "鸠江区"
        },
        {
          code: "340208",
          name: "三山区"
        },
        {
          code: "340221",
          name: "芜湖县"
        },
        {
          code: "340222",
          name: "繁昌县"
        },
        {
          code: "340223",
          name: "南陵县"
        },
        {
          code: "340225",
          name: "无为县"
        }
      ],
      [
        {
          code: "340302",
          name: "龙子湖区"
        },
        {
          code: "340303",
          name: "蚌山区"
        },
        {
          code: "340304",
          name: "禹会区"
        },
        {
          code: "340311",
          name: "淮上区"
        },
        {
          code: "340321",
          name: "怀远县"
        },
        {
          code: "340322",
          name: "五河县"
        },
        {
          code: "340323",
          name: "固镇县"
        }
      ],
      [
        {
          code: "340402",
          name: "大通区"
        },
        {
          code: "340403",
          name: "田家庵区"
        },
        {
          code: "340404",
          name: "谢家集区"
        },
        {
          code: "340405",
          name: "八公山区"
        },
        {
          code: "340406",
          name: "潘集区"
        },
        {
          code: "340421",
          name: "凤台县"
        },
        {
          code: "340422",
          name: "寿县"
        }
      ],
      [
        {
          code: "340503",
          name: "花山区"
        },
        {
          code: "340504",
          name: "雨山区"
        },
        {
          code: "340506",
          name: "博望区"
        },
        {
          code: "340521",
          name: "当涂县"
        },
        {
          code: "340522",
          name: "含山县"
        },
        {
          code: "340523",
          name: "和县"
        }
      ],
      [
        {
          code: "340602",
          name: "杜集区"
        },
        {
          code: "340603",
          name: "相山区"
        },
        {
          code: "340604",
          name: "烈山区"
        },
        {
          code: "340621",
          name: "濉溪县"
        }
      ],
      [
        {
          code: "340705",
          name: "铜官区"
        },
        {
          code: "340706",
          name: "义安区"
        },
        {
          code: "340711",
          name: "郊区"
        },
        {
          code: "340722",
          name: "枞阳县"
        }
      ],
      [
        {
          code: "340802",
          name: "迎江区"
        },
        {
          code: "340803",
          name: "大观区"
        },
        {
          code: "340811",
          name: "宜秀区"
        },
        {
          code: "340822",
          name: "怀宁县"
        },
        {
          code: "340824",
          name: "潜山县"
        },
        {
          code: "340825",
          name: "太湖县"
        },
        {
          code: "340826",
          name: "宿松县"
        },
        {
          code: "340827",
          name: "望江县"
        },
        {
          code: "340828",
          name: "岳西县"
        },
        {
          code: "340881",
          name: "桐城市"
        }
      ],
      [
        {
          code: "341002",
          name: "屯溪区"
        },
        {
          code: "341003",
          name: "黄山区"
        },
        {
          code: "341004",
          name: "徽州区"
        },
        {
          code: "341021",
          name: "歙县"
        },
        {
          code: "341022",
          name: "休宁县"
        },
        {
          code: "341023",
          name: "黟县"
        },
        {
          code: "341024",
          name: "祁门县"
        }
      ],
      [
        {
          code: "341102",
          name: "琅琊区"
        },
        {
          code: "341103",
          name: "南谯区"
        },
        {
          code: "341122",
          name: "来安县"
        },
        {
          code: "341124",
          name: "全椒县"
        },
        {
          code: "341125",
          name: "定远县"
        },
        {
          code: "341126",
          name: "凤阳县"
        },
        {
          code: "341181",
          name: "天长市"
        },
        {
          code: "341182",
          name: "明光市"
        }
      ],
      [
        {
          code: "341202",
          name: "颍州区"
        },
        {
          code: "341203",
          name: "颍东区"
        },
        {
          code: "341204",
          name: "颍泉区"
        },
        {
          code: "341221",
          name: "临泉县"
        },
        {
          code: "341222",
          name: "太和县"
        },
        {
          code: "341225",
          name: "阜南县"
        },
        {
          code: "341226",
          name: "颍上县"
        },
        {
          code: "341282",
          name: "界首市"
        }
      ],
      [
        {
          code: "341302",
          name: "埇桥区"
        },
        {
          code: "341321",
          name: "砀山县"
        },
        {
          code: "341322",
          name: "萧县"
        },
        {
          code: "341323",
          name: "灵璧县"
        },
        {
          code: "341324",
          name: "泗县"
        }
      ],
      [
        {
          code: "341502",
          name: "金安区"
        },
        {
          code: "341503",
          name: "裕安区"
        },
        {
          code: "341504",
          name: "叶集区"
        },
        {
          code: "341522",
          name: "霍邱县"
        },
        {
          code: "341523",
          name: "舒城县"
        },
        {
          code: "341524",
          name: "金寨县"
        },
        {
          code: "341525",
          name: "霍山县"
        }
      ],
      [
        {
          code: "341602",
          name: "谯城区"
        },
        {
          code: "341621",
          name: "涡阳县"
        },
        {
          code: "341622",
          name: "蒙城县"
        },
        {
          code: "341623",
          name: "利辛县"
        }
      ],
      [
        {
          code: "341702",
          name: "贵池区"
        },
        {
          code: "341721",
          name: "东至县"
        },
        {
          code: "341722",
          name: "石台县"
        },
        {
          code: "341723",
          name: "青阳县"
        }
      ],
      [
        {
          code: "341802",
          name: "宣州区"
        },
        {
          code: "341821",
          name: "郎溪县"
        },
        {
          code: "341822",
          name: "广德县"
        },
        {
          code: "341823",
          name: "泾县"
        },
        {
          code: "341824",
          name: "绩溪县"
        },
        {
          code: "341825",
          name: "旌德县"
        },
        {
          code: "341881",
          name: "宁国市"
        }
      ]
    ],
    [
      [
        {
          code: "350102",
          name: "鼓楼区"
        },
        {
          code: "350103",
          name: "台江区"
        },
        {
          code: "350104",
          name: "仓山区"
        },
        {
          code: "350105",
          name: "马尾区"
        },
        {
          code: "350111",
          name: "晋安区"
        },
        {
          code: "350112",
          name: "长乐区"
        },
        {
          code: "350121",
          name: "闽侯县"
        },
        {
          code: "350122",
          name: "连江县"
        },
        {
          code: "350123",
          name: "罗源县"
        },
        {
          code: "350124",
          name: "闽清县"
        },
        {
          code: "350125",
          name: "永泰县"
        },
        {
          code: "350128",
          name: "平潭县"
        },
        {
          code: "350181",
          name: "福清市"
        }
      ],
      [
        {
          code: "350203",
          name: "思明区"
        },
        {
          code: "350205",
          name: "海沧区"
        },
        {
          code: "350206",
          name: "湖里区"
        },
        {
          code: "350211",
          name: "集美区"
        },
        {
          code: "350212",
          name: "同安区"
        },
        {
          code: "350213",
          name: "翔安区"
        }
      ],
      [
        {
          code: "350302",
          name: "城厢区"
        },
        {
          code: "350303",
          name: "涵江区"
        },
        {
          code: "350304",
          name: "荔城区"
        },
        {
          code: "350305",
          name: "秀屿区"
        },
        {
          code: "350322",
          name: "仙游县"
        }
      ],
      [
        {
          code: "350404",
          name: "三元区"
        },
        {
          code: "350405",
          name: "沙县区"
        },
        {
          code: "350421",
          name: "明溪县"
        },
        {
          code: "350423",
          name: "清流县"
        },
        {
          code: "350424",
          name: "宁化县"
        },
        {
          code: "350425",
          name: "大田县"
        },
        {
          code: "350426",
          name: "尤溪县"
        },
        {
          code: "350428",
          name: "将乐县"
        },
        {
          code: "350429",
          name: "泰宁县"
        },
        {
          code: "350430",
          name: "建宁县"
        },
        {
          code: "350481",
          name: "永安市"
        }
      ],
      [
        {
          code: "350502",
          name: "鲤城区"
        },
        {
          code: "350503",
          name: "丰泽区"
        },
        {
          code: "350504",
          name: "洛江区"
        },
        {
          code: "350505",
          name: "泉港区"
        },
        {
          code: "350521",
          name: "惠安县"
        },
        {
          code: "350524",
          name: "安溪县"
        },
        {
          code: "350525",
          name: "永春县"
        },
        {
          code: "350526",
          name: "德化县"
        },
        {
          code: "350527",
          name: "金门县"
        },
        {
          code: "350581",
          name: "石狮市"
        },
        {
          code: "350582",
          name: "晋江市"
        },
        {
          code: "350583",
          name: "南安市"
        }
      ],
      [
        {
          code: "350602",
          name: "芗城区"
        },
        {
          code: "350603",
          name: "龙文区"
        },
        {
          code: "350604",
          name: "龙海区"
        },
        {
          code: "350605",
          name: "长泰区"
        },
        {
          code: "350622",
          name: "云霄县"
        },
        {
          code: "350623",
          name: "漳浦县"
        },
        {
          code: "350624",
          name: "诏安县"
        },
        {
          code: "350626",
          name: "东山县"
        },
        {
          code: "350627",
          name: "南靖县"
        },
        {
          code: "350628",
          name: "平和县"
        },
        {
          code: "350629",
          name: "华安县"
        }
      ],
      [
        {
          code: "350702",
          name: "延平区"
        },
        {
          code: "350703",
          name: "建阳区"
        },
        {
          code: "350721",
          name: "顺昌县"
        },
        {
          code: "350722",
          name: "浦城县"
        },
        {
          code: "350723",
          name: "光泽县"
        },
        {
          code: "350724",
          name: "松溪县"
        },
        {
          code: "350725",
          name: "政和县"
        },
        {
          code: "350781",
          name: "邵武市"
        },
        {
          code: "350782",
          name: "武夷山市"
        },
        {
          code: "350783",
          name: "建瓯市"
        }
      ],
      [
        {
          code: "350802",
          name: "新罗区"
        },
        {
          code: "350803",
          name: "永定区"
        },
        {
          code: "350821",
          name: "长汀县"
        },
        {
          code: "350823",
          name: "上杭县"
        },
        {
          code: "350824",
          name: "武平县"
        },
        {
          code: "350825",
          name: "连城县"
        },
        {
          code: "350881",
          name: "漳平市"
        }
      ],
      [
        {
          code: "350902",
          name: "蕉城区"
        },
        {
          code: "350921",
          name: "霞浦县"
        },
        {
          code: "350922",
          name: "古田县"
        },
        {
          code: "350923",
          name: "屏南县"
        },
        {
          code: "350924",
          name: "寿宁县"
        },
        {
          code: "350925",
          name: "周宁县"
        },
        {
          code: "350926",
          name: "柘荣县"
        },
        {
          code: "350981",
          name: "福安市"
        },
        {
          code: "350982",
          name: "福鼎市"
        }
      ]
    ],
    [
      [
        {
          code: "360102",
          name: "东湖区"
        },
        {
          code: "360103",
          name: "西湖区"
        },
        {
          code: "360104",
          name: "青云谱区"
        },
        {
          code: "360105",
          name: "湾里区"
        },
        {
          code: "360111",
          name: "青山湖区"
        },
        {
          code: "360112",
          name: "新建区"
        },
        {
          code: "360121",
          name: "南昌县"
        },
        {
          code: "360123",
          name: "安义县"
        },
        {
          code: "360124",
          name: "进贤县"
        }
      ],
      [
        {
          code: "360202",
          name: "昌江区"
        },
        {
          code: "360203",
          name: "珠山区"
        },
        {
          code: "360222",
          name: "浮梁县"
        },
        {
          code: "360281",
          name: "乐平市"
        }
      ],
      [
        {
          code: "360302",
          name: "安源区"
        },
        {
          code: "360313",
          name: "湘东区"
        },
        {
          code: "360321",
          name: "莲花县"
        },
        {
          code: "360322",
          name: "上栗县"
        },
        {
          code: "360323",
          name: "芦溪县"
        }
      ],
      [
        {
          code: "360402",
          name: "濂溪区"
        },
        {
          code: "360403",
          name: "浔阳区"
        },
        {
          code: "360404",
          name: "柴桑区"
        },
        {
          code: "360423",
          name: "武宁县"
        },
        {
          code: "360424",
          name: "修水县"
        },
        {
          code: "360425",
          name: "永修县"
        },
        {
          code: "360426",
          name: "德安县"
        },
        {
          code: "360428",
          name: "都昌县"
        },
        {
          code: "360429",
          name: "湖口县"
        },
        {
          code: "360430",
          name: "彭泽县"
        },
        {
          code: "360481",
          name: "瑞昌市"
        },
        {
          code: "360482",
          name: "共青城市"
        },
        {
          code: "360483",
          name: "庐山市"
        }
      ],
      [
        {
          code: "360502",
          name: "渝水区"
        },
        {
          code: "360521",
          name: "分宜县"
        }
      ],
      [
        {
          code: "360602",
          name: "月湖区"
        },
        {
          code: "360622",
          name: "余江区"
        },
        {
          code: "360681",
          name: "贵溪市"
        }
      ],
      [
        {
          code: "360702",
          name: "章贡区"
        },
        {
          code: "360703",
          name: "南康区"
        },
        {
          code: "360704",
          name: "赣县区"
        },
        {
          code: "360722",
          name: "信丰县"
        },
        {
          code: "360723",
          name: "大余县"
        },
        {
          code: "360724",
          name: "上犹县"
        },
        {
          code: "360725",
          name: "崇义县"
        },
        {
          code: "360726",
          name: "安远县"
        },
        {
          code: "360727",
          name: "龙南县"
        },
        {
          code: "360728",
          name: "定南县"
        },
        {
          code: "360729",
          name: "全南县"
        },
        {
          code: "360730",
          name: "宁都县"
        },
        {
          code: "360731",
          name: "于都县"
        },
        {
          code: "360732",
          name: "兴国县"
        },
        {
          code: "360733",
          name: "会昌县"
        },
        {
          code: "360734",
          name: "寻乌县"
        },
        {
          code: "360735",
          name: "石城县"
        },
        {
          code: "360781",
          name: "瑞金市"
        }
      ],
      [
        {
          code: "360802",
          name: "吉州区"
        },
        {
          code: "360803",
          name: "青原区"
        },
        {
          code: "360821",
          name: "吉安县"
        },
        {
          code: "360822",
          name: "吉水县"
        },
        {
          code: "360823",
          name: "峡江县"
        },
        {
          code: "360824",
          name: "新干县"
        },
        {
          code: "360825",
          name: "永丰县"
        },
        {
          code: "360826",
          name: "泰和县"
        },
        {
          code: "360827",
          name: "遂川县"
        },
        {
          code: "360828",
          name: "万安县"
        },
        {
          code: "360829",
          name: "安福县"
        },
        {
          code: "360830",
          name: "永新县"
        },
        {
          code: "360881",
          name: "井冈山市"
        }
      ],
      [
        {
          code: "360902",
          name: "袁州区"
        },
        {
          code: "360921",
          name: "奉新县"
        },
        {
          code: "360922",
          name: "万载县"
        },
        {
          code: "360923",
          name: "上高县"
        },
        {
          code: "360924",
          name: "宜丰县"
        },
        {
          code: "360925",
          name: "靖安县"
        },
        {
          code: "360926",
          name: "铜鼓县"
        },
        {
          code: "360981",
          name: "丰城市"
        },
        {
          code: "360982",
          name: "樟树市"
        },
        {
          code: "360983",
          name: "高安市"
        }
      ],
      [
        {
          code: "361002",
          name: "临川区"
        },
        {
          code: "361003",
          name: "东乡区"
        },
        {
          code: "361021",
          name: "南城县"
        },
        {
          code: "361022",
          name: "黎川县"
        },
        {
          code: "361023",
          name: "南丰县"
        },
        {
          code: "361024",
          name: "崇仁县"
        },
        {
          code: "361025",
          name: "乐安县"
        },
        {
          code: "361026",
          name: "宜黄县"
        },
        {
          code: "361027",
          name: "金溪县"
        },
        {
          code: "361028",
          name: "资溪县"
        },
        {
          code: "361030",
          name: "广昌县"
        }
      ],
      [
        {
          code: "361102",
          name: "信州区"
        },
        {
          code: "361103",
          name: "广丰区"
        },
        {
          code: "361121",
          name: "上饶县"
        },
        {
          code: "361123",
          name: "玉山县"
        },
        {
          code: "361124",
          name: "铅山县"
        },
        {
          code: "361125",
          name: "横峰县"
        },
        {
          code: "361126",
          name: "弋阳县"
        },
        {
          code: "361127",
          name: "余干县"
        },
        {
          code: "361128",
          name: "鄱阳县"
        },
        {
          code: "361129",
          name: "万年县"
        },
        {
          code: "361130",
          name: "婺源县"
        },
        {
          code: "361181",
          name: "德兴市"
        }
      ]
    ],
    [
      [
        {
          code: "370102",
          name: "历下区"
        },
        {
          code: "370103",
          name: "市中区"
        },
        {
          code: "370104",
          name: "槐荫区"
        },
        {
          code: "370105",
          name: "天桥区"
        },
        {
          code: "370112",
          name: "历城区"
        },
        {
          code: "370113",
          name: "长清区"
        },
        {
          code: "370114",
          name: "章丘区"
        },
        {
          code: "370124",
          name: "平阴县"
        },
        {
          code: "370125",
          name: "济阳县"
        },
        {
          code: "370126",
          name: "商河县"
        }
      ],
      [
        {
          code: "370202",
          name: "市南区"
        },
        {
          code: "370203",
          name: "市北区"
        },
        {
          code: "370211",
          name: "黄岛区"
        },
        {
          code: "370212",
          name: "崂山区"
        },
        {
          code: "370213",
          name: "李沧区"
        },
        {
          code: "370214",
          name: "城阳区"
        },
        {
          code: "370215",
          name: "即墨区"
        },
        {
          code: "370281",
          name: "胶州市"
        },
        {
          code: "370283",
          name: "平度市"
        },
        {
          code: "370285",
          name: "莱西市"
        }
      ],
      [
        {
          code: "370302",
          name: "淄川区"
        },
        {
          code: "370303",
          name: "张店区"
        },
        {
          code: "370304",
          name: "博山区"
        },
        {
          code: "370305",
          name: "临淄区"
        },
        {
          code: "370306",
          name: "周村区"
        },
        {
          code: "370321",
          name: "桓台县"
        },
        {
          code: "370322",
          name: "高青县"
        },
        {
          code: "370323",
          name: "沂源县"
        }
      ],
      [
        {
          code: "370402",
          name: "市中区"
        },
        {
          code: "370403",
          name: "薛城区"
        },
        {
          code: "370404",
          name: "峄城区"
        },
        {
          code: "370405",
          name: "台儿庄区"
        },
        {
          code: "370406",
          name: "山亭区"
        },
        {
          code: "370481",
          name: "滕州市"
        }
      ],
      [
        {
          code: "370502",
          name: "东营区"
        },
        {
          code: "370503",
          name: "河口区"
        },
        {
          code: "370505",
          name: "垦利区"
        },
        {
          code: "370522",
          name: "利津县"
        },
        {
          code: "370523",
          name: "广饶县"
        }
      ],
      [
        {
          code: "370602",
          name: "芝罘区"
        },
        {
          code: "370611",
          name: "福山区"
        },
        {
          code: "370612",
          name: "牟平区"
        },
        {
          code: "370613",
          name: "莱山区"
        },
        {
          code: "370634",
          name: "长岛县"
        },
        {
          code: "370681",
          name: "龙口市"
        },
        {
          code: "370682",
          name: "莱阳市"
        },
        {
          code: "370683",
          name: "莱州市"
        },
        {
          code: "370684",
          name: "蓬莱市"
        },
        {
          code: "370685",
          name: "招远市"
        },
        {
          code: "370686",
          name: "栖霞市"
        },
        {
          code: "370687",
          name: "海阳市"
        }
      ],
      [
        {
          code: "370702",
          name: "潍城区"
        },
        {
          code: "370703",
          name: "寒亭区"
        },
        {
          code: "370704",
          name: "坊子区"
        },
        {
          code: "370705",
          name: "奎文区"
        },
        {
          code: "370724",
          name: "临朐县"
        },
        {
          code: "370725",
          name: "昌乐县"
        },
        {
          code: "370781",
          name: "青州市"
        },
        {
          code: "370782",
          name: "诸城市"
        },
        {
          code: "370783",
          name: "寿光市"
        },
        {
          code: "370784",
          name: "安丘市"
        },
        {
          code: "370785",
          name: "高密市"
        },
        {
          code: "370786",
          name: "昌邑市"
        }
      ],
      [
        {
          code: "370811",
          name: "任城区"
        },
        {
          code: "370812",
          name: "兖州区"
        },
        {
          code: "370826",
          name: "微山县"
        },
        {
          code: "370827",
          name: "鱼台县"
        },
        {
          code: "370828",
          name: "金乡县"
        },
        {
          code: "370829",
          name: "嘉祥县"
        },
        {
          code: "370830",
          name: "汶上县"
        },
        {
          code: "370831",
          name: "泗水县"
        },
        {
          code: "370832",
          name: "梁山县"
        },
        {
          code: "370881",
          name: "曲阜市"
        },
        {
          code: "370883",
          name: "邹城市"
        }
      ],
      [
        {
          code: "370902",
          name: "泰山区"
        },
        {
          code: "370911",
          name: "岱岳区"
        },
        {
          code: "370921",
          name: "宁阳县"
        },
        {
          code: "370923",
          name: "东平县"
        },
        {
          code: "370982",
          name: "新泰市"
        },
        {
          code: "370983",
          name: "肥城市"
        }
      ],
      [
        {
          code: "371002",
          name: "环翠区"
        },
        {
          code: "371003",
          name: "文登区"
        },
        {
          code: "371082",
          name: "荣成市"
        },
        {
          code: "371083",
          name: "乳山市"
        }
      ],
      [
        {
          code: "371102",
          name: "东港区"
        },
        {
          code: "371103",
          name: "岚山区"
        },
        {
          code: "371121",
          name: "五莲县"
        },
        {
          code: "371122",
          name: "莒县"
        }
      ],
      [
        {
          code: "371202",
          name: "莱城区"
        },
        {
          code: "371203",
          name: "钢城区"
        }
      ],
      [
        {
          code: "371302",
          name: "兰山区"
        },
        {
          code: "371311",
          name: "罗庄区"
        },
        {
          code: "371312",
          name: "河东区"
        },
        {
          code: "371321",
          name: "沂南县"
        },
        {
          code: "371322",
          name: "郯城县"
        },
        {
          code: "371323",
          name: "沂水县"
        },
        {
          code: "371324",
          name: "兰陵县"
        },
        {
          code: "371325",
          name: "费县"
        },
        {
          code: "371326",
          name: "平邑县"
        },
        {
          code: "371327",
          name: "莒南县"
        },
        {
          code: "371328",
          name: "蒙阴县"
        },
        {
          code: "371329",
          name: "临沭县"
        }
      ],
      [
        {
          code: "371402",
          name: "德城区"
        },
        {
          code: "371403",
          name: "陵城区"
        },
        {
          code: "371422",
          name: "宁津县"
        },
        {
          code: "371423",
          name: "庆云县"
        },
        {
          code: "371424",
          name: "临邑县"
        },
        {
          code: "371425",
          name: "齐河县"
        },
        {
          code: "371426",
          name: "平原县"
        },
        {
          code: "371427",
          name: "夏津县"
        },
        {
          code: "371428",
          name: "武城县"
        },
        {
          code: "371481",
          name: "乐陵市"
        },
        {
          code: "371482",
          name: "禹城市"
        }
      ],
      [
        {
          code: "371502",
          name: "东昌府区"
        },
        {
          code: "371521",
          name: "阳谷县"
        },
        {
          code: "371522",
          name: "莘县"
        },
        {
          code: "371523",
          name: "茌平县"
        },
        {
          code: "371524",
          name: "东阿县"
        },
        {
          code: "371525",
          name: "冠县"
        },
        {
          code: "371526",
          name: "高唐县"
        },
        {
          code: "371581",
          name: "临清市"
        }
      ],
      [
        {
          code: "371602",
          name: "滨城区"
        },
        {
          code: "371603",
          name: "沾化区"
        },
        {
          code: "371621",
          name: "惠民县"
        },
        {
          code: "371622",
          name: "阳信县"
        },
        {
          code: "371623",
          name: "无棣县"
        },
        {
          code: "371625",
          name: "博兴县"
        },
        {
          code: "371626",
          name: "邹平县"
        }
      ],
      [
        {
          code: "371702",
          name: "牡丹区"
        },
        {
          code: "371703",
          name: "定陶区"
        },
        {
          code: "371721",
          name: "曹县"
        },
        {
          code: "371722",
          name: "单县"
        },
        {
          code: "371723",
          name: "成武县"
        },
        {
          code: "371724",
          name: "巨野县"
        },
        {
          code: "371725",
          name: "郓城县"
        },
        {
          code: "371726",
          name: "鄄城县"
        },
        {
          code: "371728",
          name: "东明县"
        }
      ]
    ],
    [
      [
        {
          code: "410102",
          name: "中原区"
        },
        {
          code: "410103",
          name: "二七区"
        },
        {
          code: "410104",
          name: "管城回族区"
        },
        {
          code: "410105",
          name: "金水区"
        },
        {
          code: "410106",
          name: "上街区"
        },
        {
          code: "410108",
          name: "惠济区"
        },
        {
          code: "410122",
          name: "中牟县"
        },
        {
          code: "410181",
          name: "巩义市"
        },
        {
          code: "410182",
          name: "荥阳市"
        },
        {
          code: "410183",
          name: "新密市"
        },
        {
          code: "410184",
          name: "新郑市"
        },
        {
          code: "410185",
          name: "登封市"
        }
      ],
      [
        {
          code: "410202",
          name: "龙亭区"
        },
        {
          code: "410203",
          name: "顺河回族区"
        },
        {
          code: "410204",
          name: "鼓楼区"
        },
        {
          code: "410205",
          name: "禹王台区"
        },
        {
          code: "410212",
          name: "祥符区"
        },
        {
          code: "410221",
          name: "杞县"
        },
        {
          code: "410222",
          name: "通许县"
        },
        {
          code: "410223",
          name: "尉氏县"
        },
        {
          code: "410225",
          name: "兰考县"
        }
      ],
      [
        {
          code: "410302",
          name: "老城区"
        },
        {
          code: "410303",
          name: "西工区"
        },
        {
          code: "410304",
          name: "瀍河回族区"
        },
        {
          code: "410305",
          name: "涧西区"
        },
        {
          code: "410307",
          name: "偃师区"
        },
        {
          code: "410308",
          name: "孟津区"
        },
        {
          code: "410311",
          name: "洛龙区"
        },
        {
          code: "410323",
          name: "新安县"
        },
        {
          code: "410324",
          name: "栾川县"
        },
        {
          code: "410325",
          name: "嵩县"
        },
        {
          code: "410326",
          name: "汝阳县"
        },
        {
          code: "410327",
          name: "宜阳县"
        },
        {
          code: "410328",
          name: "洛宁县"
        },
        {
          code: "410329",
          name: "伊川县"
        }
      ],
      [
        {
          code: "410402",
          name: "新华区"
        },
        {
          code: "410403",
          name: "卫东区"
        },
        {
          code: "410404",
          name: "石龙区"
        },
        {
          code: "410411",
          name: "湛河区"
        },
        {
          code: "410421",
          name: "宝丰县"
        },
        {
          code: "410422",
          name: "叶县"
        },
        {
          code: "410423",
          name: "鲁山县"
        },
        {
          code: "410425",
          name: "郏县"
        },
        {
          code: "410481",
          name: "舞钢市"
        },
        {
          code: "410482",
          name: "汝州市"
        }
      ],
      [
        {
          code: "410502",
          name: "文峰区"
        },
        {
          code: "410503",
          name: "北关区"
        },
        {
          code: "410505",
          name: "殷都区"
        },
        {
          code: "410506",
          name: "龙安区"
        },
        {
          code: "410522",
          name: "安阳县"
        },
        {
          code: "410523",
          name: "汤阴县"
        },
        {
          code: "410526",
          name: "滑县"
        },
        {
          code: "410527",
          name: "内黄县"
        },
        {
          code: "410581",
          name: "林州市"
        }
      ],
      [
        {
          code: "410602",
          name: "鹤山区"
        },
        {
          code: "410603",
          name: "山城区"
        },
        {
          code: "410611",
          name: "淇滨区"
        },
        {
          code: "410621",
          name: "浚县"
        },
        {
          code: "410622",
          name: "淇县"
        }
      ],
      [
        {
          code: "410702",
          name: "红旗区"
        },
        {
          code: "410703",
          name: "卫滨区"
        },
        {
          code: "410704",
          name: "凤泉区"
        },
        {
          code: "410711",
          name: "牧野区"
        },
        {
          code: "410721",
          name: "新乡县"
        },
        {
          code: "410724",
          name: "获嘉县"
        },
        {
          code: "410725",
          name: "原阳县"
        },
        {
          code: "410726",
          name: "延津县"
        },
        {
          code: "410727",
          name: "封丘县"
        },
        {
          code: "410728",
          name: "长垣县"
        },
        {
          code: "410781",
          name: "卫辉市"
        },
        {
          code: "410782",
          name: "辉县市"
        }
      ],
      [
        {
          code: "410802",
          name: "解放区"
        },
        {
          code: "410803",
          name: "中站区"
        },
        {
          code: "410804",
          name: "马村区"
        },
        {
          code: "410811",
          name: "山阳区"
        },
        {
          code: "410821",
          name: "修武县"
        },
        {
          code: "410822",
          name: "博爱县"
        },
        {
          code: "410823",
          name: "武陟县"
        },
        {
          code: "410825",
          name: "温县"
        },
        {
          code: "410882",
          name: "沁阳市"
        },
        {
          code: "410883",
          name: "孟州市"
        }
      ],
      [
        {
          code: "410902",
          name: "华龙区"
        },
        {
          code: "410922",
          name: "清丰县"
        },
        {
          code: "410923",
          name: "南乐县"
        },
        {
          code: "410926",
          name: "范县"
        },
        {
          code: "410927",
          name: "台前县"
        },
        {
          code: "410928",
          name: "濮阳县"
        }
      ],
      [
        {
          code: "411002",
          name: "魏都区"
        },
        {
          code: "411003",
          name: "建安区"
        },
        {
          code: "411024",
          name: "鄢陵县"
        },
        {
          code: "411025",
          name: "襄城县"
        },
        {
          code: "411081",
          name: "禹州市"
        },
        {
          code: "411082",
          name: "长葛市"
        }
      ],
      [
        {
          code: "411102",
          name: "源汇区"
        },
        {
          code: "411103",
          name: "郾城区"
        },
        {
          code: "411104",
          name: "召陵区"
        },
        {
          code: "411121",
          name: "舞阳县"
        },
        {
          code: "411122",
          name: "临颍县"
        }
      ],
      [
        {
          code: "411202",
          name: "湖滨区"
        },
        {
          code: "411203",
          name: "陕州区"
        },
        {
          code: "411221",
          name: "渑池县"
        },
        {
          code: "411224",
          name: "卢氏县"
        },
        {
          code: "411281",
          name: "义马市"
        },
        {
          code: "411282",
          name: "灵宝市"
        }
      ],
      [
        {
          code: "411302",
          name: "宛城区"
        },
        {
          code: "411303",
          name: "卧龙区"
        },
        {
          code: "411321",
          name: "南召县"
        },
        {
          code: "411322",
          name: "方城县"
        },
        {
          code: "411323",
          name: "西峡县"
        },
        {
          code: "411324",
          name: "镇平县"
        },
        {
          code: "411325",
          name: "内乡县"
        },
        {
          code: "411326",
          name: "淅川县"
        },
        {
          code: "411327",
          name: "社旗县"
        },
        {
          code: "411328",
          name: "唐河县"
        },
        {
          code: "411329",
          name: "新野县"
        },
        {
          code: "411330",
          name: "桐柏县"
        },
        {
          code: "411381",
          name: "邓州市"
        }
      ],
      [
        {
          code: "411402",
          name: "梁园区"
        },
        {
          code: "411403",
          name: "睢阳区"
        },
        {
          code: "411421",
          name: "民权县"
        },
        {
          code: "411422",
          name: "睢县"
        },
        {
          code: "411423",
          name: "宁陵县"
        },
        {
          code: "411424",
          name: "柘城县"
        },
        {
          code: "411425",
          name: "虞城县"
        },
        {
          code: "411426",
          name: "夏邑县"
        },
        {
          code: "411481",
          name: "永城市"
        }
      ],
      [
        {
          code: "411502",
          name: "浉河区"
        },
        {
          code: "411503",
          name: "平桥区"
        },
        {
          code: "411521",
          name: "罗山县"
        },
        {
          code: "411522",
          name: "光山县"
        },
        {
          code: "411523",
          name: "新县"
        },
        {
          code: "411524",
          name: "商城县"
        },
        {
          code: "411525",
          name: "固始县"
        },
        {
          code: "411526",
          name: "潢川县"
        },
        {
          code: "411527",
          name: "淮滨县"
        },
        {
          code: "411528",
          name: "息县"
        }
      ],
      [
        {
          code: "411602",
          name: "川汇区"
        },
        {
          code: "411621",
          name: "扶沟县"
        },
        {
          code: "411622",
          name: "西华县"
        },
        {
          code: "411623",
          name: "商水县"
        },
        {
          code: "411624",
          name: "沈丘县"
        },
        {
          code: "411625",
          name: "郸城县"
        },
        {
          code: "411626",
          name: "淮阳县"
        },
        {
          code: "411627",
          name: "太康县"
        },
        {
          code: "411628",
          name: "鹿邑县"
        },
        {
          code: "411681",
          name: "项城市"
        }
      ],
      [
        {
          code: "411702",
          name: "驿城区"
        },
        {
          code: "411721",
          name: "西平县"
        },
        {
          code: "411722",
          name: "上蔡县"
        },
        {
          code: "411723",
          name: "平舆县"
        },
        {
          code: "411724",
          name: "正阳县"
        },
        {
          code: "411725",
          name: "确山县"
        },
        {
          code: "411726",
          name: "泌阳县"
        },
        {
          code: "411727",
          name: "汝南县"
        },
        {
          code: "411728",
          name: "遂平县"
        },
        {
          code: "411729",
          name: "新蔡县"
        }
      ],
      [
        {
          code: "419001",
          name: "济源市"
        }
      ]
    ],
    [
      [
        {
          code: "420102",
          name: "江岸区"
        },
        {
          code: "420103",
          name: "江汉区"
        },
        {
          code: "420104",
          name: "硚口区"
        },
        {
          code: "420105",
          name: "汉阳区"
        },
        {
          code: "420106",
          name: "武昌区"
        },
        {
          code: "420107",
          name: "青山区"
        },
        {
          code: "420111",
          name: "洪山区"
        },
        {
          code: "420112",
          name: "东西湖区"
        },
        {
          code: "420113",
          name: "汉南区"
        },
        {
          code: "420114",
          name: "蔡甸区"
        },
        {
          code: "420115",
          name: "江夏区"
        },
        {
          code: "420116",
          name: "黄陂区"
        },
        {
          code: "420117",
          name: "新洲区"
        }
      ],
      [
        {
          code: "420202",
          name: "黄石港区"
        },
        {
          code: "420203",
          name: "西塞山区"
        },
        {
          code: "420204",
          name: "下陆区"
        },
        {
          code: "420205",
          name: "铁山区"
        },
        {
          code: "420222",
          name: "阳新县"
        },
        {
          code: "420281",
          name: "大冶市"
        }
      ],
      [
        {
          code: "420302",
          name: "茅箭区"
        },
        {
          code: "420303",
          name: "张湾区"
        },
        {
          code: "420304",
          name: "郧阳区"
        },
        {
          code: "420322",
          name: "郧西县"
        },
        {
          code: "420323",
          name: "竹山县"
        },
        {
          code: "420324",
          name: "竹溪县"
        },
        {
          code: "420325",
          name: "房县"
        },
        {
          code: "420381",
          name: "丹江口市"
        }
      ],
      [
        {
          code: "420502",
          name: "西陵区"
        },
        {
          code: "420503",
          name: "伍家岗区"
        },
        {
          code: "420504",
          name: "点军区"
        },
        {
          code: "420505",
          name: "猇亭区"
        },
        {
          code: "420506",
          name: "夷陵区"
        },
        {
          code: "420525",
          name: "远安县"
        },
        {
          code: "420526",
          name: "兴山县"
        },
        {
          code: "420527",
          name: "秭归县"
        },
        {
          code: "420528",
          name: "长阳土家族自治县"
        },
        {
          code: "420529",
          name: "五峰土家族自治县"
        },
        {
          code: "420581",
          name: "宜都市"
        },
        {
          code: "420582",
          name: "当阳市"
        },
        {
          code: "420583",
          name: "枝江市"
        }
      ],
      [
        {
          code: "420602",
          name: "襄城区"
        },
        {
          code: "420606",
          name: "樊城区"
        },
        {
          code: "420607",
          name: "襄州区"
        },
        {
          code: "420624",
          name: "南漳县"
        },
        {
          code: "420625",
          name: "谷城县"
        },
        {
          code: "420626",
          name: "保康县"
        },
        {
          code: "420682",
          name: "老河口市"
        },
        {
          code: "420683",
          name: "枣阳市"
        },
        {
          code: "420684",
          name: "宜城市"
        }
      ],
      [
        {
          code: "420702",
          name: "梁子湖区"
        },
        {
          code: "420703",
          name: "华容区"
        },
        {
          code: "420704",
          name: "鄂城区"
        }
      ],
      [
        {
          code: "420802",
          name: "东宝区"
        },
        {
          code: "420804",
          name: "掇刀区"
        },
        {
          code: "420821",
          name: "京山县"
        },
        {
          code: "420822",
          name: "沙洋县"
        },
        {
          code: "420881",
          name: "钟祥市"
        }
      ],
      [
        {
          code: "420902",
          name: "孝南区"
        },
        {
          code: "420921",
          name: "孝昌县"
        },
        {
          code: "420922",
          name: "大悟县"
        },
        {
          code: "420923",
          name: "云梦县"
        },
        {
          code: "420981",
          name: "应城市"
        },
        {
          code: "420982",
          name: "安陆市"
        },
        {
          code: "420984",
          name: "汉川市"
        }
      ],
      [
        {
          code: "421002",
          name: "沙市区"
        },
        {
          code: "421003",
          name: "荆州区"
        },
        {
          code: "421022",
          name: "公安县"
        },
        {
          code: "421023",
          name: "监利县"
        },
        {
          code: "421024",
          name: "江陵县"
        },
        {
          code: "421081",
          name: "石首市"
        },
        {
          code: "421083",
          name: "洪湖市"
        },
        {
          code: "421087",
          name: "松滋市"
        }
      ],
      [
        {
          code: "421102",
          name: "黄州区"
        },
        {
          code: "421121",
          name: "团风县"
        },
        {
          code: "421122",
          name: "红安县"
        },
        {
          code: "421123",
          name: "罗田县"
        },
        {
          code: "421124",
          name: "英山县"
        },
        {
          code: "421125",
          name: "浠水县"
        },
        {
          code: "421126",
          name: "蕲春县"
        },
        {
          code: "421127",
          name: "黄梅县"
        },
        {
          code: "421181",
          name: "麻城市"
        },
        {
          code: "421182",
          name: "武穴市"
        }
      ],
      [
        {
          code: "421202",
          name: "咸安区"
        },
        {
          code: "421221",
          name: "嘉鱼县"
        },
        {
          code: "421222",
          name: "通城县"
        },
        {
          code: "421223",
          name: "崇阳县"
        },
        {
          code: "421224",
          name: "通山县"
        },
        {
          code: "421281",
          name: "赤壁市"
        }
      ],
      [
        {
          code: "421303",
          name: "曾都区"
        },
        {
          code: "421321",
          name: "随县"
        },
        {
          code: "421381",
          name: "广水市"
        }
      ],
      [
        {
          code: "422801",
          name: "恩施市"
        },
        {
          code: "422802",
          name: "利川市"
        },
        {
          code: "422822",
          name: "建始县"
        },
        {
          code: "422823",
          name: "巴东县"
        },
        {
          code: "422825",
          name: "宣恩县"
        },
        {
          code: "422826",
          name: "咸丰县"
        },
        {
          code: "422827",
          name: "来凤县"
        },
        {
          code: "422828",
          name: "鹤峰县"
        }
      ],
      [
        {
          code: "429004",
          name: "仙桃市"
        },
        {
          code: "429005",
          name: "潜江市"
        },
        {
          code: "429006",
          name: "天门市"
        },
        {
          code: "429021",
          name: "神农架林区"
        }
      ]
    ],
    [
      [
        {
          code: "430102",
          name: "芙蓉区"
        },
        {
          code: "430103",
          name: "天心区"
        },
        {
          code: "430104",
          name: "岳麓区"
        },
        {
          code: "430105",
          name: "开福区"
        },
        {
          code: "430111",
          name: "雨花区"
        },
        {
          code: "430112",
          name: "望城区"
        },
        {
          code: "430121",
          name: "长沙县"
        },
        {
          code: "430181",
          name: "浏阳市"
        },
        {
          code: "430182",
          name: "宁乡市"
        }
      ],
      [
        {
          code: "430202",
          name: "荷塘区"
        },
        {
          code: "430203",
          name: "芦淞区"
        },
        {
          code: "430204",
          name: "石峰区"
        },
        {
          code: "430211",
          name: "天元区"
        },
        {
          code: "430221",
          name: "株洲县"
        },
        {
          code: "430223",
          name: "攸县"
        },
        {
          code: "430224",
          name: "茶陵县"
        },
        {
          code: "430225",
          name: "炎陵县"
        },
        {
          code: "430281",
          name: "醴陵市"
        }
      ],
      [
        {
          code: "430302",
          name: "雨湖区"
        },
        {
          code: "430304",
          name: "岳塘区"
        },
        {
          code: "430321",
          name: "湘潭县"
        },
        {
          code: "430381",
          name: "湘乡市"
        },
        {
          code: "430382",
          name: "韶山市"
        }
      ],
      [
        {
          code: "430405",
          name: "珠晖区"
        },
        {
          code: "430406",
          name: "雁峰区"
        },
        {
          code: "430407",
          name: "石鼓区"
        },
        {
          code: "430408",
          name: "蒸湘区"
        },
        {
          code: "430412",
          name: "南岳区"
        },
        {
          code: "430421",
          name: "衡阳县"
        },
        {
          code: "430422",
          name: "衡南县"
        },
        {
          code: "430423",
          name: "衡山县"
        },
        {
          code: "430424",
          name: "衡东县"
        },
        {
          code: "430426",
          name: "祁东县"
        },
        {
          code: "430481",
          name: "耒阳市"
        },
        {
          code: "430482",
          name: "常宁市"
        }
      ],
      [
        {
          code: "430502",
          name: "双清区"
        },
        {
          code: "430503",
          name: "大祥区"
        },
        {
          code: "430511",
          name: "北塔区"
        },
        {
          code: "430521",
          name: "邵东县"
        },
        {
          code: "430522",
          name: "新邵县"
        },
        {
          code: "430523",
          name: "邵阳县"
        },
        {
          code: "430524",
          name: "隆回县"
        },
        {
          code: "430525",
          name: "洞口县"
        },
        {
          code: "430527",
          name: "绥宁县"
        },
        {
          code: "430528",
          name: "新宁县"
        },
        {
          code: "430529",
          name: "城步苗族自治县"
        },
        {
          code: "430581",
          name: "武冈市"
        }
      ],
      [
        {
          code: "430602",
          name: "岳阳楼区"
        },
        {
          code: "430603",
          name: "云溪区"
        },
        {
          code: "430611",
          name: "君山区"
        },
        {
          code: "430621",
          name: "岳阳县"
        },
        {
          code: "430623",
          name: "华容县"
        },
        {
          code: "430624",
          name: "湘阴县"
        },
        {
          code: "430626",
          name: "平江县"
        },
        {
          code: "430681",
          name: "汨罗市"
        },
        {
          code: "430682",
          name: "临湘市"
        }
      ],
      [
        {
          code: "430702",
          name: "武陵区"
        },
        {
          code: "430703",
          name: "鼎城区"
        },
        {
          code: "430721",
          name: "安乡县"
        },
        {
          code: "430722",
          name: "汉寿县"
        },
        {
          code: "430723",
          name: "澧县"
        },
        {
          code: "430724",
          name: "临澧县"
        },
        {
          code: "430725",
          name: "桃源县"
        },
        {
          code: "430726",
          name: "石门县"
        },
        {
          code: "430781",
          name: "津市市"
        }
      ],
      [
        {
          code: "430802",
          name: "永定区"
        },
        {
          code: "430811",
          name: "武陵源区"
        },
        {
          code: "430821",
          name: "慈利县"
        },
        {
          code: "430822",
          name: "桑植县"
        }
      ],
      [
        {
          code: "430902",
          name: "资阳区"
        },
        {
          code: "430903",
          name: "赫山区"
        },
        {
          code: "430921",
          name: "南县"
        },
        {
          code: "430922",
          name: "桃江县"
        },
        {
          code: "430923",
          name: "安化县"
        },
        {
          code: "430981",
          name: "沅江市"
        }
      ],
      [
        {
          code: "431002",
          name: "北湖区"
        },
        {
          code: "431003",
          name: "苏仙区"
        },
        {
          code: "431021",
          name: "桂阳县"
        },
        {
          code: "431022",
          name: "宜章县"
        },
        {
          code: "431023",
          name: "永兴县"
        },
        {
          code: "431024",
          name: "嘉禾县"
        },
        {
          code: "431025",
          name: "临武县"
        },
        {
          code: "431026",
          name: "汝城县"
        },
        {
          code: "431027",
          name: "桂东县"
        },
        {
          code: "431028",
          name: "安仁县"
        },
        {
          code: "431081",
          name: "资兴市"
        }
      ],
      [
        {
          code: "431102",
          name: "零陵区"
        },
        {
          code: "431103",
          name: "冷水滩区"
        },
        {
          code: "431122",
          name: "东安县"
        },
        {
          code: "431123",
          name: "双牌县"
        },
        {
          code: "431124",
          name: "道县"
        },
        {
          code: "431125",
          name: "江永县"
        },
        {
          code: "431126",
          name: "宁远县"
        },
        {
          code: "431127",
          name: "蓝山县"
        },
        {
          code: "431128",
          name: "新田县"
        },
        {
          code: "431129",
          name: "江华瑶族自治县"
        },
        {
          code: "431181",
          name: "祁阳市"
        }
      ],
      [
        {
          code: "431202",
          name: "鹤城区"
        },
        {
          code: "431221",
          name: "中方县"
        },
        {
          code: "431222",
          name: "沅陵县"
        },
        {
          code: "431223",
          name: "辰溪县"
        },
        {
          code: "431224",
          name: "溆浦县"
        },
        {
          code: "431225",
          name: "会同县"
        },
        {
          code: "431226",
          name: "麻阳苗族自治县"
        },
        {
          code: "431227",
          name: "新晃侗族自治县"
        },
        {
          code: "431228",
          name: "芷江侗族自治县"
        },
        {
          code: "431229",
          name: "靖州苗族侗族自治县"
        },
        {
          code: "431230",
          name: "通道侗族自治县"
        },
        {
          code: "431281",
          name: "洪江市"
        }
      ],
      [
        {
          code: "431302",
          name: "娄星区"
        },
        {
          code: "431321",
          name: "双峰县"
        },
        {
          code: "431322",
          name: "新化县"
        },
        {
          code: "431381",
          name: "冷水江市"
        },
        {
          code: "431382",
          name: "涟源市"
        }
      ],
      [
        {
          code: "433101",
          name: "吉首市"
        },
        {
          code: "433122",
          name: "泸溪县"
        },
        {
          code: "433123",
          name: "凤凰县"
        },
        {
          code: "433124",
          name: "花垣县"
        },
        {
          code: "433125",
          name: "保靖县"
        },
        {
          code: "433126",
          name: "古丈县"
        },
        {
          code: "433127",
          name: "永顺县"
        },
        {
          code: "433130",
          name: "龙山县"
        }
      ]
    ],
    [
      [
        {
          code: "440103",
          name: "荔湾区"
        },
        {
          code: "440104",
          name: "越秀区"
        },
        {
          code: "440105",
          name: "海珠区"
        },
        {
          code: "440106",
          name: "天河区"
        },
        {
          code: "440111",
          name: "白云区"
        },
        {
          code: "440112",
          name: "黄埔区"
        },
        {
          code: "440113",
          name: "番禺区"
        },
        {
          code: "440114",
          name: "花都区"
        },
        {
          code: "440115",
          name: "南沙区"
        },
        {
          code: "440117",
          name: "从化区"
        },
        {
          code: "440118",
          name: "增城区"
        }
      ],
      [
        {
          code: "440203",
          name: "武江区"
        },
        {
          code: "440204",
          name: "浈江区"
        },
        {
          code: "440205",
          name: "曲江区"
        },
        {
          code: "440222",
          name: "始兴县"
        },
        {
          code: "440224",
          name: "仁化县"
        },
        {
          code: "440229",
          name: "翁源县"
        },
        {
          code: "440232",
          name: "乳源瑶族自治县"
        },
        {
          code: "440233",
          name: "新丰县"
        },
        {
          code: "440281",
          name: "乐昌市"
        },
        {
          code: "440282",
          name: "南雄市"
        }
      ],
      [
        {
          code: "440303",
          name: "罗湖区"
        },
        {
          code: "440304",
          name: "福田区"
        },
        {
          code: "440305",
          name: "南山区"
        },
        {
          code: "440306",
          name: "宝安区"
        },
        {
          code: "440307",
          name: "龙岗区"
        },
        {
          code: "440308",
          name: "盐田区"
        },
        {
          code: "440309",
          name: "龙华区"
        },
        {
          code: "440310",
          name: "坪山区"
        }
      ],
      [
        {
          code: "440402",
          name: "香洲区"
        },
        {
          code: "440403",
          name: "斗门区"
        },
        {
          code: "440404",
          name: "金湾区"
        }
      ],
      [
        {
          code: "440507",
          name: "龙湖区"
        },
        {
          code: "440511",
          name: "金平区"
        },
        {
          code: "440512",
          name: "濠江区"
        },
        {
          code: "440513",
          name: "潮阳区"
        },
        {
          code: "440514",
          name: "潮南区"
        },
        {
          code: "440515",
          name: "澄海区"
        },
        {
          code: "440523",
          name: "南澳县"
        }
      ],
      [
        {
          code: "440604",
          name: "禅城区"
        },
        {
          code: "440605",
          name: "南海区"
        },
        {
          code: "440606",
          name: "顺德区"
        },
        {
          code: "440607",
          name: "三水区"
        },
        {
          code: "440608",
          name: "高明区"
        }
      ],
      [
        {
          code: "440703",
          name: "蓬江区"
        },
        {
          code: "440704",
          name: "江海区"
        },
        {
          code: "440705",
          name: "新会区"
        },
        {
          code: "440781",
          name: "台山市"
        },
        {
          code: "440783",
          name: "开平市"
        },
        {
          code: "440784",
          name: "鹤山市"
        },
        {
          code: "440785",
          name: "恩平市"
        }
      ],
      [
        {
          code: "440802",
          name: "赤坎区"
        },
        {
          code: "440803",
          name: "霞山区"
        },
        {
          code: "440804",
          name: "坡头区"
        },
        {
          code: "440811",
          name: "麻章区"
        },
        {
          code: "440823",
          name: "遂溪县"
        },
        {
          code: "440825",
          name: "徐闻县"
        },
        {
          code: "440881",
          name: "廉江市"
        },
        {
          code: "440882",
          name: "雷州市"
        },
        {
          code: "440883",
          name: "吴川市"
        }
      ],
      [
        {
          code: "440902",
          name: "茂南区"
        },
        {
          code: "440904",
          name: "电白区"
        },
        {
          code: "440981",
          name: "高州市"
        },
        {
          code: "440982",
          name: "化州市"
        },
        {
          code: "440983",
          name: "信宜市"
        }
      ],
      [
        {
          code: "441202",
          name: "端州区"
        },
        {
          code: "441203",
          name: "鼎湖区"
        },
        {
          code: "441204",
          name: "高要区"
        },
        {
          code: "441223",
          name: "广宁县"
        },
        {
          code: "441224",
          name: "怀集县"
        },
        {
          code: "441225",
          name: "封开县"
        },
        {
          code: "441226",
          name: "德庆县"
        },
        {
          code: "441284",
          name: "四会市"
        }
      ],
      [
        {
          code: "441302",
          name: "惠城区"
        },
        {
          code: "441303",
          name: "惠阳区"
        },
        {
          code: "441322",
          name: "博罗县"
        },
        {
          code: "441323",
          name: "惠东县"
        },
        {
          code: "441324",
          name: "龙门县"
        }
      ],
      [
        {
          code: "441402",
          name: "梅江区"
        },
        {
          code: "441403",
          name: "梅县区"
        },
        {
          code: "441422",
          name: "大埔县"
        },
        {
          code: "441423",
          name: "丰顺县"
        },
        {
          code: "441424",
          name: "五华县"
        },
        {
          code: "441426",
          name: "平远县"
        },
        {
          code: "441427",
          name: "蕉岭县"
        },
        {
          code: "441481",
          name: "兴宁市"
        }
      ],
      [
        {
          code: "441502",
          name: "城区"
        },
        {
          code: "441521",
          name: "海丰县"
        },
        {
          code: "441523",
          name: "陆河县"
        },
        {
          code: "441581",
          name: "陆丰市"
        }
      ],
      [
        {
          code: "441602",
          name: "源城区"
        },
        {
          code: "441621",
          name: "紫金县"
        },
        {
          code: "441622",
          name: "龙川县"
        },
        {
          code: "441623",
          name: "连平县"
        },
        {
          code: "441624",
          name: "和平县"
        },
        {
          code: "441625",
          name: "东源县"
        }
      ],
      [
        {
          code: "441702",
          name: "江城区"
        },
        {
          code: "441704",
          name: "阳东区"
        },
        {
          code: "441721",
          name: "阳西县"
        },
        {
          code: "441781",
          name: "阳春市"
        }
      ],
      [
        {
          code: "441802",
          name: "清城区"
        },
        {
          code: "441803",
          name: "清新区"
        },
        {
          code: "441821",
          name: "佛冈县"
        },
        {
          code: "441823",
          name: "阳山县"
        },
        {
          code: "441825",
          name: "连山壮族瑶族自治县"
        },
        {
          code: "441826",
          name: "连南瑶族自治县"
        },
        {
          code: "441881",
          name: "英德市"
        },
        {
          code: "441882",
          name: "连州市"
        }
      ],
      [
        {
          code: "441901",
          name: "东城街道"
        },
        {
          code: "441902",
          name: "南城街道"
        },
        {
          code: "441903",
          name: "万江街道"
        },
        {
          code: "441904",
          name: "莞城街道"
        },
        {
          code: "441905",
          name: "石碣镇"
        },
        {
          code: "441906",
          name: "石龙镇"
        },
        {
          code: "441907",
          name: "茶山镇"
        },
        {
          code: "441908",
          name: "石排镇"
        },
        {
          code: "441909",
          name: "企石镇"
        },
        {
          code: "441910",
          name: "横沥镇"
        },
        {
          code: "441911",
          name: "桥头镇"
        },
        {
          code: "441912",
          name: "谢岗镇"
        },
        {
          code: "441913",
          name: "东坑镇"
        },
        {
          code: "441914",
          name: "常平镇"
        },
        {
          code: "441915",
          name: "寮步镇"
        },
        {
          code: "441916",
          name: "樟木头镇"
        },
        {
          code: "441917",
          name: "大朗镇"
        },
        {
          code: "441918",
          name: "黄江镇"
        },
        {
          code: "441919",
          name: "清溪镇"
        },
        {
          code: "441920",
          name: "塘厦镇"
        },
        {
          code: "441921",
          name: "凤岗镇"
        },
        {
          code: "441922",
          name: "大岭山镇"
        },
        {
          code: "441923",
          name: "长安镇"
        },
        {
          code: "441924",
          name: "虎门镇"
        },
        {
          code: "441925",
          name: "厚街镇"
        },
        {
          code: "441926",
          name: "沙田镇"
        },
        {
          code: "441927",
          name: "道滘镇"
        },
        {
          code: "441928",
          name: "洪梅镇"
        },
        {
          code: "441929",
          name: "麻涌镇"
        },
        {
          code: "441930",
          name: "望牛墩镇"
        },
        {
          code: "441931",
          name: "中堂镇"
        },
        {
          code: "441932",
          name: "高埗镇"
        },
        {
          code: "441933",
          name: "松山湖管委会"
        },
        {
          code: "441934",
          name: "虎门港管委会"
        },
        {
          code: "441935",
          name: "东莞生态园"
        }
      ],
      [
        {
          code: "442001",
          name: "石岐区街道"
        },
        {
          code: "442002",
          name: "东区街道"
        },
        {
          code: "442003",
          name: "火炬开发区"
        },
        {
          code: "442004",
          name: "西区街道"
        },
        {
          code: "442005",
          name: "南区街道"
        },
        {
          code: "442006",
          name: "五桂山街道"
        },
        {
          code: "442007",
          name: "小榄镇"
        },
        {
          code: "442008",
          name: "黄圃镇"
        },
        {
          code: "442009",
          name: "民众镇"
        },
        {
          code: "442010",
          name: "东凤镇"
        },
        {
          code: "442011",
          name: "东升镇"
        },
        {
          code: "442012",
          name: "古镇镇"
        },
        {
          code: "442013",
          name: "沙溪镇"
        },
        {
          code: "442014",
          name: "坦洲镇"
        },
        {
          code: "442015",
          name: "港口镇"
        },
        {
          code: "442016",
          name: "三角镇"
        },
        {
          code: "442017",
          name: "横栏镇"
        },
        {
          code: "442018",
          name: "南头镇"
        },
        {
          code: "442019",
          name: "阜沙镇"
        },
        {
          code: "442020",
          name: "南朗镇"
        },
        {
          code: "442021",
          name: "三乡镇"
        },
        {
          code: "442022",
          name: "板芙镇"
        },
        {
          code: "442023",
          name: "大涌镇"
        },
        {
          code: "442024",
          name: "神湾镇"
        }
      ],
      [
        {
          code: "445102",
          name: "湘桥区"
        },
        {
          code: "445103",
          name: "潮安区"
        },
        {
          code: "445122",
          name: "饶平县"
        }
      ],
      [
        {
          code: "445202",
          name: "榕城区"
        },
        {
          code: "445203",
          name: "揭东区"
        },
        {
          code: "445222",
          name: "揭西县"
        },
        {
          code: "445224",
          name: "惠来县"
        },
        {
          code: "445281",
          name: "普宁市"
        }
      ],
      [
        {
          code: "445302",
          name: "云城区"
        },
        {
          code: "445303",
          name: "云安区"
        },
        {
          code: "445321",
          name: "新兴县"
        },
        {
          code: "445322",
          name: "郁南县"
        },
        {
          code: "445381",
          name: "罗定市"
        }
      ]
    ],
    [
      [
        {
          code: "450102",
          name: "兴宁区"
        },
        {
          code: "450103",
          name: "青秀区"
        },
        {
          code: "450105",
          name: "江南区"
        },
        {
          code: "450107",
          name: "西乡塘区"
        },
        {
          code: "450108",
          name: "良庆区"
        },
        {
          code: "450109",
          name: "邕宁区"
        },
        {
          code: "450110",
          name: "武鸣区"
        },
        {
          code: "450123",
          name: "隆安县"
        },
        {
          code: "450124",
          name: "马山县"
        },
        {
          code: "450125",
          name: "上林县"
        },
        {
          code: "450126",
          name: "宾阳县"
        },
        {
          code: "450181",
          name: "横州市"
        }
      ],
      [
        {
          code: "450202",
          name: "城中区"
        },
        {
          code: "450203",
          name: "鱼峰区"
        },
        {
          code: "450204",
          name: "柳南区"
        },
        {
          code: "450205",
          name: "柳北区"
        },
        {
          code: "450206",
          name: "柳江区"
        },
        {
          code: "450222",
          name: "柳城县"
        },
        {
          code: "450223",
          name: "鹿寨县"
        },
        {
          code: "450224",
          name: "融安县"
        },
        {
          code: "450225",
          name: "融水苗族自治县"
        },
        {
          code: "450226",
          name: "三江侗族自治县"
        }
      ],
      [
        {
          code: "450302",
          name: "秀峰区"
        },
        {
          code: "450303",
          name: "叠彩区"
        },
        {
          code: "450304",
          name: "象山区"
        },
        {
          code: "450305",
          name: "七星区"
        },
        {
          code: "450311",
          name: "雁山区"
        },
        {
          code: "450312",
          name: "临桂区"
        },
        {
          code: "450321",
          name: "阳朔县"
        },
        {
          code: "450323",
          name: "灵川县"
        },
        {
          code: "450324",
          name: "全州县"
        },
        {
          code: "450325",
          name: "兴安县"
        },
        {
          code: "450326",
          name: "永福县"
        },
        {
          code: "450327",
          name: "灌阳县"
        },
        {
          code: "450328",
          name: "龙胜各族自治县"
        },
        {
          code: "450329",
          name: "资源县"
        },
        {
          code: "450330",
          name: "平乐县"
        },
        {
          code: "450331",
          name: "荔浦县"
        },
        {
          code: "450332",
          name: "恭城瑶族自治县"
        }
      ],
      [
        {
          code: "450403",
          name: "万秀区"
        },
        {
          code: "450405",
          name: "长洲区"
        },
        {
          code: "450406",
          name: "龙圩区"
        },
        {
          code: "450421",
          name: "苍梧县"
        },
        {
          code: "450422",
          name: "藤县"
        },
        {
          code: "450423",
          name: "蒙山县"
        },
        {
          code: "450481",
          name: "岑溪市"
        }
      ],
      [
        {
          code: "450502",
          name: "海城区"
        },
        {
          code: "450503",
          name: "银海区"
        },
        {
          code: "450512",
          name: "铁山港区"
        },
        {
          code: "450521",
          name: "合浦县"
        }
      ],
      [
        {
          code: "450602",
          name: "港口区"
        },
        {
          code: "450603",
          name: "防城区"
        },
        {
          code: "450621",
          name: "上思县"
        },
        {
          code: "450681",
          name: "东兴市"
        }
      ],
      [
        {
          code: "450702",
          name: "钦南区"
        },
        {
          code: "450703",
          name: "钦北区"
        },
        {
          code: "450721",
          name: "灵山县"
        },
        {
          code: "450722",
          name: "浦北县"
        }
      ],
      [
        {
          code: "450802",
          name: "港北区"
        },
        {
          code: "450803",
          name: "港南区"
        },
        {
          code: "450804",
          name: "覃塘区"
        },
        {
          code: "450821",
          name: "平南县"
        },
        {
          code: "450881",
          name: "桂平市"
        }
      ],
      [
        {
          code: "450902",
          name: "玉州区"
        },
        {
          code: "450903",
          name: "福绵区"
        },
        {
          code: "450921",
          name: "容县"
        },
        {
          code: "450922",
          name: "陆川县"
        },
        {
          code: "450923",
          name: "博白县"
        },
        {
          code: "450924",
          name: "兴业县"
        },
        {
          code: "450981",
          name: "北流市"
        }
      ],
      [
        {
          code: "451002",
          name: "右江区"
        },
        {
          code: "451021",
          name: "田阳县"
        },
        {
          code: "451022",
          name: "田东县"
        },
        {
          code: "451023",
          name: "平果县"
        },
        {
          code: "451024",
          name: "德保县"
        },
        {
          code: "451026",
          name: "那坡县"
        },
        {
          code: "451027",
          name: "凌云县"
        },
        {
          code: "451028",
          name: "乐业县"
        },
        {
          code: "451029",
          name: "田林县"
        },
        {
          code: "451030",
          name: "西林县"
        },
        {
          code: "451031",
          name: "隆林各族自治县"
        },
        {
          code: "451081",
          name: "靖西市"
        }
      ],
      [
        {
          code: "451102",
          name: "八步区"
        },
        {
          code: "451103",
          name: "平桂区"
        },
        {
          code: "451121",
          name: "昭平县"
        },
        {
          code: "451122",
          name: "钟山县"
        },
        {
          code: "451123",
          name: "富川瑶族自治县"
        }
      ],
      [
        {
          code: "451202",
          name: "金城江区"
        },
        {
          code: "451203",
          name: "宜州区"
        },
        {
          code: "451221",
          name: "南丹县"
        },
        {
          code: "451222",
          name: "天峨县"
        },
        {
          code: "451223",
          name: "凤山县"
        },
        {
          code: "451224",
          name: "东兰县"
        },
        {
          code: "451225",
          name: "罗城仫佬族自治县"
        },
        {
          code: "451226",
          name: "环江毛南族自治县"
        },
        {
          code: "451227",
          name: "巴马瑶族自治县"
        },
        {
          code: "451228",
          name: "都安瑶族自治县"
        },
        {
          code: "451229",
          name: "大化瑶族自治县"
        }
      ],
      [
        {
          code: "451302",
          name: "兴宾区"
        },
        {
          code: "451321",
          name: "忻城县"
        },
        {
          code: "451322",
          name: "象州县"
        },
        {
          code: "451323",
          name: "武宣县"
        },
        {
          code: "451324",
          name: "金秀瑶族自治县"
        },
        {
          code: "451381",
          name: "合山市"
        }
      ],
      [
        {
          code: "451402",
          name: "江州区"
        },
        {
          code: "451421",
          name: "扶绥县"
        },
        {
          code: "451422",
          name: "宁明县"
        },
        {
          code: "451423",
          name: "龙州县"
        },
        {
          code: "451424",
          name: "大新县"
        },
        {
          code: "451425",
          name: "天等县"
        },
        {
          code: "451481",
          name: "凭祥市"
        }
      ]
    ],
    [
      [
        {
          code: "460105",
          name: "秀英区"
        },
        {
          code: "460106",
          name: "龙华区"
        },
        {
          code: "460107",
          name: "琼山区"
        },
        {
          code: "460108",
          name: "美兰区"
        }
      ],
      [
        {
          code: "460202",
          name: "海棠区"
        },
        {
          code: "460203",
          name: "吉阳区"
        },
        {
          code: "460204",
          name: "天涯区"
        },
        {
          code: "460205",
          name: "崖州区"
        }
      ],
      [
        {
          code: "460321",
          name: "西沙群岛"
        },
        {
          code: "460322",
          name: "南沙群岛"
        },
        {
          code: "460323",
          name: "中沙群岛的岛礁及其海域"
        }
      ],
      [
        {
          code: "460401",
          name: "那大镇"
        },
        {
          code: "460402",
          name: "和庆镇"
        },
        {
          code: "460403",
          name: "南丰镇"
        },
        {
          code: "460404",
          name: "大成镇"
        },
        {
          code: "460405",
          name: "雅星镇"
        },
        {
          code: "460406",
          name: "兰洋镇"
        },
        {
          code: "460407",
          name: "光村镇"
        },
        {
          code: "460408",
          name: "木棠镇"
        },
        {
          code: "460409",
          name: "海头镇"
        },
        {
          code: "460410",
          name: "峨蔓镇"
        },
        {
          code: "460411",
          name: "三都镇"
        },
        {
          code: "460412",
          name: "王五镇"
        },
        {
          code: "460413",
          name: "白马井镇"
        },
        {
          code: "460414",
          name: "中和镇"
        },
        {
          code: "460415",
          name: "排浦镇"
        },
        {
          code: "460416",
          name: "东成镇"
        },
        {
          code: "460417",
          name: "新州镇"
        },
        {
          code: "460418",
          name: "国营西培农场"
        },
        {
          code: "460419",
          name: "国营西联农场"
        },
        {
          code: "460420",
          name: "国营蓝洋农场"
        },
        {
          code: "460421",
          name: "国营八一农场"
        },
        {
          code: "460422",
          name: "洋浦经济开发区"
        },
        {
          code: "460423",
          name: "华南热作学院"
        },
        {
          code: "460424",
          name: "红岭农场"
        }
      ],
      [
        {
          code: "469001",
          name: "五指山市"
        },
        {
          code: "469002",
          name: "琼海市"
        },
        {
          code: "469005",
          name: "文昌市"
        },
        {
          code: "469006",
          name: "万宁市"
        },
        {
          code: "469007",
          name: "东方市"
        },
        {
          code: "469021",
          name: "定安县"
        },
        {
          code: "469022",
          name: "屯昌县"
        },
        {
          code: "469023",
          name: "澄迈县"
        },
        {
          code: "469024",
          name: "临高县"
        },
        {
          code: "469025",
          name: "白沙黎族自治县"
        },
        {
          code: "469026",
          name: "昌江黎族自治县"
        },
        {
          code: "469027",
          name: "乐东黎族自治县"
        },
        {
          code: "469028",
          name: "陵水黎族自治县"
        },
        {
          code: "469029",
          name: "保亭黎族苗族自治县"
        },
        {
          code: "469030",
          name: "琼中黎族苗族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "500101",
          name: "万州区"
        },
        {
          code: "500102",
          name: "涪陵区"
        },
        {
          code: "500103",
          name: "渝中区"
        },
        {
          code: "500104",
          name: "大渡口区"
        },
        {
          code: "500105",
          name: "江北区"
        },
        {
          code: "500106",
          name: "沙坪坝区"
        },
        {
          code: "500107",
          name: "九龙坡区"
        },
        {
          code: "500108",
          name: "南岸区"
        },
        {
          code: "500109",
          name: "北碚区"
        },
        {
          code: "500110",
          name: "綦江区"
        },
        {
          code: "500111",
          name: "大足区"
        },
        {
          code: "500112",
          name: "渝北区"
        },
        {
          code: "500113",
          name: "巴南区"
        },
        {
          code: "500114",
          name: "黔江区"
        },
        {
          code: "500115",
          name: "长寿区"
        },
        {
          code: "500116",
          name: "江津区"
        },
        {
          code: "500117",
          name: "合川区"
        },
        {
          code: "500118",
          name: "永川区"
        },
        {
          code: "500119",
          name: "南川区"
        },
        {
          code: "500120",
          name: "璧山区"
        },
        {
          code: "500151",
          name: "铜梁区"
        },
        {
          code: "500152",
          name: "潼南区"
        },
        {
          code: "500153",
          name: "荣昌区"
        },
        {
          code: "500154",
          name: "开州区"
        },
        {
          code: "500155",
          name: "梁平区"
        },
        {
          code: "500156",
          name: "武隆区"
        }
      ],
      [
        {
          code: "500229",
          name: "城口县"
        },
        {
          code: "500230",
          name: "丰都县"
        },
        {
          code: "500231",
          name: "垫江县"
        },
        {
          code: "500233",
          name: "忠县"
        },
        {
          code: "500235",
          name: "云阳县"
        },
        {
          code: "500236",
          name: "奉节县"
        },
        {
          code: "500237",
          name: "巫山县"
        },
        {
          code: "500238",
          name: "巫溪县"
        },
        {
          code: "500240",
          name: "石柱土家族自治县"
        },
        {
          code: "500241",
          name: "秀山土家族苗族自治县"
        },
        {
          code: "500242",
          name: "酉阳土家族苗族自治县"
        },
        {
          code: "500243",
          name: "彭水苗族土家族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "510104",
          name: "锦江区"
        },
        {
          code: "510105",
          name: "青羊区"
        },
        {
          code: "510106",
          name: "金牛区"
        },
        {
          code: "510107",
          name: "武侯区"
        },
        {
          code: "510108",
          name: "成华区"
        },
        {
          code: "510112",
          name: "龙泉驿区"
        },
        {
          code: "510113",
          name: "青白江区"
        },
        {
          code: "510114",
          name: "新都区"
        },
        {
          code: "510115",
          name: "温江区"
        },
        {
          code: "510116",
          name: "双流区"
        },
        {
          code: "510117",
          name: "郫都区"
        },
        {
          code: "510121",
          name: "金堂县"
        },
        {
          code: "510129",
          name: "大邑县"
        },
        {
          code: "510131",
          name: "蒲江县"
        },
        {
          code: "510132",
          name: "新津县"
        },
        {
          code: "510181",
          name: "都江堰市"
        },
        {
          code: "510182",
          name: "彭州市"
        },
        {
          code: "510183",
          name: "邛崃市"
        },
        {
          code: "510184",
          name: "崇州市"
        },
        {
          code: "510185",
          name: "简阳市"
        }
      ],
      [
        {
          code: "510302",
          name: "自流井区"
        },
        {
          code: "510303",
          name: "贡井区"
        },
        {
          code: "510304",
          name: "大安区"
        },
        {
          code: "510311",
          name: "沿滩区"
        },
        {
          code: "510321",
          name: "荣县"
        },
        {
          code: "510322",
          name: "富顺县"
        }
      ],
      [
        {
          code: "510402",
          name: "东区"
        },
        {
          code: "510403",
          name: "西区"
        },
        {
          code: "510411",
          name: "仁和区"
        },
        {
          code: "510421",
          name: "米易县"
        },
        {
          code: "510422",
          name: "盐边县"
        }
      ],
      [
        {
          code: "510502",
          name: "江阳区"
        },
        {
          code: "510503",
          name: "纳溪区"
        },
        {
          code: "510504",
          name: "龙马潭区"
        },
        {
          code: "510521",
          name: "泸县"
        },
        {
          code: "510522",
          name: "合江县"
        },
        {
          code: "510524",
          name: "叙永县"
        },
        {
          code: "510525",
          name: "古蔺县"
        }
      ],
      [
        {
          code: "510603",
          name: "旌阳区"
        },
        {
          code: "510604",
          name: "罗江区"
        },
        {
          code: "510623",
          name: "中江县"
        },
        {
          code: "510681",
          name: "广汉市"
        },
        {
          code: "510682",
          name: "什邡市"
        },
        {
          code: "510683",
          name: "绵竹市"
        }
      ],
      [
        {
          code: "510703",
          name: "涪城区"
        },
        {
          code: "510704",
          name: "游仙区"
        },
        {
          code: "510705",
          name: "安州区"
        },
        {
          code: "510722",
          name: "三台县"
        },
        {
          code: "510723",
          name: "盐亭县"
        },
        {
          code: "510725",
          name: "梓潼县"
        },
        {
          code: "510726",
          name: "北川羌族自治县"
        },
        {
          code: "510727",
          name: "平武县"
        },
        {
          code: "510781",
          name: "江油市"
        }
      ],
      [
        {
          code: "510802",
          name: "利州区"
        },
        {
          code: "510811",
          name: "昭化区"
        },
        {
          code: "510812",
          name: "朝天区"
        },
        {
          code: "510821",
          name: "旺苍县"
        },
        {
          code: "510822",
          name: "青川县"
        },
        {
          code: "510823",
          name: "剑阁县"
        },
        {
          code: "510824",
          name: "苍溪县"
        }
      ],
      [
        {
          code: "510903",
          name: "船山区"
        },
        {
          code: "510904",
          name: "安居区"
        },
        {
          code: "510921",
          name: "蓬溪县"
        },
        {
          code: "510922",
          name: "射洪县"
        },
        {
          code: "510923",
          name: "大英县"
        }
      ],
      [
        {
          code: "511002",
          name: "市中区"
        },
        {
          code: "511011",
          name: "东兴区"
        },
        {
          code: "511024",
          name: "威远县"
        },
        {
          code: "511025",
          name: "资中县"
        },
        {
          code: "511083",
          name: "隆昌市"
        }
      ],
      [
        {
          code: "511102",
          name: "市中区"
        },
        {
          code: "511111",
          name: "沙湾区"
        },
        {
          code: "511112",
          name: "五通桥区"
        },
        {
          code: "511113",
          name: "金口河区"
        },
        {
          code: "511123",
          name: "犍为县"
        },
        {
          code: "511124",
          name: "井研县"
        },
        {
          code: "511126",
          name: "夹江县"
        },
        {
          code: "511129",
          name: "沐川县"
        },
        {
          code: "511132",
          name: "峨边彝族自治县"
        },
        {
          code: "511133",
          name: "马边彝族自治县"
        },
        {
          code: "511181",
          name: "峨眉山市"
        }
      ],
      [
        {
          code: "511302",
          name: "顺庆区"
        },
        {
          code: "511303",
          name: "高坪区"
        },
        {
          code: "511304",
          name: "嘉陵区"
        },
        {
          code: "511321",
          name: "南部县"
        },
        {
          code: "511322",
          name: "营山县"
        },
        {
          code: "511323",
          name: "蓬安县"
        },
        {
          code: "511324",
          name: "仪陇县"
        },
        {
          code: "511325",
          name: "西充县"
        },
        {
          code: "511381",
          name: "阆中市"
        }
      ],
      [
        {
          code: "511402",
          name: "东坡区"
        },
        {
          code: "511403",
          name: "彭山区"
        },
        {
          code: "511421",
          name: "仁寿县"
        },
        {
          code: "511423",
          name: "洪雅县"
        },
        {
          code: "511424",
          name: "丹棱县"
        },
        {
          code: "511425",
          name: "青神县"
        }
      ],
      [
        {
          code: "511502",
          name: "翠屏区"
        },
        {
          code: "511503",
          name: "南溪区"
        },
        {
          code: "511521",
          name: "宜宾县"
        },
        {
          code: "511523",
          name: "江安县"
        },
        {
          code: "511524",
          name: "长宁县"
        },
        {
          code: "511525",
          name: "高县"
        },
        {
          code: "511526",
          name: "珙县"
        },
        {
          code: "511527",
          name: "筠连县"
        },
        {
          code: "511528",
          name: "兴文县"
        },
        {
          code: "511529",
          name: "屏山县"
        }
      ],
      [
        {
          code: "511602",
          name: "广安区"
        },
        {
          code: "511603",
          name: "前锋区"
        },
        {
          code: "511621",
          name: "岳池县"
        },
        {
          code: "511622",
          name: "武胜县"
        },
        {
          code: "511623",
          name: "邻水县"
        },
        {
          code: "511681",
          name: "华蓥市"
        }
      ],
      [
        {
          code: "511702",
          name: "通川区"
        },
        {
          code: "511703",
          name: "达川区"
        },
        {
          code: "511722",
          name: "宣汉县"
        },
        {
          code: "511723",
          name: "开江县"
        },
        {
          code: "511724",
          name: "大竹县"
        },
        {
          code: "511725",
          name: "渠县"
        },
        {
          code: "511781",
          name: "万源市"
        }
      ],
      [
        {
          code: "511802",
          name: "雨城区"
        },
        {
          code: "511803",
          name: "名山区"
        },
        {
          code: "511822",
          name: "荥经县"
        },
        {
          code: "511823",
          name: "汉源县"
        },
        {
          code: "511824",
          name: "石棉县"
        },
        {
          code: "511825",
          name: "天全县"
        },
        {
          code: "511826",
          name: "芦山县"
        },
        {
          code: "511827",
          name: "宝兴县"
        }
      ],
      [
        {
          code: "511902",
          name: "巴州区"
        },
        {
          code: "511903",
          name: "恩阳区"
        },
        {
          code: "511921",
          name: "通江县"
        },
        {
          code: "511922",
          name: "南江县"
        },
        {
          code: "511923",
          name: "平昌县"
        }
      ],
      [
        {
          code: "512002",
          name: "雁江区"
        },
        {
          code: "512021",
          name: "安岳县"
        },
        {
          code: "512022",
          name: "乐至县"
        }
      ],
      [
        {
          code: "513201",
          name: "马尔康市"
        },
        {
          code: "513221",
          name: "汶川县"
        },
        {
          code: "513222",
          name: "理县"
        },
        {
          code: "513223",
          name: "茂县"
        },
        {
          code: "513224",
          name: "松潘县"
        },
        {
          code: "513225",
          name: "九寨沟县"
        },
        {
          code: "513226",
          name: "金川县"
        },
        {
          code: "513227",
          name: "小金县"
        },
        {
          code: "513228",
          name: "黑水县"
        },
        {
          code: "513230",
          name: "壤塘县"
        },
        {
          code: "513231",
          name: "阿坝县"
        },
        {
          code: "513232",
          name: "若尔盖县"
        },
        {
          code: "513233",
          name: "红原县"
        }
      ],
      [
        {
          code: "513301",
          name: "康定市"
        },
        {
          code: "513322",
          name: "泸定县"
        },
        {
          code: "513323",
          name: "丹巴县"
        },
        {
          code: "513324",
          name: "九龙县"
        },
        {
          code: "513325",
          name: "雅江县"
        },
        {
          code: "513326",
          name: "道孚县"
        },
        {
          code: "513327",
          name: "炉霍县"
        },
        {
          code: "513328",
          name: "甘孜县"
        },
        {
          code: "513329",
          name: "新龙县"
        },
        {
          code: "513330",
          name: "德格县"
        },
        {
          code: "513331",
          name: "白玉县"
        },
        {
          code: "513332",
          name: "石渠县"
        },
        {
          code: "513333",
          name: "色达县"
        },
        {
          code: "513334",
          name: "理塘县"
        },
        {
          code: "513335",
          name: "巴塘县"
        },
        {
          code: "513336",
          name: "乡城县"
        },
        {
          code: "513337",
          name: "稻城县"
        },
        {
          code: "513338",
          name: "得荣县"
        }
      ],
      [
        {
          code: "513401",
          name: "西昌市"
        },
        {
          code: "513402",
          name: "会理市"
        },
        {
          code: "513422",
          name: "木里藏族自治县"
        },
        {
          code: "513423",
          name: "盐源县"
        },
        {
          code: "513424",
          name: "德昌县"
        },
        {
          code: "513426",
          name: "会东县"
        },
        {
          code: "513427",
          name: "宁南县"
        },
        {
          code: "513428",
          name: "普格县"
        },
        {
          code: "513429",
          name: "布拖县"
        },
        {
          code: "513430",
          name: "金阳县"
        },
        {
          code: "513431",
          name: "昭觉县"
        },
        {
          code: "513432",
          name: "喜德县"
        },
        {
          code: "513433",
          name: "冕宁县"
        },
        {
          code: "513434",
          name: "越西县"
        },
        {
          code: "513435",
          name: "甘洛县"
        },
        {
          code: "513436",
          name: "美姑县"
        },
        {
          code: "513437",
          name: "雷波县"
        }
      ]
    ],
    [
      [
        {
          code: "520102",
          name: "南明区"
        },
        {
          code: "520103",
          name: "云岩区"
        },
        {
          code: "520111",
          name: "花溪区"
        },
        {
          code: "520112",
          name: "乌当区"
        },
        {
          code: "520113",
          name: "白云区"
        },
        {
          code: "520115",
          name: "观山湖区"
        },
        {
          code: "520121",
          name: "开阳县"
        },
        {
          code: "520122",
          name: "息烽县"
        },
        {
          code: "520123",
          name: "修文县"
        },
        {
          code: "520181",
          name: "清镇市"
        }
      ],
      [
        {
          code: "520201",
          name: "钟山区"
        },
        {
          code: "520203",
          name: "六枝特区"
        },
        {
          code: "520221",
          name: "水城县"
        },
        {
          code: "520281",
          name: "盘州市"
        }
      ],
      [
        {
          code: "520302",
          name: "红花岗区"
        },
        {
          code: "520303",
          name: "汇川区"
        },
        {
          code: "520304",
          name: "播州区"
        },
        {
          code: "520322",
          name: "桐梓县"
        },
        {
          code: "520323",
          name: "绥阳县"
        },
        {
          code: "520324",
          name: "正安县"
        },
        {
          code: "520325",
          name: "道真仡佬族苗族自治县"
        },
        {
          code: "520326",
          name: "务川仡佬族苗族自治县"
        },
        {
          code: "520327",
          name: "凤冈县"
        },
        {
          code: "520328",
          name: "湄潭县"
        },
        {
          code: "520329",
          name: "余庆县"
        },
        {
          code: "520330",
          name: "习水县"
        },
        {
          code: "520381",
          name: "赤水市"
        },
        {
          code: "520382",
          name: "仁怀市"
        }
      ],
      [
        {
          code: "520402",
          name: "西秀区"
        },
        {
          code: "520403",
          name: "平坝区"
        },
        {
          code: "520422",
          name: "普定县"
        },
        {
          code: "520423",
          name: "镇宁布依族苗族自治县"
        },
        {
          code: "520424",
          name: "关岭布依族苗族自治县"
        },
        {
          code: "520425",
          name: "紫云苗族布依族自治县"
        }
      ],
      [
        {
          code: "520502",
          name: "七星关区"
        },
        {
          code: "520521",
          name: "大方县"
        },
        {
          code: "520523",
          name: "金沙县"
        },
        {
          code: "520524",
          name: "织金县"
        },
        {
          code: "520525",
          name: "纳雍县"
        },
        {
          code: "520526",
          name: "威宁彝族回族苗族自治县"
        },
        {
          code: "520527",
          name: "赫章县"
        },
        {
          code: "520581",
          name: "黔西市"
        }
      ],
      [
        {
          code: "520602",
          name: "碧江区"
        },
        {
          code: "520603",
          name: "万山区"
        },
        {
          code: "520621",
          name: "江口县"
        },
        {
          code: "520622",
          name: "玉屏侗族自治县"
        },
        {
          code: "520623",
          name: "石阡县"
        },
        {
          code: "520624",
          name: "思南县"
        },
        {
          code: "520625",
          name: "印江土家族苗族自治县"
        },
        {
          code: "520626",
          name: "德江县"
        },
        {
          code: "520627",
          name: "沿河土家族自治县"
        },
        {
          code: "520628",
          name: "松桃苗族自治县"
        }
      ],
      [
        {
          code: "522301",
          name: "兴义市"
        },
        {
          code: "522322",
          name: "兴仁县"
        },
        {
          code: "522323",
          name: "普安县"
        },
        {
          code: "522324",
          name: "晴隆县"
        },
        {
          code: "522325",
          name: "贞丰县"
        },
        {
          code: "522326",
          name: "望谟县"
        },
        {
          code: "522327",
          name: "册亨县"
        },
        {
          code: "522328",
          name: "安龙县"
        }
      ],
      [
        {
          code: "522601",
          name: "凯里市"
        },
        {
          code: "522622",
          name: "黄平县"
        },
        {
          code: "522623",
          name: "施秉县"
        },
        {
          code: "522624",
          name: "三穗县"
        },
        {
          code: "522625",
          name: "镇远县"
        },
        {
          code: "522626",
          name: "岑巩县"
        },
        {
          code: "522627",
          name: "天柱县"
        },
        {
          code: "522628",
          name: "锦屏县"
        },
        {
          code: "522629",
          name: "剑河县"
        },
        {
          code: "522630",
          name: "台江县"
        },
        {
          code: "522631",
          name: "黎平县"
        },
        {
          code: "522632",
          name: "榕江县"
        },
        {
          code: "522633",
          name: "从江县"
        },
        {
          code: "522634",
          name: "雷山县"
        },
        {
          code: "522635",
          name: "麻江县"
        },
        {
          code: "522636",
          name: "丹寨县"
        }
      ],
      [
        {
          code: "522701",
          name: "都匀市"
        },
        {
          code: "522702",
          name: "福泉市"
        },
        {
          code: "522722",
          name: "荔波县"
        },
        {
          code: "522723",
          name: "贵定县"
        },
        {
          code: "522725",
          name: "瓮安县"
        },
        {
          code: "522726",
          name: "独山县"
        },
        {
          code: "522727",
          name: "平塘县"
        },
        {
          code: "522728",
          name: "罗甸县"
        },
        {
          code: "522729",
          name: "长顺县"
        },
        {
          code: "522730",
          name: "龙里县"
        },
        {
          code: "522731",
          name: "惠水县"
        },
        {
          code: "522732",
          name: "三都水族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "530102",
          name: "五华区"
        },
        {
          code: "530103",
          name: "盘龙区"
        },
        {
          code: "530111",
          name: "官渡区"
        },
        {
          code: "530112",
          name: "西山区"
        },
        {
          code: "530113",
          name: "东川区"
        },
        {
          code: "530114",
          name: "呈贡区"
        },
        {
          code: "530115",
          name: "晋宁区"
        },
        {
          code: "530124",
          name: "富民县"
        },
        {
          code: "530125",
          name: "宜良县"
        },
        {
          code: "530126",
          name: "石林彝族自治县"
        },
        {
          code: "530127",
          name: "嵩明县"
        },
        {
          code: "530128",
          name: "禄劝彝族苗族自治县"
        },
        {
          code: "530129",
          name: "寻甸回族彝族自治县"
        },
        {
          code: "530181",
          name: "安宁市"
        }
      ],
      [
        {
          code: "530302",
          name: "麒麟区"
        },
        {
          code: "530303",
          name: "沾益区"
        },
        {
          code: "530321",
          name: "马龙县"
        },
        {
          code: "530322",
          name: "陆良县"
        },
        {
          code: "530323",
          name: "师宗县"
        },
        {
          code: "530324",
          name: "罗平县"
        },
        {
          code: "530325",
          name: "富源县"
        },
        {
          code: "530326",
          name: "会泽县"
        },
        {
          code: "530381",
          name: "宣威市"
        }
      ],
      [
        {
          code: "530402",
          name: "红塔区"
        },
        {
          code: "530403",
          name: "江川区"
        },
        {
          code: "530422",
          name: "澄江县"
        },
        {
          code: "530423",
          name: "通海县"
        },
        {
          code: "530424",
          name: "华宁县"
        },
        {
          code: "530425",
          name: "易门县"
        },
        {
          code: "530426",
          name: "峨山彝族自治县"
        },
        {
          code: "530427",
          name: "新平彝族傣族自治县"
        },
        {
          code: "530428",
          name: "元江哈尼族彝族傣族自治县"
        }
      ],
      [
        {
          code: "530502",
          name: "隆阳区"
        },
        {
          code: "530521",
          name: "施甸县"
        },
        {
          code: "530523",
          name: "龙陵县"
        },
        {
          code: "530524",
          name: "昌宁县"
        },
        {
          code: "530581",
          name: "腾冲市"
        }
      ],
      [
        {
          code: "530602",
          name: "昭阳区"
        },
        {
          code: "530621",
          name: "鲁甸县"
        },
        {
          code: "530622",
          name: "巧家县"
        },
        {
          code: "530623",
          name: "盐津县"
        },
        {
          code: "530624",
          name: "大关县"
        },
        {
          code: "530625",
          name: "永善县"
        },
        {
          code: "530626",
          name: "绥江县"
        },
        {
          code: "530627",
          name: "镇雄县"
        },
        {
          code: "530628",
          name: "彝良县"
        },
        {
          code: "530629",
          name: "威信县"
        },
        {
          code: "530630",
          name: "水富县"
        }
      ],
      [
        {
          code: "530702",
          name: "古城区"
        },
        {
          code: "530721",
          name: "玉龙纳西族自治县"
        },
        {
          code: "530722",
          name: "永胜县"
        },
        {
          code: "530723",
          name: "华坪县"
        },
        {
          code: "530724",
          name: "宁蒗彝族自治县"
        }
      ],
      [
        {
          code: "530802",
          name: "思茅区"
        },
        {
          code: "530821",
          name: "宁洱哈尼族彝族自治县"
        },
        {
          code: "530822",
          name: "墨江哈尼族自治县"
        },
        {
          code: "530823",
          name: "景东彝族自治县"
        },
        {
          code: "530824",
          name: "景谷傣族彝族自治县"
        },
        {
          code: "530825",
          name: "镇沅彝族哈尼族拉祜族自治县"
        },
        {
          code: "530826",
          name: "江城哈尼族彝族自治县"
        },
        {
          code: "530827",
          name: "孟连傣族拉祜族佤族自治县"
        },
        {
          code: "530828",
          name: "澜沧拉祜族自治县"
        },
        {
          code: "530829",
          name: "西盟佤族自治县"
        }
      ],
      [
        {
          code: "530902",
          name: "临翔区"
        },
        {
          code: "530921",
          name: "凤庆县"
        },
        {
          code: "530922",
          name: "云县"
        },
        {
          code: "530923",
          name: "永德县"
        },
        {
          code: "530924",
          name: "镇康县"
        },
        {
          code: "530925",
          name: "双江拉祜族佤族布朗族傣族自治县"
        },
        {
          code: "530926",
          name: "耿马傣族佤族自治县"
        },
        {
          code: "530927",
          name: "沧源佤族自治县"
        }
      ],
      [
        {
          code: "532301",
          name: "楚雄市"
        },
        {
          code: "532302",
          name: "禄丰市"
        },
        {
          code: "532322",
          name: "双柏县"
        },
        {
          code: "532323",
          name: "牟定县"
        },
        {
          code: "532324",
          name: "南华县"
        },
        {
          code: "532325",
          name: "姚安县"
        },
        {
          code: "532326",
          name: "大姚县"
        },
        {
          code: "532327",
          name: "永仁县"
        },
        {
          code: "532328",
          name: "元谋县"
        },
        {
          code: "532329",
          name: "武定县"
        }
      ],
      [
        {
          code: "532501",
          name: "个旧市"
        },
        {
          code: "532502",
          name: "开远市"
        },
        {
          code: "532503",
          name: "蒙自市"
        },
        {
          code: "532504",
          name: "弥勒市"
        },
        {
          code: "532523",
          name: "屏边苗族自治县"
        },
        {
          code: "532524",
          name: "建水县"
        },
        {
          code: "532525",
          name: "石屏县"
        },
        {
          code: "532527",
          name: "泸西县"
        },
        {
          code: "532528",
          name: "元阳县"
        },
        {
          code: "532529",
          name: "红河县"
        },
        {
          code: "532530",
          name: "金平苗族瑶族傣族自治县"
        },
        {
          code: "532531",
          name: "绿春县"
        },
        {
          code: "532532",
          name: "河口瑶族自治县"
        }
      ],
      [
        {
          code: "532601",
          name: "文山市"
        },
        {
          code: "532622",
          name: "砚山县"
        },
        {
          code: "532623",
          name: "西畴县"
        },
        {
          code: "532624",
          name: "麻栗坡县"
        },
        {
          code: "532625",
          name: "马关县"
        },
        {
          code: "532626",
          name: "丘北县"
        },
        {
          code: "532627",
          name: "广南县"
        },
        {
          code: "532628",
          name: "富宁县"
        }
      ],
      [
        {
          code: "532801",
          name: "景洪市"
        },
        {
          code: "532822",
          name: "勐海县"
        },
        {
          code: "532823",
          name: "勐腊县"
        }
      ],
      [
        {
          code: "532901",
          name: "大理市"
        },
        {
          code: "532922",
          name: "漾濞彝族自治县"
        },
        {
          code: "532923",
          name: "祥云县"
        },
        {
          code: "532924",
          name: "宾川县"
        },
        {
          code: "532925",
          name: "弥渡县"
        },
        {
          code: "532926",
          name: "南涧彝族自治县"
        },
        {
          code: "532927",
          name: "巍山彝族回族自治县"
        },
        {
          code: "532928",
          name: "永平县"
        },
        {
          code: "532929",
          name: "云龙县"
        },
        {
          code: "532930",
          name: "洱源县"
        },
        {
          code: "532931",
          name: "剑川县"
        },
        {
          code: "532932",
          name: "鹤庆县"
        }
      ],
      [
        {
          code: "533102",
          name: "瑞丽市"
        },
        {
          code: "533103",
          name: "芒市"
        },
        {
          code: "533122",
          name: "梁河县"
        },
        {
          code: "533123",
          name: "盈江县"
        },
        {
          code: "533124",
          name: "陇川县"
        }
      ],
      [
        {
          code: "533301",
          name: "泸水市"
        },
        {
          code: "533323",
          name: "福贡县"
        },
        {
          code: "533324",
          name: "贡山独龙族怒族自治县"
        },
        {
          code: "533325",
          name: "兰坪白族普米族自治县"
        }
      ],
      [
        {
          code: "533401",
          name: "香格里拉市"
        },
        {
          code: "533422",
          name: "德钦县"
        },
        {
          code: "533423",
          name: "维西傈僳族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "540102",
          name: "城关区"
        },
        {
          code: "540103",
          name: "堆龙德庆区"
        },
        {
          code: "540104",
          name: "达孜区"
        },
        {
          code: "540121",
          name: "林周县"
        },
        {
          code: "540122",
          name: "当雄县"
        },
        {
          code: "540123",
          name: "尼木县"
        },
        {
          code: "540124",
          name: "曲水县"
        },
        {
          code: "540127",
          name: "墨竹工卡县"
        }
      ],
      [
        {
          code: "540202",
          name: "桑珠孜区"
        },
        {
          code: "540221",
          name: "南木林县"
        },
        {
          code: "540222",
          name: "江孜县"
        },
        {
          code: "540223",
          name: "定日县"
        },
        {
          code: "540224",
          name: "萨迦县"
        },
        {
          code: "540225",
          name: "拉孜县"
        },
        {
          code: "540226",
          name: "昂仁县"
        },
        {
          code: "540227",
          name: "谢通门县"
        },
        {
          code: "540228",
          name: "白朗县"
        },
        {
          code: "540229",
          name: "仁布县"
        },
        {
          code: "540230",
          name: "康马县"
        },
        {
          code: "540231",
          name: "定结县"
        },
        {
          code: "540232",
          name: "仲巴县"
        },
        {
          code: "540233",
          name: "亚东县"
        },
        {
          code: "540234",
          name: "吉隆县"
        },
        {
          code: "540235",
          name: "聂拉木县"
        },
        {
          code: "540236",
          name: "萨嘎县"
        },
        {
          code: "540237",
          name: "岗巴县"
        }
      ],
      [
        {
          code: "540302",
          name: "卡若区"
        },
        {
          code: "540321",
          name: "江达县"
        },
        {
          code: "540322",
          name: "贡觉县"
        },
        {
          code: "540323",
          name: "类乌齐县"
        },
        {
          code: "540324",
          name: "丁青县"
        },
        {
          code: "540325",
          name: "察雅县"
        },
        {
          code: "540326",
          name: "八宿县"
        },
        {
          code: "540327",
          name: "左贡县"
        },
        {
          code: "540328",
          name: "芒康县"
        },
        {
          code: "540329",
          name: "洛隆县"
        },
        {
          code: "540330",
          name: "边坝县"
        }
      ],
      [
        {
          code: "540402",
          name: "巴宜区"
        },
        {
          code: "540421",
          name: "工布江达县"
        },
        {
          code: "540422",
          name: "米林县"
        },
        {
          code: "540423",
          name: "墨脱县"
        },
        {
          code: "540424",
          name: "波密县"
        },
        {
          code: "540425",
          name: "察隅县"
        },
        {
          code: "540426",
          name: "朗县"
        }
      ],
      [
        {
          code: "540502",
          name: "乃东区"
        },
        {
          code: "540521",
          name: "扎囊县"
        },
        {
          code: "540522",
          name: "贡嘎县"
        },
        {
          code: "540523",
          name: "桑日县"
        },
        {
          code: "540524",
          name: "琼结县"
        },
        {
          code: "540525",
          name: "曲松县"
        },
        {
          code: "540526",
          name: "措美县"
        },
        {
          code: "540527",
          name: "洛扎县"
        },
        {
          code: "540528",
          name: "加查县"
        },
        {
          code: "540529",
          name: "隆子县"
        },
        {
          code: "540530",
          name: "错那县"
        },
        {
          code: "540531",
          name: "浪卡子县"
        }
      ],
      [
        {
          code: "542421",
          name: "那曲县"
        },
        {
          code: "542422",
          name: "嘉黎县"
        },
        {
          code: "542423",
          name: "比如县"
        },
        {
          code: "542424",
          name: "聂荣县"
        },
        {
          code: "542425",
          name: "安多县"
        },
        {
          code: "542426",
          name: "申扎县"
        },
        {
          code: "542427",
          name: "索县"
        },
        {
          code: "542428",
          name: "班戈县"
        },
        {
          code: "542429",
          name: "巴青县"
        },
        {
          code: "542430",
          name: "尼玛县"
        },
        {
          code: "542431",
          name: "双湖县"
        }
      ],
      [
        {
          code: "542521",
          name: "普兰县"
        },
        {
          code: "542522",
          name: "札达县"
        },
        {
          code: "542523",
          name: "噶尔县"
        },
        {
          code: "542524",
          name: "日土县"
        },
        {
          code: "542525",
          name: "革吉县"
        },
        {
          code: "542526",
          name: "改则县"
        },
        {
          code: "542527",
          name: "措勤县"
        }
      ]
    ],
    [
      [
        {
          code: "610102",
          name: "新城区"
        },
        {
          code: "610103",
          name: "碑林区"
        },
        {
          code: "610104",
          name: "莲湖区"
        },
        {
          code: "610111",
          name: "灞桥区"
        },
        {
          code: "610112",
          name: "未央区"
        },
        {
          code: "610113",
          name: "雁塔区"
        },
        {
          code: "610114",
          name: "阎良区"
        },
        {
          code: "610115",
          name: "临潼区"
        },
        {
          code: "610116",
          name: "长安区"
        },
        {
          code: "610117",
          name: "高陵区"
        },
        {
          code: "610118",
          name: "鄠邑区"
        },
        {
          code: "610122",
          name: "蓝田县"
        },
        {
          code: "610124",
          name: "周至县"
        }
      ],
      [
        {
          code: "610202",
          name: "王益区"
        },
        {
          code: "610203",
          name: "印台区"
        },
        {
          code: "610204",
          name: "耀州区"
        },
        {
          code: "610222",
          name: "宜君县"
        }
      ],
      [
        {
          code: "610302",
          name: "渭滨区"
        },
        {
          code: "610303",
          name: "金台区"
        },
        {
          code: "610304",
          name: "陈仓区"
        },
        {
          code: "610305",
          name: "凤翔区"
        },
        {
          code: "610323",
          name: "岐山县"
        },
        {
          code: "610324",
          name: "扶风县"
        },
        {
          code: "610326",
          name: "眉县"
        },
        {
          code: "610327",
          name: "陇县"
        },
        {
          code: "610328",
          name: "千阳县"
        },
        {
          code: "610329",
          name: "麟游县"
        },
        {
          code: "610330",
          name: "凤县"
        },
        {
          code: "610331",
          name: "太白县"
        }
      ],
      [
        {
          code: "610402",
          name: "秦都区"
        },
        {
          code: "610403",
          name: "杨陵区"
        },
        {
          code: "610404",
          name: "渭城区"
        },
        {
          code: "610422",
          name: "三原县"
        },
        {
          code: "610423",
          name: "泾阳县"
        },
        {
          code: "610424",
          name: "乾县"
        },
        {
          code: "610425",
          name: "礼泉县"
        },
        {
          code: "610426",
          name: "永寿县"
        },
        {
          code: "610427",
          name: "彬州市"
        },
        {
          code: "610428",
          name: "长武县"
        },
        {
          code: "610429",
          name: "旬邑县"
        },
        {
          code: "610430",
          name: "淳化县"
        },
        {
          code: "610431",
          name: "武功县"
        },
        {
          code: "610481",
          name: "兴平市"
        }
      ],
      [
        {
          code: "610502",
          name: "临渭区"
        },
        {
          code: "610503",
          name: "华州区"
        },
        {
          code: "610522",
          name: "潼关县"
        },
        {
          code: "610523",
          name: "大荔县"
        },
        {
          code: "610524",
          name: "合阳县"
        },
        {
          code: "610525",
          name: "澄城县"
        },
        {
          code: "610526",
          name: "蒲城县"
        },
        {
          code: "610527",
          name: "白水县"
        },
        {
          code: "610528",
          name: "富平县"
        },
        {
          code: "610581",
          name: "韩城市"
        },
        {
          code: "610582",
          name: "华阴市"
        }
      ],
      [
        {
          code: "610602",
          name: "宝塔区"
        },
        {
          code: "610603",
          name: "安塞区"
        },
        {
          code: "610621",
          name: "延长县"
        },
        {
          code: "610622",
          name: "延川县"
        },
        {
          code: "610623",
          name: "子长县"
        },
        {
          code: "610625",
          name: "志丹县"
        },
        {
          code: "610626",
          name: "吴起县"
        },
        {
          code: "610627",
          name: "甘泉县"
        },
        {
          code: "610628",
          name: "富县"
        },
        {
          code: "610629",
          name: "洛川县"
        },
        {
          code: "610630",
          name: "宜川县"
        },
        {
          code: "610631",
          name: "黄龙县"
        },
        {
          code: "610632",
          name: "黄陵县"
        }
      ],
      [
        {
          code: "610702",
          name: "汉台区"
        },
        {
          code: "610703",
          name: "南郑区"
        },
        {
          code: "610722",
          name: "城固县"
        },
        {
          code: "610723",
          name: "洋县"
        },
        {
          code: "610724",
          name: "西乡县"
        },
        {
          code: "610725",
          name: "勉县"
        },
        {
          code: "610726",
          name: "宁强县"
        },
        {
          code: "610727",
          name: "略阳县"
        },
        {
          code: "610728",
          name: "镇巴县"
        },
        {
          code: "610729",
          name: "留坝县"
        },
        {
          code: "610730",
          name: "佛坪县"
        }
      ],
      [
        {
          code: "610802",
          name: "榆阳区"
        },
        {
          code: "610803",
          name: "横山区"
        },
        {
          code: "610822",
          name: "府谷县"
        },
        {
          code: "610824",
          name: "靖边县"
        },
        {
          code: "610825",
          name: "定边县"
        },
        {
          code: "610826",
          name: "绥德县"
        },
        {
          code: "610827",
          name: "米脂县"
        },
        {
          code: "610828",
          name: "佳县"
        },
        {
          code: "610829",
          name: "吴堡县"
        },
        {
          code: "610830",
          name: "清涧县"
        },
        {
          code: "610831",
          name: "子洲县"
        },
        {
          code: "610881",
          name: "神木市"
        }
      ],
      [
        {
          code: "610902",
          name: "汉滨区"
        },
        {
          code: "610921",
          name: "汉阴县"
        },
        {
          code: "610922",
          name: "石泉县"
        },
        {
          code: "610923",
          name: "宁陕县"
        },
        {
          code: "610924",
          name: "紫阳县"
        },
        {
          code: "610925",
          name: "岚皋县"
        },
        {
          code: "610926",
          name: "平利县"
        },
        {
          code: "610927",
          name: "镇坪县"
        },
        {
          code: "610929",
          name: "白河县"
        },
        {
          code: "610981",
          name: "旬阳市"
        }
      ],
      [
        {
          code: "611002",
          name: "商州区"
        },
        {
          code: "611021",
          name: "洛南县"
        },
        {
          code: "611022",
          name: "丹凤县"
        },
        {
          code: "611023",
          name: "商南县"
        },
        {
          code: "611024",
          name: "山阳县"
        },
        {
          code: "611025",
          name: "镇安县"
        },
        {
          code: "611026",
          name: "柞水县"
        }
      ]
    ],
    [
      [
        {
          code: "620102",
          name: "城关区"
        },
        {
          code: "620103",
          name: "七里河区"
        },
        {
          code: "620104",
          name: "西固区"
        },
        {
          code: "620105",
          name: "安宁区"
        },
        {
          code: "620111",
          name: "红古区"
        },
        {
          code: "620121",
          name: "永登县"
        },
        {
          code: "620122",
          name: "皋兰县"
        },
        {
          code: "620123",
          name: "榆中县"
        }
      ],
      [
        {
          code: "620201",
          name: "雄关区"
        },
        {
          code: "620202",
          name: "镜铁区"
        },
        {
          code: "620203",
          name: "长城区"
        }
      ],
      [
        {
          code: "620302",
          name: "金川区"
        },
        {
          code: "620321",
          name: "永昌县"
        }
      ],
      [
        {
          code: "620402",
          name: "白银区"
        },
        {
          code: "620403",
          name: "平川区"
        },
        {
          code: "620421",
          name: "靖远县"
        },
        {
          code: "620422",
          name: "会宁县"
        },
        {
          code: "620423",
          name: "景泰县"
        }
      ],
      [
        {
          code: "620502",
          name: "秦州区"
        },
        {
          code: "620503",
          name: "麦积区"
        },
        {
          code: "620521",
          name: "清水县"
        },
        {
          code: "620522",
          name: "秦安县"
        },
        {
          code: "620523",
          name: "甘谷县"
        },
        {
          code: "620524",
          name: "武山县"
        },
        {
          code: "620525",
          name: "张家川回族自治县"
        }
      ],
      [
        {
          code: "620602",
          name: "凉州区"
        },
        {
          code: "620621",
          name: "民勤县"
        },
        {
          code: "620622",
          name: "古浪县"
        },
        {
          code: "620623",
          name: "天祝藏族自治县"
        }
      ],
      [
        {
          code: "620702",
          name: "甘州区"
        },
        {
          code: "620721",
          name: "肃南裕固族自治县"
        },
        {
          code: "620722",
          name: "民乐县"
        },
        {
          code: "620723",
          name: "临泽县"
        },
        {
          code: "620724",
          name: "高台县"
        },
        {
          code: "620725",
          name: "山丹县"
        }
      ],
      [
        {
          code: "620802",
          name: "崆峒区"
        },
        {
          code: "620821",
          name: "泾川县"
        },
        {
          code: "620822",
          name: "灵台县"
        },
        {
          code: "620823",
          name: "崇信县"
        },
        {
          code: "620824",
          name: "华亭县"
        },
        {
          code: "620825",
          name: "庄浪县"
        },
        {
          code: "620826",
          name: "静宁县"
        }
      ],
      [
        {
          code: "620902",
          name: "肃州区"
        },
        {
          code: "620921",
          name: "金塔县"
        },
        {
          code: "620922",
          name: "瓜州县"
        },
        {
          code: "620923",
          name: "肃北蒙古族自治县"
        },
        {
          code: "620924",
          name: "阿克塞哈萨克族自治县"
        },
        {
          code: "620981",
          name: "玉门市"
        },
        {
          code: "620982",
          name: "敦煌市"
        }
      ],
      [
        {
          code: "621002",
          name: "西峰区"
        },
        {
          code: "621021",
          name: "庆城县"
        },
        {
          code: "621022",
          name: "环县"
        },
        {
          code: "621023",
          name: "华池县"
        },
        {
          code: "621024",
          name: "合水县"
        },
        {
          code: "621025",
          name: "正宁县"
        },
        {
          code: "621026",
          name: "宁县"
        },
        {
          code: "621027",
          name: "镇原县"
        }
      ],
      [
        {
          code: "621102",
          name: "安定区"
        },
        {
          code: "621121",
          name: "通渭县"
        },
        {
          code: "621122",
          name: "陇西县"
        },
        {
          code: "621123",
          name: "渭源县"
        },
        {
          code: "621124",
          name: "临洮县"
        },
        {
          code: "621125",
          name: "漳县"
        },
        {
          code: "621126",
          name: "岷县"
        }
      ],
      [
        {
          code: "621202",
          name: "武都区"
        },
        {
          code: "621221",
          name: "成县"
        },
        {
          code: "621222",
          name: "文县"
        },
        {
          code: "621223",
          name: "宕昌县"
        },
        {
          code: "621224",
          name: "康县"
        },
        {
          code: "621225",
          name: "西和县"
        },
        {
          code: "621226",
          name: "礼县"
        },
        {
          code: "621227",
          name: "徽县"
        },
        {
          code: "621228",
          name: "两当县"
        }
      ],
      [
        {
          code: "622901",
          name: "临夏市"
        },
        {
          code: "622921",
          name: "临夏县"
        },
        {
          code: "622922",
          name: "康乐县"
        },
        {
          code: "622923",
          name: "永靖县"
        },
        {
          code: "622924",
          name: "广河县"
        },
        {
          code: "622925",
          name: "和政县"
        },
        {
          code: "622926",
          name: "东乡族自治县"
        },
        {
          code: "622927",
          name: "积石山保安族东乡族撒拉族自治县"
        }
      ],
      [
        {
          code: "623001",
          name: "合作市"
        },
        {
          code: "623021",
          name: "临潭县"
        },
        {
          code: "623022",
          name: "卓尼县"
        },
        {
          code: "623023",
          name: "舟曲县"
        },
        {
          code: "623024",
          name: "迭部县"
        },
        {
          code: "623025",
          name: "玛曲县"
        },
        {
          code: "623026",
          name: "碌曲县"
        },
        {
          code: "623027",
          name: "夏河县"
        }
      ]
    ],
    [
      [
        {
          code: "630102",
          name: "城东区"
        },
        {
          code: "630103",
          name: "城中区"
        },
        {
          code: "630104",
          name: "城西区"
        },
        {
          code: "630105",
          name: "城北区"
        },
        {
          code: "630121",
          name: "大通回族土族自治县"
        },
        {
          code: "630122",
          name: "湟中县"
        },
        {
          code: "630123",
          name: "湟源县"
        }
      ],
      [
        {
          code: "630202",
          name: "乐都区"
        },
        {
          code: "630203",
          name: "平安区"
        },
        {
          code: "630222",
          name: "民和回族土族自治县"
        },
        {
          code: "630223",
          name: "互助土族自治县"
        },
        {
          code: "630224",
          name: "化隆回族自治县"
        },
        {
          code: "630225",
          name: "循化撒拉族自治县"
        }
      ],
      [
        {
          code: "632221",
          name: "门源回族自治县"
        },
        {
          code: "632222",
          name: "祁连县"
        },
        {
          code: "632223",
          name: "海晏县"
        },
        {
          code: "632224",
          name: "刚察县"
        }
      ],
      [
        {
          code: "632321",
          name: "同仁县"
        },
        {
          code: "632322",
          name: "尖扎县"
        },
        {
          code: "632323",
          name: "泽库县"
        },
        {
          code: "632324",
          name: "河南蒙古族自治县"
        }
      ],
      [
        {
          code: "632521",
          name: "共和县"
        },
        {
          code: "632522",
          name: "同德县"
        },
        {
          code: "632523",
          name: "贵德县"
        },
        {
          code: "632524",
          name: "兴海县"
        },
        {
          code: "632525",
          name: "贵南县"
        }
      ],
      [
        {
          code: "632621",
          name: "玛沁县"
        },
        {
          code: "632622",
          name: "班玛县"
        },
        {
          code: "632623",
          name: "甘德县"
        },
        {
          code: "632624",
          name: "达日县"
        },
        {
          code: "632625",
          name: "久治县"
        },
        {
          code: "632626",
          name: "玛多县"
        }
      ],
      [
        {
          code: "632701",
          name: "玉树市"
        },
        {
          code: "632722",
          name: "杂多县"
        },
        {
          code: "632723",
          name: "称多县"
        },
        {
          code: "632724",
          name: "治多县"
        },
        {
          code: "632725",
          name: "囊谦县"
        },
        {
          code: "632726",
          name: "曲麻莱县"
        }
      ],
      [
        {
          code: "632801",
          name: "格尔木市"
        },
        {
          code: "632802",
          name: "德令哈市"
        },
        {
          code: "632821",
          name: "乌兰县"
        },
        {
          code: "632822",
          name: "都兰县"
        },
        {
          code: "632823",
          name: "天峻县"
        },
        {
          code: "632824",
          name: "冷湖行政委员会"
        },
        {
          code: "632825",
          name: "大柴旦行政委员会"
        },
        {
          code: "632826",
          name: "茫崖行政委员会"
        }
      ]
    ],
    [
      [
        {
          code: "640104",
          name: "兴庆区"
        },
        {
          code: "640105",
          name: "西夏区"
        },
        {
          code: "640106",
          name: "金凤区"
        },
        {
          code: "640121",
          name: "永宁县"
        },
        {
          code: "640122",
          name: "贺兰县"
        },
        {
          code: "640181",
          name: "灵武市"
        }
      ],
      [
        {
          code: "640202",
          name: "大武口区"
        },
        {
          code: "640205",
          name: "惠农区"
        },
        {
          code: "640221",
          name: "平罗县"
        }
      ],
      [
        {
          code: "640302",
          name: "利通区"
        },
        {
          code: "640303",
          name: "红寺堡区"
        },
        {
          code: "640323",
          name: "盐池县"
        },
        {
          code: "640324",
          name: "同心县"
        },
        {
          code: "640381",
          name: "青铜峡市"
        }
      ],
      [
        {
          code: "640402",
          name: "原州区"
        },
        {
          code: "640422",
          name: "西吉县"
        },
        {
          code: "640423",
          name: "隆德县"
        },
        {
          code: "640424",
          name: "泾源县"
        },
        {
          code: "640425",
          name: "彭阳县"
        }
      ],
      [
        {
          code: "640502",
          name: "沙坡头区"
        },
        {
          code: "640521",
          name: "中宁县"
        },
        {
          code: "640522",
          name: "海原县"
        }
      ]
    ],
    [
      [
        {
          code: "650102",
          name: "天山区"
        },
        {
          code: "650103",
          name: "沙依巴克区"
        },
        {
          code: "650104",
          name: "新市区"
        },
        {
          code: "650105",
          name: "水磨沟区"
        },
        {
          code: "650106",
          name: "头屯河区"
        },
        {
          code: "650107",
          name: "达坂城区"
        },
        {
          code: "650109",
          name: "米东区"
        },
        {
          code: "650121",
          name: "乌鲁木齐县"
        }
      ],
      [
        {
          code: "650202",
          name: "独山子区"
        },
        {
          code: "650203",
          name: "克拉玛依区"
        },
        {
          code: "650204",
          name: "白碱滩区"
        },
        {
          code: "650205",
          name: "乌尔禾区"
        }
      ],
      [
        {
          code: "650402",
          name: "高昌区"
        },
        {
          code: "650421",
          name: "鄯善县"
        },
        {
          code: "650422",
          name: "托克逊县"
        }
      ],
      [
        {
          code: "650502",
          name: "伊州区"
        },
        {
          code: "650521",
          name: "巴里坤哈萨克自治县"
        },
        {
          code: "650522",
          name: "伊吾县"
        }
      ],
      [
        {
          code: "652301",
          name: "昌吉市"
        },
        {
          code: "652302",
          name: "阜康市"
        },
        {
          code: "652323",
          name: "呼图壁县"
        },
        {
          code: "652324",
          name: "玛纳斯县"
        },
        {
          code: "652325",
          name: "奇台县"
        },
        {
          code: "652327",
          name: "吉木萨尔县"
        },
        {
          code: "652328",
          name: "木垒哈萨克自治县"
        }
      ],
      [
        {
          code: "652701",
          name: "博乐市"
        },
        {
          code: "652702",
          name: "阿拉山口市"
        },
        {
          code: "652722",
          name: "精河县"
        },
        {
          code: "652723",
          name: "温泉县"
        }
      ],
      [
        {
          code: "652801",
          name: "库尔勒市"
        },
        {
          code: "652822",
          name: "轮台县"
        },
        {
          code: "652823",
          name: "尉犁县"
        },
        {
          code: "652824",
          name: "若羌县"
        },
        {
          code: "652825",
          name: "且末县"
        },
        {
          code: "652826",
          name: "焉耆回族自治县"
        },
        {
          code: "652827",
          name: "和静县"
        },
        {
          code: "652828",
          name: "和硕县"
        },
        {
          code: "652829",
          name: "博湖县"
        }
      ],
      [
        {
          code: "652901",
          name: "阿克苏市"
        },
        {
          code: "652922",
          name: "温宿县"
        },
        {
          code: "652923",
          name: "库车县"
        },
        {
          code: "652924",
          name: "沙雅县"
        },
        {
          code: "652925",
          name: "新和县"
        },
        {
          code: "652926",
          name: "拜城县"
        },
        {
          code: "652927",
          name: "乌什县"
        },
        {
          code: "652928",
          name: "阿瓦提县"
        },
        {
          code: "652929",
          name: "柯坪县"
        }
      ],
      [
        {
          code: "653001",
          name: "阿图什市"
        },
        {
          code: "653022",
          name: "阿克陶县"
        },
        {
          code: "653023",
          name: "阿合奇县"
        },
        {
          code: "653024",
          name: "乌恰县"
        }
      ],
      [
        {
          code: "653101",
          name: "喀什市"
        },
        {
          code: "653121",
          name: "疏附县"
        },
        {
          code: "653122",
          name: "疏勒县"
        },
        {
          code: "653123",
          name: "英吉沙县"
        },
        {
          code: "653124",
          name: "泽普县"
        },
        {
          code: "653125",
          name: "莎车县"
        },
        {
          code: "653126",
          name: "叶城县"
        },
        {
          code: "653127",
          name: "麦盖提县"
        },
        {
          code: "653128",
          name: "岳普湖县"
        },
        {
          code: "653129",
          name: "伽师县"
        },
        {
          code: "653130",
          name: "巴楚县"
        },
        {
          code: "653131",
          name: "塔什库尔干塔吉克自治县"
        }
      ],
      [
        {
          code: "653201",
          name: "和田市"
        },
        {
          code: "653221",
          name: "和田县"
        },
        {
          code: "653222",
          name: "墨玉县"
        },
        {
          code: "653223",
          name: "皮山县"
        },
        {
          code: "653224",
          name: "洛浦县"
        },
        {
          code: "653225",
          name: "策勒县"
        },
        {
          code: "653226",
          name: "于田县"
        },
        {
          code: "653227",
          name: "民丰县"
        }
      ],
      [
        {
          code: "654002",
          name: "伊宁市"
        },
        {
          code: "654003",
          name: "奎屯市"
        },
        {
          code: "654004",
          name: "霍尔果斯市"
        },
        {
          code: "654021",
          name: "伊宁县"
        },
        {
          code: "654022",
          name: "察布查尔锡伯自治县"
        },
        {
          code: "654023",
          name: "霍城县"
        },
        {
          code: "654024",
          name: "巩留县"
        },
        {
          code: "654025",
          name: "新源县"
        },
        {
          code: "654026",
          name: "昭苏县"
        },
        {
          code: "654027",
          name: "特克斯县"
        },
        {
          code: "654028",
          name: "尼勒克县"
        }
      ],
      [
        {
          code: "654201",
          name: "塔城市"
        },
        {
          code: "654202",
          name: "乌苏市"
        },
        {
          code: "654203",
          name: "沙湾市"
        },
        {
          code: "654221",
          name: "额敏县"
        },
        {
          code: "654224",
          name: "托里县"
        },
        {
          code: "654225",
          name: "裕民县"
        },
        {
          code: "654226",
          name: "和布克赛尔蒙古自治县"
        }
      ],
      [
        {
          code: "654301",
          name: "阿勒泰市"
        },
        {
          code: "654321",
          name: "布尔津县"
        },
        {
          code: "654322",
          name: "富蕴县"
        },
        {
          code: "654323",
          name: "福海县"
        },
        {
          code: "654324",
          name: "哈巴河县"
        },
        {
          code: "654325",
          name: "青河县"
        },
        {
          code: "654326",
          name: "吉木乃县"
        }
      ],
      [
        {
          code: "659001",
          name: "石河子市"
        },
        {
          code: "659002",
          name: "阿拉尔市"
        },
        {
          code: "659003",
          name: "图木舒克市"
        },
        {
          code: "659004",
          name: "五家渠市"
        },
        {
          code: "659005",
          name: "北屯市"
        },
        {
          code: "659006",
          name: "铁门关市"
        },
        {
          code: "659007",
          name: "双河市"
        },
        {
          code: "659008",
          name: "可克达拉市"
        },
        {
          code: "659009",
          name: "昆玉市"
        }
      ]
    ],
    [
      [
        {
          code: "710101",
          name: "中正区"
        },
        {
          code: "710102",
          name: "大同区"
        },
        {
          code: "710103",
          name: "中山区"
        },
        {
          code: "710104",
          name: "松山区"
        },
        {
          code: "710105",
          name: "大安区"
        },
        {
          code: "710106",
          name: "万华区"
        },
        {
          code: "710107",
          name: "信义区"
        },
        {
          code: "710108",
          name: "士林区"
        },
        {
          code: "710109",
          name: "北投区"
        },
        {
          code: "710110",
          name: "内湖区"
        },
        {
          code: "710111",
          name: "南港区"
        },
        {
          code: "710112",
          name: "文山区"
        }
      ],
      [
        {
          code: "710201",
          name: "新兴区"
        },
        {
          code: "710202",
          name: "前金区"
        },
        {
          code: "710203",
          name: "苓雅区"
        },
        {
          code: "710204",
          name: "盐埕区"
        },
        {
          code: "710205",
          name: "鼓山区"
        },
        {
          code: "710206",
          name: "旗津区"
        },
        {
          code: "710207",
          name: "前镇区"
        },
        {
          code: "710208",
          name: "三民区"
        },
        {
          code: "710209",
          name: "左营区"
        },
        {
          code: "710210",
          name: "楠梓区"
        },
        {
          code: "710211",
          name: "小港区"
        },
        {
          code: "710242",
          name: "仁武区"
        },
        {
          code: "710243",
          name: "大社区"
        },
        {
          code: "710244",
          name: "冈山区"
        },
        {
          code: "710245",
          name: "路竹区"
        },
        {
          code: "710246",
          name: "阿莲区"
        },
        {
          code: "710247",
          name: "田寮区"
        },
        {
          code: "710248",
          name: "燕巢区"
        },
        {
          code: "710249",
          name: "桥头区"
        },
        {
          code: "710250",
          name: "梓官区"
        },
        {
          code: "710251",
          name: "弥陀区"
        },
        {
          code: "710252",
          name: "永安区"
        },
        {
          code: "710253",
          name: "湖内区"
        },
        {
          code: "710254",
          name: "凤山区"
        },
        {
          code: "710255",
          name: "大寮区"
        },
        {
          code: "710256",
          name: "林园区"
        },
        {
          code: "710257",
          name: "鸟松区"
        },
        {
          code: "710258",
          name: "大树区"
        },
        {
          code: "710259",
          name: "旗山区"
        },
        {
          code: "710260",
          name: "美浓区"
        },
        {
          code: "710261",
          name: "六龟区"
        },
        {
          code: "710262",
          name: "内门区"
        },
        {
          code: "710263",
          name: "杉林区"
        },
        {
          code: "710264",
          name: "甲仙区"
        },
        {
          code: "710265",
          name: "桃源区"
        },
        {
          code: "710266",
          name: "那玛夏区"
        },
        {
          code: "710267",
          name: "茂林区"
        },
        {
          code: "710268",
          name: "茄萣区"
        }
      ],
      [
        {
          code: "710301",
          name: "中西区"
        },
        {
          code: "710302",
          name: "东区"
        },
        {
          code: "710303",
          name: "南区"
        },
        {
          code: "710304",
          name: "北区"
        },
        {
          code: "710305",
          name: "安平区"
        },
        {
          code: "710306",
          name: "安南区"
        },
        {
          code: "710339",
          name: "永康区"
        },
        {
          code: "710340",
          name: "归仁区"
        },
        {
          code: "710341",
          name: "新化区"
        },
        {
          code: "710342",
          name: "左镇区"
        },
        {
          code: "710343",
          name: "玉井区"
        },
        {
          code: "710344",
          name: "楠西区"
        },
        {
          code: "710345",
          name: "南化区"
        },
        {
          code: "710346",
          name: "仁德区"
        },
        {
          code: "710347",
          name: "关庙区"
        },
        {
          code: "710348",
          name: "龙崎区"
        },
        {
          code: "710349",
          name: "官田区"
        },
        {
          code: "710350",
          name: "麻豆区"
        },
        {
          code: "710351",
          name: "佳里区"
        },
        {
          code: "710352",
          name: "西港区"
        },
        {
          code: "710353",
          name: "七股区"
        },
        {
          code: "710354",
          name: "将军区"
        },
        {
          code: "710355",
          name: "学甲区"
        },
        {
          code: "710356",
          name: "北门区"
        },
        {
          code: "710357",
          name: "新营区"
        },
        {
          code: "710358",
          name: "后壁区"
        },
        {
          code: "710359",
          name: "白河区"
        },
        {
          code: "710360",
          name: "东山区"
        },
        {
          code: "710361",
          name: "六甲区"
        },
        {
          code: "710362",
          name: "下营区"
        },
        {
          code: "710363",
          name: "柳营区"
        },
        {
          code: "710364",
          name: "盐水区"
        },
        {
          code: "710365",
          name: "善化区"
        },
        {
          code: "710366",
          name: "大内区"
        },
        {
          code: "710367",
          name: "山上区"
        },
        {
          code: "710368",
          name: "新市区"
        },
        {
          code: "710369",
          name: "安定区"
        }
      ],
      [
        {
          code: "710401",
          name: "中区"
        },
        {
          code: "710402",
          name: "东区"
        },
        {
          code: "710403",
          name: "南区"
        },
        {
          code: "710404",
          name: "西区"
        },
        {
          code: "710405",
          name: "北区"
        },
        {
          code: "710406",
          name: "北屯区"
        },
        {
          code: "710407",
          name: "西屯区"
        },
        {
          code: "710408",
          name: "南屯区"
        },
        {
          code: "710431",
          name: "太平区"
        },
        {
          code: "710432",
          name: "大里区"
        },
        {
          code: "710433",
          name: "雾峰区"
        },
        {
          code: "710434",
          name: "乌日区"
        },
        {
          code: "710435",
          name: "丰原区"
        },
        {
          code: "710436",
          name: "后里区"
        },
        {
          code: "710437",
          name: "石冈区"
        },
        {
          code: "710438",
          name: "东势区"
        },
        {
          code: "710439",
          name: "和平区"
        },
        {
          code: "710440",
          name: "新社区"
        },
        {
          code: "710441",
          name: "潭子区"
        },
        {
          code: "710442",
          name: "大雅区"
        },
        {
          code: "710443",
          name: "神冈区"
        },
        {
          code: "710444",
          name: "大肚区"
        },
        {
          code: "710445",
          name: "沙鹿区"
        },
        {
          code: "710446",
          name: "龙井区"
        },
        {
          code: "710447",
          name: "梧栖区"
        },
        {
          code: "710448",
          name: "清水区"
        },
        {
          code: "710449",
          name: "大甲区"
        },
        {
          code: "710450",
          name: "外埔区"
        },
        {
          code: "710451",
          name: "大安区"
        }
      ],
      [
        {
          code: "710614",
          name: "南投市"
        },
        {
          code: "710615",
          name: "中寮乡"
        },
        {
          code: "710616",
          name: "草屯镇"
        },
        {
          code: "710617",
          name: "国姓乡"
        },
        {
          code: "710618",
          name: "埔里镇"
        },
        {
          code: "710619",
          name: "仁爱乡"
        },
        {
          code: "710620",
          name: "名间乡"
        },
        {
          code: "710621",
          name: "集集镇"
        },
        {
          code: "710622",
          name: "水里乡"
        },
        {
          code: "710623",
          name: "鱼池乡"
        },
        {
          code: "710624",
          name: "信义乡"
        },
        {
          code: "710625",
          name: "竹山镇"
        },
        {
          code: "710626",
          name: "鹿谷乡"
        }
      ],
      [
        {
          code: "710701",
          name: "仁爱区"
        },
        {
          code: "710702",
          name: "信义区"
        },
        {
          code: "710703",
          name: "中正区"
        },
        {
          code: "710704",
          name: "中山区"
        },
        {
          code: "710705",
          name: "安乐区"
        },
        {
          code: "710706",
          name: "暖暖区"
        },
        {
          code: "710707",
          name: "七堵区"
        }
      ],
      [
        {
          code: "710801",
          name: "东区"
        },
        {
          code: "710802",
          name: "北区"
        },
        {
          code: "710803",
          name: "香山区"
        }
      ],
      [
        {
          code: "710901",
          name: "东区"
        },
        {
          code: "710902",
          name: "西区"
        }
      ],
      [
        {
          code: "711130",
          name: "万里区"
        },
        {
          code: "711131",
          name: "金山区"
        },
        {
          code: "711132",
          name: "板桥区"
        },
        {
          code: "711133",
          name: "汐止区"
        },
        {
          code: "711134",
          name: "深坑区"
        },
        {
          code: "711135",
          name: "石碇区"
        },
        {
          code: "711136",
          name: "瑞芳区"
        },
        {
          code: "711137",
          name: "平溪区"
        },
        {
          code: "711138",
          name: "双溪区"
        },
        {
          code: "711139",
          name: "贡寮区"
        },
        {
          code: "711140",
          name: "新店区"
        },
        {
          code: "711141",
          name: "坪林区"
        },
        {
          code: "711142",
          name: "乌来区"
        },
        {
          code: "711143",
          name: "永和区"
        },
        {
          code: "711144",
          name: "中和区"
        },
        {
          code: "711145",
          name: "土城区"
        },
        {
          code: "711146",
          name: "三峡区"
        },
        {
          code: "711147",
          name: "树林区"
        },
        {
          code: "711148",
          name: "莺歌区"
        },
        {
          code: "711149",
          name: "三重区"
        },
        {
          code: "711150",
          name: "新庄区"
        },
        {
          code: "711151",
          name: "泰山区"
        },
        {
          code: "711152",
          name: "林口区"
        },
        {
          code: "711153",
          name: "芦洲区"
        },
        {
          code: "711154",
          name: "五股区"
        },
        {
          code: "711155",
          name: "八里区"
        },
        {
          code: "711156",
          name: "淡水区"
        },
        {
          code: "711157",
          name: "三芝区"
        },
        {
          code: "711158",
          name: "石门区"
        }
      ],
      [
        {
          code: "711214",
          name: "宜兰市"
        },
        {
          code: "711215",
          name: "头城镇"
        },
        {
          code: "711216",
          name: "礁溪乡"
        },
        {
          code: "711217",
          name: "壮围乡"
        },
        {
          code: "711218",
          name: "员山乡"
        },
        {
          code: "711219",
          name: "罗东镇"
        },
        {
          code: "711220",
          name: "三星乡"
        },
        {
          code: "711221",
          name: "大同乡"
        },
        {
          code: "711222",
          name: "五结乡"
        },
        {
          code: "711223",
          name: "冬山乡"
        },
        {
          code: "711224",
          name: "苏澳镇"
        },
        {
          code: "711225",
          name: "南澳乡"
        }
      ],
      [
        {
          code: "711314",
          name: "竹北市"
        },
        {
          code: "711315",
          name: "湖口乡"
        },
        {
          code: "711316",
          name: "新丰乡"
        },
        {
          code: "711317",
          name: "新埔镇"
        },
        {
          code: "711318",
          name: "关西镇"
        },
        {
          code: "711319",
          name: "芎林乡"
        },
        {
          code: "711320",
          name: "宝山乡"
        },
        {
          code: "711321",
          name: "竹东镇"
        },
        {
          code: "711322",
          name: "五峰乡"
        },
        {
          code: "711323",
          name: "横山乡"
        },
        {
          code: "711324",
          name: "尖石乡"
        },
        {
          code: "711325",
          name: "北埔乡"
        },
        {
          code: "711326",
          name: "峨眉乡"
        }
      ],
      [
        {
          code: "711414",
          name: "中坜区"
        },
        {
          code: "711415",
          name: "平镇区"
        },
        {
          code: "711416",
          name: "龙潭区"
        },
        {
          code: "711417",
          name: "杨梅区"
        },
        {
          code: "711418",
          name: "新屋区"
        },
        {
          code: "711419",
          name: "观音区"
        },
        {
          code: "711420",
          name: "桃园区"
        },
        {
          code: "711421",
          name: "龟山区"
        },
        {
          code: "711422",
          name: "八德区"
        },
        {
          code: "711423",
          name: "大溪区"
        },
        {
          code: "711424",
          name: "复兴区"
        },
        {
          code: "711425",
          name: "大园区"
        },
        {
          code: "711426",
          name: "芦竹区"
        }
      ],
      [
        {
          code: "711519",
          name: "竹南镇"
        },
        {
          code: "711520",
          name: "头份市"
        },
        {
          code: "711521",
          name: "三湾乡"
        },
        {
          code: "711522",
          name: "南庄乡"
        },
        {
          code: "711523",
          name: "狮潭乡"
        },
        {
          code: "711524",
          name: "后龙镇"
        },
        {
          code: "711525",
          name: "通霄镇"
        },
        {
          code: "711526",
          name: "苑里镇"
        },
        {
          code: "711527",
          name: "苗栗市"
        },
        {
          code: "711528",
          name: "造桥乡"
        },
        {
          code: "711529",
          name: "头屋乡"
        },
        {
          code: "711530",
          name: "公馆乡"
        },
        {
          code: "711531",
          name: "大湖乡"
        },
        {
          code: "711532",
          name: "泰安乡"
        },
        {
          code: "711533",
          name: "铜锣乡"
        },
        {
          code: "711534",
          name: "三义乡"
        },
        {
          code: "711535",
          name: "西湖乡"
        },
        {
          code: "711536",
          name: "卓兰镇"
        }
      ],
      [
        {
          code: "711727",
          name: "彰化市"
        },
        {
          code: "711728",
          name: "芬园乡"
        },
        {
          code: "711729",
          name: "花坛乡"
        },
        {
          code: "711730",
          name: "秀水乡"
        },
        {
          code: "711731",
          name: "鹿港镇"
        },
        {
          code: "711732",
          name: "福兴乡"
        },
        {
          code: "711733",
          name: "线西乡"
        },
        {
          code: "711734",
          name: "和美镇"
        },
        {
          code: "711735",
          name: "伸港乡"
        },
        {
          code: "711736",
          name: "员林市"
        },
        {
          code: "711737",
          name: "社头乡"
        },
        {
          code: "711738",
          name: "永靖乡"
        },
        {
          code: "711739",
          name: "埔心乡"
        },
        {
          code: "711740",
          name: "溪湖镇"
        },
        {
          code: "711741",
          name: "大村乡"
        },
        {
          code: "711742",
          name: "埔盐乡"
        },
        {
          code: "711743",
          name: "田中镇"
        },
        {
          code: "711744",
          name: "北斗镇"
        },
        {
          code: "711745",
          name: "田尾乡"
        },
        {
          code: "711746",
          name: "埤头乡"
        },
        {
          code: "711747",
          name: "溪州乡"
        },
        {
          code: "711748",
          name: "竹塘乡"
        },
        {
          code: "711749",
          name: "二林镇"
        },
        {
          code: "711750",
          name: "大城乡"
        },
        {
          code: "711751",
          name: "芳苑乡"
        },
        {
          code: "711752",
          name: "二水乡"
        }
      ],
      [
        {
          code: "711919",
          name: "番路乡"
        },
        {
          code: "711920",
          name: "梅山乡"
        },
        {
          code: "711921",
          name: "竹崎乡"
        },
        {
          code: "711922",
          name: "阿里山乡"
        },
        {
          code: "711923",
          name: "中埔乡"
        },
        {
          code: "711924",
          name: "大埔乡"
        },
        {
          code: "711925",
          name: "水上乡"
        },
        {
          code: "711926",
          name: "鹿草乡"
        },
        {
          code: "711927",
          name: "太保市"
        },
        {
          code: "711928",
          name: "朴子市"
        },
        {
          code: "711929",
          name: "东石乡"
        },
        {
          code: "711930",
          name: "六脚乡"
        },
        {
          code: "711931",
          name: "新港乡"
        },
        {
          code: "711932",
          name: "民雄乡"
        },
        {
          code: "711933",
          name: "大林镇"
        },
        {
          code: "711934",
          name: "溪口乡"
        },
        {
          code: "711935",
          name: "义竹乡"
        },
        {
          code: "711936",
          name: "布袋镇"
        }
      ],
      [
        {
          code: "712121",
          name: "斗南镇"
        },
        {
          code: "712122",
          name: "大埤乡"
        },
        {
          code: "712123",
          name: "虎尾镇"
        },
        {
          code: "712124",
          name: "土库镇"
        },
        {
          code: "712125",
          name: "褒忠乡"
        },
        {
          code: "712126",
          name: "东势乡"
        },
        {
          code: "712127",
          name: "台西乡"
        },
        {
          code: "712128",
          name: "仑背乡"
        },
        {
          code: "712129",
          name: "麦寮乡"
        },
        {
          code: "712130",
          name: "斗六市"
        },
        {
          code: "712131",
          name: "林内乡"
        },
        {
          code: "712132",
          name: "古坑乡"
        },
        {
          code: "712133",
          name: "莿桐乡"
        },
        {
          code: "712134",
          name: "西螺镇"
        },
        {
          code: "712135",
          name: "二仑乡"
        },
        {
          code: "712136",
          name: "北港镇"
        },
        {
          code: "712137",
          name: "水林乡"
        },
        {
          code: "712138",
          name: "口湖乡"
        },
        {
          code: "712139",
          name: "四湖乡"
        },
        {
          code: "712140",
          name: "元长乡"
        }
      ],
      [
        {
          code: "712434",
          name: "屏东市"
        },
        {
          code: "712435",
          name: "三地门乡"
        },
        {
          code: "712436",
          name: "雾台乡"
        },
        {
          code: "712437",
          name: "玛家乡"
        },
        {
          code: "712438",
          name: "九如乡"
        },
        {
          code: "712439",
          name: "里港乡"
        },
        {
          code: "712440",
          name: "高树乡"
        },
        {
          code: "712441",
          name: "盐埔乡"
        },
        {
          code: "712442",
          name: "长治乡"
        },
        {
          code: "712443",
          name: "麟洛乡"
        },
        {
          code: "712444",
          name: "竹田乡"
        },
        {
          code: "712445",
          name: "内埔乡"
        },
        {
          code: "712446",
          name: "万丹乡"
        },
        {
          code: "712447",
          name: "潮州镇"
        },
        {
          code: "712448",
          name: "泰武乡"
        },
        {
          code: "712449",
          name: "来义乡"
        },
        {
          code: "712450",
          name: "万峦乡"
        },
        {
          code: "712451",
          name: "崁顶乡"
        },
        {
          code: "712452",
          name: "新埤乡"
        },
        {
          code: "712453",
          name: "南州乡"
        },
        {
          code: "712454",
          name: "林边乡"
        },
        {
          code: "712455",
          name: "东港镇"
        },
        {
          code: "712456",
          name: "琉球乡"
        },
        {
          code: "712457",
          name: "佳冬乡"
        },
        {
          code: "712458",
          name: "新园乡"
        },
        {
          code: "712459",
          name: "枋寮乡"
        },
        {
          code: "712460",
          name: "枋山乡"
        },
        {
          code: "712461",
          name: "春日乡"
        },
        {
          code: "712462",
          name: "狮子乡"
        },
        {
          code: "712463",
          name: "车城乡"
        },
        {
          code: "712464",
          name: "牡丹乡"
        },
        {
          code: "712465",
          name: "恒春镇"
        },
        {
          code: "712466",
          name: "满州乡"
        }
      ],
      [
        {
          code: "712517",
          name: "台东市"
        },
        {
          code: "712518",
          name: "绿岛乡"
        },
        {
          code: "712519",
          name: "兰屿乡"
        },
        {
          code: "712520",
          name: "延平乡"
        },
        {
          code: "712521",
          name: "卑南乡"
        },
        {
          code: "712522",
          name: "鹿野乡"
        },
        {
          code: "712523",
          name: "关山镇"
        },
        {
          code: "712524",
          name: "海端乡"
        },
        {
          code: "712525",
          name: "池上乡"
        },
        {
          code: "712526",
          name: "东河乡"
        },
        {
          code: "712527",
          name: "成功镇"
        },
        {
          code: "712528",
          name: "长滨乡"
        },
        {
          code: "712529",
          name: "金峰乡"
        },
        {
          code: "712530",
          name: "大武乡"
        },
        {
          code: "712531",
          name: "达仁乡"
        },
        {
          code: "712532",
          name: "太麻里乡"
        }
      ],
      [
        {
          code: "712615",
          name: "花莲市"
        },
        {
          code: "712616",
          name: "新城乡"
        },
        {
          code: "712618",
          name: "秀林乡"
        },
        {
          code: "712619",
          name: "吉安乡"
        },
        {
          code: "712620",
          name: "寿丰乡"
        },
        {
          code: "712621",
          name: "凤林镇"
        },
        {
          code: "712622",
          name: "光复乡"
        },
        {
          code: "712623",
          name: "丰滨乡"
        },
        {
          code: "712624",
          name: "瑞穗乡"
        },
        {
          code: "712625",
          name: "万荣乡"
        },
        {
          code: "712626",
          name: "玉里镇"
        },
        {
          code: "712627",
          name: "卓溪乡"
        },
        {
          code: "712628",
          name: "富里乡"
        }
      ],
      [
        {
          code: "712707",
          name: "马公市"
        },
        {
          code: "712708",
          name: "西屿乡"
        },
        {
          code: "712709",
          name: "望安乡"
        },
        {
          code: "712710",
          name: "七美乡"
        },
        {
          code: "712711",
          name: "白沙乡"
        },
        {
          code: "712712",
          name: "湖西乡"
        }
      ]
    ],
    [
      [
        {
          code: "810101",
          name: "中西区"
        },
        {
          code: "810102",
          name: "东区"
        },
        {
          code: "810103",
          name: "九龙城区"
        },
        {
          code: "810104",
          name: "观塘区"
        },
        {
          code: "810105",
          name: "南区"
        },
        {
          code: "810106",
          name: "深水埗区"
        },
        {
          code: "810107",
          name: "湾仔区"
        },
        {
          code: "810108",
          name: "黄大仙区"
        },
        {
          code: "810109",
          name: "油尖旺区"
        },
        {
          code: "810110",
          name: "离岛区"
        },
        {
          code: "810111",
          name: "葵青区"
        },
        {
          code: "810112",
          name: "北区"
        },
        {
          code: "810113",
          name: "西贡区"
        },
        {
          code: "810114",
          name: "沙田区"
        },
        {
          code: "810115",
          name: "屯门区"
        },
        {
          code: "810116",
          name: "大埔区"
        },
        {
          code: "810117",
          name: "荃湾区"
        },
        {
          code: "810118",
          name: "元朗区"
        }
      ]
    ],
    [
      [
        {
          code: "820101",
          name: "澳门半岛"
        },
        {
          code: "820102",
          name: "凼仔"
        },
        {
          code: "820103",
          name: "路凼城"
        },
        {
          code: "820104",
          name: "路环"
        }
      ]
    ]
  ];
  const uPicker_vue_vue_type_style_index_0_scoped_a53fbb26_lang = "";
  const _sfc_main$d = {
    name: "u-picker",
    emits: ["update:modelValue", "input", "confirm", "cancel"],
    props: {
      // 通过双向绑定控制组件的弹出与收起
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // picker中需要显示的参数
      params: {
        type: Object,
        default() {
          return {
            year: true,
            month: true,
            day: true,
            hour: false,
            minute: false,
            second: false,
            province: true,
            city: true,
            area: true,
            timestamp: true
          };
        }
      },
      // 当mode=selector或者mode=multiSelector时，提供的数组
      range: {
        type: Array,
        default() {
          return [];
        }
      },
      // 当mode=selector或者mode=multiSelector时，提供的默认选中的下标
      defaultSelector: {
        type: Array,
        default() {
          return [0];
        }
      },
      // 当 range 是一个 Array＜Object＞ 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容
      rangeKey: {
        type: String,
        default: ""
      },
      // 模式选择，region-地区类型，time-时间类型，selector-单列模式，multiSelector-多列模式
      mode: {
        type: String,
        default: "time"
      },
      // 年份开始时间
      startYear: {
        type: [String, Number],
        default: 1950
      },
      // 年份结束时间
      endYear: {
        type: [String, Number],
        default: 2050
      },
      // "取消"按钮的颜色
      cancelColor: {
        type: String,
        default: "#606266"
      },
      // "确定"按钮的颜色
      confirmColor: {
        type: String,
        default: "#2979ff"
      },
      // 默认显示的时间，2025-07-02 || 2025-07-02 13:01:00 || 2025/07/02
      defaultTime: {
        type: String,
        default: ""
      },
      // 默认显示的地区，可传类似["河北省", "秦皇岛市", "北戴河区"]
      defaultRegion: {
        type: Array,
        default() {
          return [];
        }
      },
      // 时间模式时，是否显示后面的年月日中文提示
      showTimeTag: {
        type: Boolean,
        default: true
      },
      // 默认显示地区的编码，defaultRegion和areaCode同时存在，areaCode优先，可传类似["13", "1303", "130304"]
      areaCode: {
        type: Array,
        default() {
          return [];
        }
      },
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 是否允许通过点击遮罩关闭Picker
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 弹出的z-index值
      zIndex: {
        type: [String, Number],
        default: 0
      },
      // 顶部标题
      title: {
        type: String,
        default: ""
      },
      // 取消按钮的文字
      cancelText: {
        type: String,
        default: "取消"
      },
      // 确认按钮的文字
      confirmText: {
        type: String,
        default: "确认"
      },
      // 遮罩的模糊度
      blur: {
        type: [String, Number],
        default: 0
      }
    },
    data() {
      return {
        popupValue: false,
        years: [],
        months: [],
        days: [],
        hours: [],
        minutes: [],
        seconds: [],
        year: 0,
        month: 0,
        day: 0,
        hour: 0,
        minute: 0,
        second: 0,
        reset: false,
        startDate: "",
        endDate: "",
        valueArr: [],
        provinces,
        citys: citys[0],
        areas: areas[0][0],
        province: 0,
        city: 0,
        area: 0,
        moving: false
        // 列是否还在滑动中，微信小程序如果在滑动中就点确定，结果可能不准确
      };
    },
    mounted() {
      this.init();
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      propsChange() {
        let { mode, defaultTime, startYear, endYear, defaultRegion, areaCode, defaultSelector } = this;
        return JSON.stringify({ mode, defaultTime, startYear, endYear, defaultRegion, areaCode, defaultSelector });
      },
      regionChange() {
        return `${this.province}-${this.city}`;
      },
      yearAndMonth() {
        return `${this.year}-${this.month}`;
      },
      uZIndex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      },
      // 用来兼容小程序、App、h5
      showColumnCom() {
        return true;
      }
    },
    watch: {
      propsChange() {
        this.reset = true;
        setTimeout(() => this.init(), 10);
      },
      // 如果地区发生变化，为了让picker联动起来，必须重置this.citys和this.areas
      regionChange(val) {
        this.citys = citys[this.province];
        this.areas = areas[this.province][this.city];
      },
      // watch监听月份的变化，实时变更日的天数，因为不同月份，天数不一样
      // 一个月可能有30，31天，甚至闰年2月的29天，平年2月28天
      yearAndMonth(val) {
        if (this.params.year)
          this.setDays();
      },
      // 微信和QQ小程序由于一些奇怪的原因(故同时对所有平台均初始化一遍)，需要重新初始化才能显示正确的值
      valueCom: {
        immediate: true,
        handler(n) {
          if (n) {
            this.reset = true;
            setTimeout(() => this.init(), 10);
          }
          this.popupValue = n;
        }
      }
    },
    methods: {
      // 标识滑动开始，只有微信小程序才有这样的事件
      pickstart() {
      },
      // 标识滑动结束
      pickend() {
      },
      // 对单列和多列形式的判断是否有传入变量的情况
      getItemValue(item, mode) {
        if (this.mode == mode) {
          return typeof item == "object" ? item[this.rangeKey] : item;
        }
      },
      // 小于10前面补0，用于月份，日期，时分秒等
      formatNumber(num) {
        return +num < 10 ? "0" + num : String(num);
      },
      // 生成递进的数组
      generateArray: function(start, end) {
        start = Number(start);
        end = Number(end);
        end = end > start ? end : start;
        return [...Array(end + 1).keys()].slice(start);
      },
      getIndex: function(arr, val) {
        let index2 = arr.indexOf(val);
        return ~index2 ? index2 : 0;
      },
      //日期时间处理
      initTimeValue() {
        let fdate = this.defaultTime.replace(/\-/g, "/");
        fdate = fdate && fdate.indexOf("/") == -1 ? `2020/01/01 ${fdate}` : fdate;
        let arr1 = fdate.split(" ");
        let arr1_1 = arr1[0] || "";
        let arr1_2 = arr1[1] || "";
        let arr2;
        if (arr1_1.indexOf("-") > -1) {
          arr2 = arr1_1.split("-");
        } else {
          arr2 = arr1_1.split("/");
        }
        let arr3 = arr1_2.split(":");
        let dateObj = {
          year: Number(arr2[0]),
          month: Number(arr2[1]) || 1,
          day: Number(arr2[2]) || 1,
          hour: Number(arr3[0]) || 0,
          minute: Number(arr3[1]) || 0,
          second: Number(arr3[2]) || 0
        };
        for (let key in dateObj) {
          if (dateObj[key] >= 0 && dateObj[key] < 10)
            dateObj[key] = `0${dateObj[key]}`;
        }
        fdate = `${dateObj.year}/${dateObj.month}/${dateObj.day} ${dateObj.hour}:${dateObj.minute}:${dateObj.second}`;
        let time = null;
        if (fdate)
          time = new Date(fdate);
        else
          time = /* @__PURE__ */ new Date();
        this.year = time.getFullYear();
        this.month = Number(time.getMonth()) + 1;
        this.day = time.getDate();
        this.hour = time.getHours();
        this.minute = time.getMinutes();
        this.second = time.getSeconds();
      },
      init() {
        this.valueArr = [];
        this.reset = false;
        if (this.mode == "time") {
          this.initTimeValue();
          if (this.params.year) {
            this.valueArr.push(0);
            this.setYears();
          }
          if (this.params.month) {
            this.valueArr.push(0);
            this.setMonths();
          }
          if (this.params.day) {
            this.valueArr.push(0);
            this.setDays();
          }
          if (this.params.hour) {
            this.valueArr.push(0);
            this.setHours();
          }
          if (this.params.minute) {
            this.valueArr.push(0);
            this.setMinutes();
          }
          if (this.params.second) {
            this.valueArr.push(0);
            this.setSeconds();
          }
        } else if (this.mode == "region") {
          if (this.params.province) {
            this.valueArr.push(0);
            this.setProvinces();
          }
          if (this.params.city) {
            this.valueArr.push(0);
            this.setCitys();
          }
          if (this.params.area) {
            this.valueArr.push(0);
            this.setAreas();
          }
        } else if (this.mode == "selector") {
          this.valueArr = this.defaultSelector;
        } else if (this.mode == "multiSelector") {
          this.valueArr = this.defaultSelector;
          this.multiSelectorValue = this.defaultSelector;
        }
        this.$forceUpdate();
      },
      // 设置picker的某一列值
      setYears() {
        this.years = this.generateArray(this.startYear, this.endYear);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.years, this.year));
      },
      setMonths() {
        this.months = this.generateArray(1, 12);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.months, this.month));
      },
      setDays() {
        let totalDays = new Date(this.year, this.month, 0).getDate();
        this.days = this.generateArray(1, totalDays);
        let index2 = 0;
        if (this.params.year && this.params.month)
          index2 = 2;
        else if (this.params.month)
          index2 = 1;
        else if (this.params.year)
          index2 = 1;
        else
          index2 = 0;
        if (this.day > this.days.length)
          this.day = this.days.length;
        this.valueArr.splice(index2, 1, this.getIndex(this.days, this.day));
      },
      setHours() {
        this.hours = this.generateArray(0, 23);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.hours, this.hour));
      },
      setMinutes() {
        this.minutes = this.generateArray(0, 59);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.minutes, this.minute));
      },
      setSeconds() {
        this.seconds = this.generateArray(0, 59);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.seconds, this.second));
      },
      setProvinces() {
        if (!this.params.province)
          return;
        let tmp = "";
        let useCode = false;
        if (this.areaCode.length) {
          tmp = this.areaCode[0];
          useCode = true;
        } else if (this.defaultRegion.length)
          tmp = this.defaultRegion[0];
        else
          tmp = 0;
        provinces.map((v2, k) => {
          if (useCode ? v2.code == tmp : v2.name == tmp) {
            tmp = k;
          }
        });
        this.province = tmp;
        this.provinces = provinces;
        this.valueArr.splice(0, 1, this.province);
      },
      setCitys() {
        if (!this.params.city)
          return;
        let tmp = "";
        let useCode = false;
        if (this.areaCode.length) {
          tmp = this.areaCode[1];
          useCode = true;
        } else if (this.defaultRegion.length)
          tmp = this.defaultRegion[1];
        else
          tmp = 0;
        citys[this.province].map((v2, k) => {
          if (useCode ? v2.code == tmp : v2.name == tmp) {
            tmp = k;
          }
        });
        this.city = tmp;
        this.citys = citys[this.province];
        this.valueArr.splice(1, 1, this.city);
      },
      setAreas() {
        if (!this.params.area)
          return;
        let tmp = "";
        let useCode = false;
        if (this.areaCode.length) {
          tmp = this.areaCode[2];
          useCode = true;
        } else if (this.defaultRegion.length)
          tmp = this.defaultRegion[2];
        else
          tmp = 0;
        areas[this.province][this.city].map((v2, k) => {
          if (useCode ? v2.code == tmp : v2.name == tmp) {
            tmp = k;
          }
        });
        this.area = tmp;
        this.areas = areas[this.province][this.city];
        this.valueArr.splice(2, 1, this.area);
      },
      close() {
        this.$emit("input", false);
        this.$emit("update:modelValue", false);
      },
      // 用户更改picker的列选项
      change(e2) {
        this.valueArr = e2.detail.value;
        let i = 0;
        if (this.mode == "time") {
          if (this.params.year)
            this.year = this.years[this.valueArr[i++]];
          if (this.params.month)
            this.month = this.months[this.valueArr[i++]];
          if (this.params.day)
            this.day = this.days[this.valueArr[i++]];
          if (this.params.hour)
            this.hour = this.hours[this.valueArr[i++]];
          if (this.params.minute)
            this.minute = this.minutes[this.valueArr[i++]];
          if (this.params.second)
            this.second = this.seconds[this.valueArr[i++]];
        } else if (this.mode == "region") {
          if (this.params.province)
            this.province = this.valueArr[i++];
          if (this.params.city)
            this.city = this.valueArr[i++];
          if (this.params.area)
            this.area = this.valueArr[i++];
        } else if (this.mode == "multiSelector") {
          let index2 = null;
          this.defaultSelector.map((val, idx) => {
            if (val != e2.detail.value[idx])
              index2 = idx;
          });
          if (index2 != null) {
            this.$emit("columnchange", {
              column: index2,
              index: e2.detail.value[index2]
            });
          }
        }
      },
      // 用户点击确定按钮
      getResult(event = null) {
        let result = {};
        if (this.mode == "time") {
          if (this.params.year)
            result.year = this.formatNumber(this.year || 0);
          if (this.params.month)
            result.month = this.formatNumber(this.month || 0);
          if (this.params.day)
            result.day = this.formatNumber(this.day || 0);
          if (this.params.hour)
            result.hour = this.formatNumber(this.hour || 0);
          if (this.params.minute)
            result.minute = this.formatNumber(this.minute || 0);
          if (this.params.second)
            result.second = this.formatNumber(this.second || 0);
          if (this.params.timestamp)
            result.timestamp = this.getTimestamp();
        } else if (this.mode == "region") {
          if (this.params.province)
            result.province = provinces[this.province];
          if (this.params.city)
            result.city = citys[this.province][this.city];
          if (this.params.area)
            result.area = areas[this.province][this.city][this.area];
        } else if (this.mode == "selector") {
          result = this.valueArr;
        } else if (this.mode == "multiSelector") {
          result = this.valueArr;
        }
        if (event)
          this.$emit(event, result);
        this.close();
      },
      // 获取时间戳
      getTimestamp() {
        let time = this.year + "/" + this.month + "/" + this.day + " " + this.hour + ":" + this.minute + ":" + this.second;
        return new Date(time).getTime() / 1e3;
      },
      // 获得数据源
      getDateSource() {
        return {
          provinces,
          citys,
          areas
        };
      },
      // 智能识别省市区
      regionDiscern(addressText) {
        let address = "";
        let province = {};
        let city = {};
        let area = {};
        if (!addressText)
          return { code: -1, msg: "地址文本不能为空" };
        addressText.trim();
        let firstTwoKey = addressText.substring(0, 2);
        let provinceIndex = -1;
        for (let i = 0; i < provinces.length; i++) {
          let { code: code2, name } = provinces[i];
          if (name.indexOf(firstTwoKey) == 0) {
            province = { code: code2, name };
            provinceIndex = i;
            break;
          }
        }
        if (provinceIndex == -1)
          return { code: -1, msg: `省份【${firstTwoKey}】没有找到，请输入正确的地址` };
        let citysArr = citys[provinceIndex];
        let cityIndex = -1;
        for (let i = 0; i < citysArr.length; i++) {
          let { name, code: code2 } = citysArr[i];
          let cityName = name.substr(0, name.length - 1);
          if (addressText.indexOf(cityName) > -1) {
            city = { code: code2, name };
            cityIndex = i;
            break;
          }
        }
        if (cityIndex == -1)
          return { code: -1, msg: `地级市没有找到，请输入正确的地址` };
        let areasArr = areas[provinceIndex][cityIndex];
        let areaIndex = -1;
        for (let i = 0; i < areasArr.length; i++) {
          let { code: code2, name } = areasArr[i];
          let reg = name;
          if (name.length > 2)
            reg += `|${name.substr(0, name.length - 1)}`;
          let areaRegExp = new RegExp(reg);
          if (addressText.search(areaRegExp) > -1) {
            area = { code: code2, name };
            address = addressText.replace(new RegExp(reg), "{{~}}").split("{{~}}")[1];
            areaIndex = i;
            break;
          }
        }
        if (areaIndex == -1)
          return { code: -1, msg: "县级市没有找到，请输入正确的地址" };
        let formatted_address = `${province.name}${city.name}${area.name}${address}`;
        let res = {
          code: 0,
          msg: "ok",
          data: {
            province,
            // 省
            city,
            // 市
            area,
            // 区
            address,
            // 街道地址
            formatted_address
            // 完整格式化地址
          }
        };
        return res;
      },
      // 智能识别收货信息
      addressDiscern(text2) {
        let name = "";
        let mobile2 = "";
        if (!text2)
          return { code: -1, msg: "地址文本不能为空" };
        let textArr = text2.split(/[^\u4e00-\u9fa5a-zA-Z0-9+-（）()]+/g).filter((v2) => v2.length);
        if (textArr.length != 3)
          return { code: -1, msg: "地址格式不正确，请按姓名 手机号 收货地址格式。" };
        let temp;
        let addressText;
        for (let [k, v2] of textArr.entries()) {
          if (/^1[3,4,5,6,7,8,9][0-9]{9}$/.test(v2)) {
            mobile2 = v2;
            continue;
          }
          if (!temp) {
            temp = v2;
            continue;
          }
          temp.length > v2.length ? (addressText = temp, name = v2) : (addressText = v2, name = temp);
        }
        let positionRes = this.regionDiscern(addressText);
        if (positionRes.code !== 0)
          return positionRes;
        let res = {
          code: 0,
          msg: "ok",
          data: {
            name,
            // 姓名
            mobile: mobile2,
            // 手机号
            position: positionRes.data
            // 省市区街道信息
          }
        };
        return res;
      },
      stop() {
      }
    }
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    const _component_v_uni_picker_view_column = PickerViewColumn;
    const _component_v_uni_picker_view = PickerView;
    const _component_v_uni_text = index$i;
    const _component_u_popup = resolveEasycom(vue.resolveDynamicComponent("u-popup"), __easycom_4);
    return vue.openBlock(), vue.createBlock(_component_u_popup, {
      maskCloseAble: $props.maskCloseAble,
      mode: "bottom",
      popup: false,
      modelValue: $data.popupValue,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.popupValue = $event),
      length: "auto",
      safeAreaInsetBottom: $props.safeAreaInsetBottom,
      onClose: $options.close,
      "z-index": $options.uZIndex,
      blur: $props.blur
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, { class: "u-datetime-picker" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_view, {
              class: "u-picker-header",
              onTouchmove: vue.withModifiers($options.stop, ["stop", "prevent"])
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  class: "u-btn-picker u-btn-picker--tips",
                  style: vue.normalizeStyle({ color: $props.cancelColor }),
                  "hover-class": "u-opacity",
                  "hover-stay-time": 150,
                  onClick: _cache[0] || (_cache[0] = ($event) => $options.getResult("cancel"))
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString($props.cancelText),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["style"]),
                vue.createVNode(_component_v_uni_view, { class: "u-picker__title" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString($props.title),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_v_uni_view, {
                  class: "u-btn-picker u-btn-picker--primary",
                  style: vue.normalizeStyle({ color: $data.moving ? $props.cancelColor : $props.confirmColor }),
                  "hover-class": "u-opacity",
                  "hover-stay-time": 150,
                  onTouchmove: vue.withModifiers($options.stop, ["stop"]),
                  onClick: _cache[1] || (_cache[1] = vue.withModifiers(($event) => $options.getResult("confirm"), ["stop"]))
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString($props.confirmText),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["style", "onTouchmove"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["onTouchmove"]),
            vue.createVNode(_component_v_uni_view, { class: "u-picker-body" }, {
              default: vue.withCtx(() => [
                $props.mode == "region" ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view, {
                  key: 0,
                  value: $data.valueArr,
                  onChange: $options.change,
                  class: "u-picker-view",
                  onPickstart: $options.pickstart,
                  onPickend: $options.pickend
                }, {
                  default: vue.withCtx(() => [
                    $options.showColumnCom && $props.params.province ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 0 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.provinces, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createVNode(
                                    _component_v_uni_view,
                                    { class: "u-line-1" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createTextVNode(
                                          vue.toDisplayString(item.name),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.city ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 1 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.citys, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createVNode(
                                    _component_v_uni_view,
                                    { class: "u-line-1" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createTextVNode(
                                          vue.toDisplayString(item.name),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.area ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 2 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.areas, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createVNode(
                                    _component_v_uni_view,
                                    { class: "u-line-1" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createTextVNode(
                                          vue.toDisplayString(item.name),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["value", "onChange", "onPickstart", "onPickend"])) : $props.mode == "time" ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view, {
                  key: 1,
                  value: $data.valueArr,
                  onChange: $options.change,
                  class: "u-picker-view",
                  onPickstart: $options.pickstart,
                  onPickend: $options.pickend
                }, {
                  default: vue.withCtx(() => [
                    $options.showColumnCom && $props.params.year ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 0 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.years, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString(item) + " ",
                                    1
                                    /* TEXT */
                                  ),
                                  $props.showTimeTag ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                                    key: 0,
                                    class: "u-text"
                                  }, {
                                    default: vue.withCtx(() => [
                                      vue.createTextVNode("年")
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : vue.createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.month ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 1 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.months, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString($options.formatNumber(item)) + " ",
                                    1
                                    /* TEXT */
                                  ),
                                  $props.showTimeTag ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                                    key: 0,
                                    class: "u-text"
                                  }, {
                                    default: vue.withCtx(() => [
                                      vue.createTextVNode("月")
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : vue.createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.day ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 2 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.days, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString($options.formatNumber(item)) + " ",
                                    1
                                    /* TEXT */
                                  ),
                                  $props.showTimeTag ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                                    key: 0,
                                    class: "u-text"
                                  }, {
                                    default: vue.withCtx(() => [
                                      vue.createTextVNode("日")
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : vue.createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.hour ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 3 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.hours, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString($options.formatNumber(item)) + " ",
                                    1
                                    /* TEXT */
                                  ),
                                  $props.showTimeTag ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                                    key: 0,
                                    class: "u-text"
                                  }, {
                                    default: vue.withCtx(() => [
                                      vue.createTextVNode("时")
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : vue.createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.minute ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 4 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.minutes, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString($options.formatNumber(item)) + " ",
                                    1
                                    /* TEXT */
                                  ),
                                  $props.showTimeTag ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                                    key: 0,
                                    class: "u-text"
                                  }, {
                                    default: vue.withCtx(() => [
                                      vue.createTextVNode("分")
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : vue.createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    $options.showColumnCom && $props.params.second ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 5 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($data.seconds, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString($options.formatNumber(item)) + " ",
                                    1
                                    /* TEXT */
                                  ),
                                  $props.showTimeTag ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
                                    key: 0,
                                    class: "u-text"
                                  }, {
                                    default: vue.withCtx(() => [
                                      vue.createTextVNode("秒")
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : vue.createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["value", "onChange", "onPickstart", "onPickend"])) : $props.mode == "selector" ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view, {
                  key: 2,
                  value: $data.valueArr,
                  onChange: $options.change,
                  class: "u-picker-view",
                  onPickstart: $options.pickstart,
                  onPickend: $options.pickend
                }, {
                  default: vue.withCtx(() => [
                    $options.showColumnCom ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view_column, { key: 0 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($props.range, (item, index2) => {
                            return vue.openBlock(), vue.createBlock(
                              _component_v_uni_view,
                              {
                                class: "u-column-item",
                                key: index2
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createVNode(
                                    _component_v_uni_view,
                                    { class: "u-line-1" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createTextVNode(
                                          vue.toDisplayString($options.getItemValue(item, "selector")),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["value", "onChange", "onPickstart", "onPickend"])) : $props.mode == "multiSelector" ? (vue.openBlock(), vue.createBlock(_component_v_uni_picker_view, {
                  key: 3,
                  value: $data.valueArr,
                  onChange: $options.change,
                  class: "u-picker-view",
                  onPickstart: $options.pickstart,
                  onPickend: $options.pickend
                }, {
                  default: vue.withCtx(() => [
                    $options.showColumnCom ? (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      { key: 0 },
                      vue.renderList($props.range, (item, index2) => {
                        return vue.openBlock(), vue.createBlock(
                          _component_v_uni_picker_view_column,
                          { key: index2 },
                          {
                            default: vue.withCtx(() => [
                              (vue.openBlock(true), vue.createElementBlock(
                                vue.Fragment,
                                null,
                                vue.renderList(item, (item1, index1) => {
                                  return vue.openBlock(), vue.createBlock(
                                    _component_v_uni_view,
                                    {
                                      class: "u-column-item",
                                      key: index1
                                    },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createVNode(
                                          _component_v_uni_view,
                                          { class: "u-line-1" },
                                          {
                                            default: vue.withCtx(() => [
                                              vue.createTextVNode(
                                                vue.toDisplayString($options.getItemValue(item1, "multiSelector")),
                                                1
                                                /* TEXT */
                                              )
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  );
                                }),
                                128
                                /* KEYED_FRAGMENT */
                              ))
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["value", "onChange", "onPickstart", "onPickend"])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["maskCloseAble", "modelValue", "safeAreaInsetBottom", "onClose", "z-index", "blur"]);
  }
  const __easycom_13 = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$d], ["__scopeId", "data-v-a53fbb26"]]);
  const uVerificationCode_vue_vue_type_style_index_0_scoped_2fd0463a_lang = "";
  const _sfc_main$c = {
    name: "u-verification-code",
    emits: ["start", "end", "change"],
    props: {
      // 倒计时总秒数
      seconds: {
        type: [String, Number],
        default: 60
      },
      // 尚未开始时提示
      startText: {
        type: String,
        default: "获取验证码"
      },
      // 正在倒计时中的提示
      changeText: {
        type: String,
        default: "X秒重新获取"
      },
      // 倒计时结束时的提示
      endText: {
        type: String,
        default: "重新获取"
      },
      // 是否在H5刷新或各端返回再进入时继续倒计时
      keepRunning: {
        type: Boolean,
        default: false
      },
      // 为了区分多个页面，或者一个页面多个倒计时组件本地存储的继续倒计时变了
      uniqueKey: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        secNum: this.seconds,
        timer: null,
        canGetCode: true
        // 是否可以执行验证码操作
      };
    },
    mounted() {
      this.checkKeepRunning();
    },
    watch: {
      seconds: {
        immediate: true,
        handler(n) {
          this.secNum = n;
        }
      }
    },
    methods: {
      checkKeepRunning() {
        let lastTimestamp = Number(getStorageSync(this.uniqueKey + "_$uCountDownTimestamp"));
        if (!lastTimestamp)
          return this.changeEvent(this.startText);
        let nowTimestamp = Math.floor(+/* @__PURE__ */ new Date() / 1e3);
        if (this.keepRunning && lastTimestamp && lastTimestamp > nowTimestamp) {
          this.secNum = lastTimestamp - nowTimestamp;
          removeStorageSync(this.uniqueKey + "_$uCountDownTimestamp");
          this.start();
        } else {
          this.changeEvent(this.startText);
        }
      },
      // 开始倒计时
      start() {
        if (this.timer) {
          clearInterval(this.timer);
          this.timer = null;
        }
        this.$emit("start");
        this.canGetCode = false;
        this.changeEvent(this.changeText.replace(/x|X/, this.secNum));
        this.setTimeToStorage();
        this.timer = setInterval(() => {
          if (--this.secNum) {
            this.changeEvent(this.changeText.replace(/x|X/, this.secNum));
          } else {
            clearInterval(this.timer);
            this.timer = null;
            this.changeEvent(this.endText);
            this.secNum = this.seconds;
            this.$emit("end");
            this.canGetCode = true;
          }
        }, 1e3);
      },
      // 重置，可以让用户再次获取验证码
      reset() {
        this.canGetCode = true;
        clearInterval(this.timer);
        this.secNum = this.seconds;
        this.changeEvent(this.endText);
      },
      changeEvent(text2) {
        this.$emit("change", text2);
      },
      // 保存时间戳，为了防止倒计时尚未结束，H5刷新或者各端的右上角返回上一页再进来
      setTimeToStorage() {
        if (!this.keepRunning || !this.timer)
          return;
        if (this.secNum > 0 && this.secNum <= this.seconds) {
          let nowTimestamp = Math.floor(+/* @__PURE__ */ new Date() / 1e3);
          setStorage({
            key: this.uniqueKey + "_$uCountDownTimestamp",
            data: nowTimestamp + Number(this.secNum)
          });
        }
      }
    },
    // 组件销毁的时候，清除定时器，否则定时器会继续存在，系统不会自动清除
    beforeUnmount() {
      this.setTimeToStorage();
      clearTimeout(this.timer);
      this.timer = null;
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, { class: "u-code-wrap" }, {
      default: vue.withCtx(() => [
        vue.createCommentVNode(" 此组件功能由js完成，无需写html逻辑 ")
      ]),
      _: 1
      /* STABLE */
    });
  }
  const __easycom_14 = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$c], ["__scopeId", "data-v-2fd0463a"]]);
  const uBadge_vue_vue_type_style_index_0_scoped_7fc65061_lang = "";
  const _sfc_main$b = {
    name: "u-badge",
    props: {
      // primary,warning,success,error,info
      type: {
        type: String,
        default: "error"
      },
      // default, mini
      size: {
        type: String,
        default: "default"
      },
      //是否是圆点
      isDot: {
        type: Boolean,
        default: false
      },
      // 显示的数值内容
      count: {
        type: [Number, String]
      },
      // 展示封顶的数字值
      overflowCount: {
        type: Number,
        default: 99
      },
      // 当数值为 0 时，是否展示 Badge
      showZero: {
        type: Boolean,
        default: false
      },
      // 位置偏移
      offset: {
        type: Array,
        default: () => {
          return [20, 20];
        }
      },
      // 是否开启绝对定位，开启了offset才会起作用
      absolute: {
        type: Boolean,
        default: true
      },
      // 字体大小
      fontSize: {
        type: [String, Number],
        default: "24"
      },
      // 字体演示
      color: {
        type: String,
        default: "#ffffff"
      },
      // badge的背景颜色
      bgColor: {
        type: String,
        default: ""
      },
      // 是否让badge组件的中心点和父组件右上角重合，配置的话，offset将会失效
      isCenter: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      // 是否将badge中心与父组件右上角重合
      boxStyle() {
        let style = {};
        if (this.isCenter) {
          style.top = 0;
          style.right = 0;
          style.transform = "translateY(-50%) translateX(50%)";
        } else {
          style.top = this.offset[0] + "rpx";
          style.right = this.offset[1] + "rpx";
          style.transform = "translateY(0) translateX(0)";
        }
        if (this.size == "mini") {
          style.transform = style.transform + " scale(0.8)";
        }
        return style;
      },
      // isDot类型时，不显示文字
      showText() {
        if (this.isDot)
          return "";
        else {
          if (this.count > this.overflowCount)
            return `${this.overflowCount}+`;
          else
            return this.count;
        }
      },
      // 是否显示组件
      show() {
        if (this.count == 0 && this.showZero == false)
          return false;
        else
          return true;
      }
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return $options.show ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      key: 0,
      class: vue.normalizeClass(["u-badge", [
        $props.isDot ? "u-badge-dot" : "",
        $props.size == "mini" ? "u-badge-mini" : "",
        $props.type ? "u-badge--bg--" + $props.type : ""
      ]]),
      style: vue.normalizeStyle([{
        top: $props.offset[0] + "rpx",
        right: $props.offset[1] + "rpx",
        fontSize: $props.fontSize + "rpx",
        position: $props.absolute ? "absolute" : "static",
        color: $props.color,
        backgroundColor: $props.bgColor
      }, $options.boxStyle])
    }, {
      default: vue.withCtx(() => [
        vue.createTextVNode(
          vue.toDisplayString($options.showText),
          1
          /* TEXT */
        )
      ]),
      _: 1
      /* STABLE */
    }, 8, ["class", "style"])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$b], ["__scopeId", "data-v-7fc65061"]]);
  const uSubsection_vue_vue_type_style_index_0_scoped_0f68e2cb_lang = "";
  const _sfc_main$a = {
    name: "u-subsection",
    emits: ["change", "update:modelValue", "input"],
    props: {
      // tab的数据
      list: {
        type: Array,
        default() {
          return [];
        }
      },
      value: {
        type: [String, Number],
        default: 0
      },
      modelValue: {
        type: [String, Number],
        default: 0
      },
      // 当前活动的tab的index
      current: {
        type: [Number, String],
        default: 0
      },
      // 激活的颜色
      activeColor: {
        type: String,
        default: "#303133"
      },
      // 未激活的颜色
      inactiveColor: {
        type: String,
        default: "#606266"
      },
      // 模式选择，mode=button为按钮形式，mode=subsection时为分段模式
      mode: {
        type: String,
        default: "button"
      },
      // 字体大小，单位rpx
      fontSize: {
        type: [Number, String],
        default: 28
      },
      // 是否开启动画效果
      animation: {
        type: Boolean,
        default: true
      },
      // 组件的高度，单位rpx
      height: {
        type: [Number, String],
        default: 70
      },
      // 激活tab的字体是否加粗
      bold: {
        type: Boolean,
        default: true
      },
      // mode=button时，组件背景颜色
      bgColor: {
        type: String,
        default: "#eeeeef"
      },
      // mode = button时，滑块背景颜色
      buttonColor: {
        type: String,
        default: "#ffffff"
      },
      // 在切换分段器的时候，是否让设备震一下
      vibrateShort: {
        type: Boolean,
        default: false
      },
      offset: {
        type: Array,
        default: function() {
          return [0, 0];
        }
      }
    },
    data() {
      return {
        itemBgStyle: {
          width: 0,
          left: 0,
          backgroundColor: "#ffffff",
          height: "100%",
          transition: ""
        },
        currentIndex: this.current,
        buttonPadding: 3,
        // mode = button 时，组件的内边距
        borderRadius: 5,
        // 圆角值
        firstTimeVibrateShort: true,
        // 组件初始化时，会触发current变化，此时不应震动
        listInfo: []
      };
    },
    watch: {
      valueCom: {
        immediate: true,
        handler(nVal) {
          if (!nVal)
            nVal = 0;
          this.currentIndex = nVal;
          this.changeSectionStatus(nVal);
        }
      },
      current: {
        immediate: true,
        handler(nVal) {
          if (!nVal)
            nVal = this.valueCom || 0;
          this.currentIndex = nVal;
          this.changeSectionStatus(nVal);
        }
      },
      list: {
        deep: true,
        handler(nVal = []) {
          this.listInfoFn();
          setTimeout(() => {
            this.getTabsInfo();
          }, 10);
        }
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 设置mode=subsection时，滑块特有的样式
      noBorderRight() {
        return (index2) => {
          if (this.mode != "subsection")
            return;
          let classs = "";
          if (index2 < this.list.length - 1)
            classs += " u-none-border-right";
          if (index2 == 0)
            classs += " u-item-first";
          if (index2 == this.list.length - 1)
            classs += " u-item-last";
          return classs;
        };
      },
      // 文字的样式
      textStyle() {
        return (index2) => {
          let style = {};
          if (this.mode == "subsection") {
            if (index2 == this.currentIndex) {
              style.color = "#ffffff";
            } else {
              style.color = this.activeColor;
            }
          } else {
            if (index2 == this.currentIndex) {
              style.color = this.activeColor;
            } else {
              style.color = this.inactiveColor;
            }
          }
          if (index2 == this.currentIndex && this.bold)
            style.fontWeight = "bold";
          style.fontSize = this.fontSize + "rpx";
          return style;
        };
      },
      // 每个分段器item的样式
      itemStyle() {
        return (index2) => {
          let style = {};
          if (this.mode == "subsection") {
            style.borderColor = this.activeColor;
            style.borderWidth = "1px";
            style.borderStyle = "solid";
          }
          return style;
        };
      },
      // mode=button时，外层view的样式
      subsectionStyle() {
        let style = {};
        style.height = upx2px(this.height) + "px";
        if (this.mode == "button") {
          style.backgroundColor = this.bgColor;
          style.padding = `${this.buttonPadding}px`;
          style.borderRadius = `${this.borderRadius}px`;
        }
        return style;
      },
      // 滑块的样式
      itemBarStyle() {
        let style = {};
        style.backgroundColor = this.activeColor;
        style.zIndex = 1;
        if (this.mode == "button") {
          style.backgroundColor = this.buttonColor;
          style.borderRadius = `${this.borderRadius}px`;
          style.bottom = `${this.buttonPadding}px`;
          style.height = upx2px(this.height) - this.buttonPadding * 2 + "px";
          style.zIndex = 0;
        }
        return Object.assign(this.itemBgStyle, style);
      }
    },
    mounted() {
      this.listInfoFn();
      setTimeout(() => {
        this.getTabsInfo();
      }, 10);
    },
    methods: {
      listInfoFn() {
        this.listInfo = this.list.map((val, index2) => {
          if (typeof val != "object") {
            let obj = {
              width: 0,
              name: val
            };
            return obj;
          } else {
            return val;
          }
        });
        return this.listInfo;
      },
      // 改变滑块的样式
      changeSectionStatus(nVal) {
        if (this.mode == "subsection") {
          if (nVal == this.list.length - 1) {
            this.itemBgStyle.borderRadius = `0 ${this.buttonPadding}px ${this.buttonPadding}px 0`;
          }
          if (nVal == 0) {
            this.itemBgStyle.borderRadius = `${this.buttonPadding}px 0 0 ${this.buttonPadding}px`;
          }
          if (nVal > 0 && nVal < this.list.length - 1) {
            this.itemBgStyle.borderRadius = "0";
          }
        }
        setTimeout(() => {
          this.itemBgLeft();
        }, 10);
        if (this.vibrateShort && !this.firstTimeVibrateShort)
          ;
        this.firstTimeVibrateShort = false;
      },
      click(index2) {
        if (index2 == this.currentIndex)
          return;
        this.currentIndex = index2;
        this.changeSectionStatus(index2);
        this.$emit("change", Number(index2));
        this.$emit("input", Number(index2));
        this.$emit("update:modelValue", Number(index2));
      },
      // 获取各个tab的节点信息
      getTabsInfo() {
        let view2 = createSelectorQuery().in(this);
        for (let i = 0; i < this.list.length; i++) {
          view2.select(".u-item-" + i).boundingClientRect();
        }
        view2.exec((res) => {
          if (!res.length) {
            setTimeout(() => {
              this.getTabsInfo();
              return;
            }, 10);
          }
          res.map((val, index2) => {
            this.listInfo[index2].width = val.width;
          });
          if (this.mode == "subsection") {
            this.itemBgStyle.width = this.listInfo[0].width + "px";
          } else if (this.mode == "button") {
            this.itemBgStyle.width = this.listInfo[0].width + "px";
          }
          this.itemBgLeft();
        });
      },
      itemBgLeft() {
        if (this.animation) {
          this.itemBgStyle.transition = "all 0.35s";
        } else {
          this.itemBgStyle.transition = "all 0s";
        }
        let left = 0;
        this.listInfo.map((val, index2) => {
          if (index2 < this.currentIndex)
            left += val.width;
        });
        if (this.mode == "subsection") {
          this.itemBgStyle.left = left + "px";
        } else if (this.mode == "button") {
          this.itemBgStyle.left = left + this.buttonPadding + "px";
        }
      }
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    const _component_u_badge = resolveEasycom(vue.resolveDynamicComponent("u-badge"), __easycom_1);
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: "u-subsection",
      style: vue.normalizeStyle([$options.subsectionStyle])
    }, {
      default: vue.withCtx(() => [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.listInfo, (item, index2) => {
            return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
              class: vue.normalizeClass(["u-item u-line-1", [$options.noBorderRight(index2), "u-item-" + index2]]),
              style: vue.normalizeStyle([$options.itemStyle(index2)]),
              onClick: ($event) => $options.click(index2),
              key: index2
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  style: vue.normalizeStyle([$options.textStyle(index2)]),
                  class: "u-item-text u-line-1"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString(item.name),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["style"]),
                item.num > 0 ? (vue.openBlock(), vue.createBlock(_component_u_badge, {
                  key: 0,
                  count: item.num,
                  offset: $props.offset,
                  size: "mini"
                }, null, 8, ["count", "offset"])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["style", "onClick", "class"]);
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        vue.createVNode(_component_v_uni_view, {
          class: "u-item-bg",
          style: vue.normalizeStyle([$options.itemBarStyle])
        }, null, 8, ["style"])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["style"]);
  }
  const __easycom_15 = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$a], ["__scopeId", "data-v-0f68e2cb"]]);
  const uSwipeAction_vue_vue_type_style_index_0_scoped_77be9835_lang = "";
  const _sfc_main$9 = {
    name: "u-swipe-action",
    emits: ["click", "content-click", "open", "close"],
    props: {
      // index值，用于得知点击删除的是哪个按钮
      index: {
        type: [Number, String],
        default: ""
      },
      // 滑动按钮的宽度，单位为rpx
      btnWidth: {
        type: [String, Number],
        default: 180
      },
      // 是否禁止某个action滑动
      disabled: {
        type: Boolean,
        default: false
      },
      // 打开或者关闭组件
      show: {
        type: Boolean,
        default: false
      },
      // 组件背景颜色
      bgColor: {
        type: String,
        default: "#ffffff"
      },
      // 是否使手机发生短促震动，目前只在iOS的微信小程序有效(2020-05-06)
      vibrateShort: {
        type: Boolean,
        default: false
      },
      // 按钮操作参数
      options: {
        type: Array,
        default() {
          return [];
        }
      }
    },
    watch: {
      show: {
        immediate: true,
        handler(nVal, oVal) {
          if (nVal) {
            this.open();
          } else {
            this.close();
          }
        }
      }
    },
    data() {
      return {
        moveX: 0,
        // movable-view元素在x轴上需要移动的目标移动距离，用于展开或收起滑动的按钮
        scrollX: 0,
        // movable-view移动过程中产生的change事件中的x轴移动值
        status: false,
        // 滑动的状态，表示当前是展开还是关闭按钮的状态
        movableAreaWidth: 0,
        // 滑动区域
        elId: this.$u.guid(),
        // id，用于通知另外组件关闭时的识别
        showBtn: false
        // 刚开始渲染视图时不显示右边的按钮，避免视图闪动
      };
    },
    computed: {
      movableViewWidth() {
        return this.movableAreaWidth + this.allBtnWidth + "px";
      },
      innerBtnWidth() {
        return upx2px(this.btnWidth);
      },
      allBtnWidth() {
        return upx2px(this.btnWidth) * this.options.length;
      },
      btnStyle() {
        return (style) => {
          style.width = this.btnWidth + "rpx";
          return style;
        };
      }
    },
    mounted() {
      this.getActionRect();
    },
    methods: {
      // 点击按钮
      btnClick(index2) {
        this.status = false;
        this.$emit("click", this.index, index2);
      },
      // movable-view元素移动事件
      change(e2) {
        this.scrollX = e2.detail.x;
      },
      // 关闭按钮状态
      close() {
        this.moveX = 0;
        this.status = false;
      },
      // 打开按钮的状态
      open() {
        if (this.disabled)
          return;
        this.moveX = -this.allBtnWidth;
        this.status = true;
      },
      // 用户手指离开movable-view元素，停止触摸
      touchend() {
        this.moveX = this.scrollX;
        this.$nextTick(function() {
          if (this.status == false) {
            if (this.scrollX <= -this.allBtnWidth / 4) {
              this.moveX = -this.allBtnWidth;
              this.status = true;
              this.emitOpenEvent();
              if (this.vibrateShort)
                vibrateShort();
            } else {
              this.moveX = 0;
              this.status = false;
              this.emitCloseEvent();
            }
          } else {
            if (this.scrollX > -this.allBtnWidth * 3 / 4) {
              this.moveX = 0;
              this.$nextTick(() => {
                this.moveX = 101;
              });
              this.status = false;
              this.emitCloseEvent();
            } else {
              this.moveX = -this.allBtnWidth;
              this.status = true;
              this.emitOpenEvent();
            }
          }
        });
      },
      emitOpenEvent() {
        this.$emit("open", this.index);
      },
      emitCloseEvent() {
        this.$emit("close", this.index);
      },
      // 开始触摸
      touchstart() {
      },
      getActionRect() {
        this.$uGetRect(".u-swipe-action").then((res) => {
          this.movableAreaWidth = res.width;
          this.$nextTick(() => {
            this.showBtn = true;
          });
        });
      },
      // 点击内容触发事件
      contentClick() {
        if (this.status == true) {
          this.status = "close";
          this.moveX = 0;
        }
        this.$emit("content-click", this.index);
      }
    }
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    const _component_v_uni_movable_view = MovableView;
    const _component_v_uni_movable_area = MovableArea;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, { class: "" }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_movable_area, {
          class: "u-swipe-action",
          style: vue.normalizeStyle({ backgroundColor: $props.bgColor })
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_movable_view, {
              class: "u-swipe-view",
              onChange: $options.change,
              onTouchend: $options.touchend,
              onTouchstart: $options.touchstart,
              direction: "horizontal",
              disabled: $props.disabled,
              x: $data.moveX,
              style: vue.normalizeStyle({
                width: $options.movableViewWidth ? $options.movableViewWidth : "100%"
              })
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  class: "u-swipe-content",
                  onClick: vue.withModifiers($options.contentClick, ["stop"])
                }, {
                  default: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ]),
                  _: 3
                  /* FORWARDED */
                }, 8, ["onClick"]),
                $data.showBtn ? (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  { key: 0 },
                  vue.renderList($props.options, (item, index2) => {
                    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                      class: "u-swipe-del",
                      onClick: vue.withModifiers(($event) => $options.btnClick(index2), ["stop"]),
                      style: vue.normalizeStyle([$options.btnStyle(item.style)]),
                      key: index2
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(
                          _component_v_uni_view,
                          { class: "u-btn-text" },
                          {
                            default: vue.withCtx(() => [
                              vue.createTextVNode(
                                vue.toDisplayString(item.text),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        )
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["onClick", "style"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )) : vue.createCommentVNode("v-if", true)
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["onChange", "onTouchend", "onTouchstart", "disabled", "x", "style"])
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["style"])
      ]),
      _: 3
      /* FORWARDED */
    });
  }
  const __easycom_18 = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$9], ["__scopeId", "data-v-77be9835"]]);
  const uniForm = "";
  const keypress = {
    name: "Keypress",
    props: {
      disable: {
        type: Boolean,
        default: false
      }
    },
    mounted() {
      const keyNames = {
        esc: ["Esc", "Escape"],
        tab: "Tab",
        enter: "Enter",
        space: [" ", "Spacebar"],
        up: ["Up", "ArrowUp"],
        left: ["Left", "ArrowLeft"],
        right: ["Right", "ArrowRight"],
        down: ["Down", "ArrowDown"],
        delete: ["Backspace", "Delete", "Del"]
      };
      const listener = ($event) => {
        if (this.disable) {
          return;
        }
        const keyName = Object.keys(keyNames).find((key) => {
          const keyName2 = $event.key;
          const value = keyNames[key];
          return value === keyName2 || Array.isArray(value) && value.includes(keyName2);
        });
        if (keyName) {
          setTimeout(() => {
            this.$emit(keyName, {});
          }, 0);
        }
      };
      document.addEventListener("keyup", listener);
    },
    render: () => {
    }
  };
  const mpMixin = {};
  function email(value) {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(
      value
    );
  }
  function mobile(value) {
    return /^1([3589]\d|4[5-9]|6[1-2,4-7]|7[0-8])\d{8}$/.test(value);
  }
  function url(value) {
    return /^((https|http|ftp|rtsp|mms):\/\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-zA-Z_!~*'()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(:[0-9]{1,4})?((\/?)|(\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+\/?)$/.test(
      value
    );
  }
  function date(value) {
    if (!value)
      return false;
    if (number(value))
      value = +value;
    return !/Invalid|NaN/.test(new Date(value).toString());
  }
  function dateISO(value) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(
      value
    );
  }
  function number(value) {
    return /^[\+-]?(\d+\.?\d*|\.\d+|\d\.\d+e\+\d+)$/.test(value);
  }
  function string(value) {
    return typeof value === "string";
  }
  function digits(value) {
    return /^\d+$/.test(value);
  }
  function idCard(value) {
    return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
      value
    );
  }
  function carNo(value) {
    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
    if (value.length === 7) {
      return creg.test(value);
    }
    if (value.length === 8) {
      return xreg.test(value);
    }
    return false;
  }
  function amount(value) {
    return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value);
  }
  function chinese(value) {
    const reg = /^[\u4e00-\u9fa5]+$/gi;
    return reg.test(value);
  }
  function letter(value) {
    return /^[a-zA-Z]*$/.test(value);
  }
  function enOrNum(value) {
    const reg = /^[0-9a-zA-Z]*$/g;
    return reg.test(value);
  }
  function contains(value, param) {
    return value.indexOf(param) >= 0;
  }
  function range$1(value, param) {
    return value >= param[0] && value <= param[1];
  }
  function rangeLength(value, param) {
    return value.length >= param[0] && value.length <= param[1];
  }
  function landline(value) {
    const reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
    return reg.test(value);
  }
  function empty(value) {
    switch (typeof value) {
      case "undefined":
        return true;
      case "string":
        if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, "").length == 0)
          return true;
        break;
      case "boolean":
        if (!value)
          return true;
        break;
      case "number":
        if (value === 0 || isNaN(value))
          return true;
        break;
      case "object":
        if (value === null || value.length === 0)
          return true;
        for (const i in value) {
          return false;
        }
        return true;
    }
    return false;
  }
  function jsonString(value) {
    if (typeof value === "string") {
      try {
        const obj = JSON.parse(value);
        if (typeof obj === "object" && obj) {
          return true;
        }
        return false;
      } catch (e2) {
        return false;
      }
    }
    return false;
  }
  function array(value) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value);
    }
    return Object.prototype.toString.call(value) === "[object Array]";
  }
  function object(value) {
    return Object.prototype.toString.call(value) === "[object Object]";
  }
  function code(value, len = 6) {
    return new RegExp(`^\\d{${len}}$`).test(value);
  }
  function func(value) {
    return typeof value === "function";
  }
  function promise(value) {
    return object(value) && func(value.then) && func(value.catch);
  }
  function image(value) {
    const newValue = value.split("?")[0];
    const IMAGE_REGEXP = /\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;
    return IMAGE_REGEXP.test(newValue);
  }
  function video(value) {
    const VIDEO_REGEXP = /\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8)/i;
    return VIDEO_REGEXP.test(value);
  }
  function regExp(o2) {
    return o2 && Object.prototype.toString.call(o2) === "[object RegExp]";
  }
  const test = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    amount,
    array,
    carNo,
    chinese,
    code,
    contains,
    date,
    dateISO,
    digits,
    email,
    empty,
    enOrNum,
    func,
    idCard,
    image,
    jsonString,
    landline,
    letter,
    mobile,
    number,
    object,
    promise,
    range: range$1,
    rangeLength,
    regExp,
    string,
    url,
    video
  }, Symbol.toStringTag, { value: "Module" }));
  function strip(num, precision = 15) {
    return +parseFloat(Number(num).toPrecision(precision));
  }
  function digitLength(num) {
    const eSplit = num.toString().split(/[eE]/);
    const len = (eSplit[0].split(".")[1] || "").length - +(eSplit[1] || 0);
    return len > 0 ? len : 0;
  }
  function float2Fixed(num) {
    if (num.toString().indexOf("e") === -1) {
      return Number(num.toString().replace(".", ""));
    }
    const dLen = digitLength(num);
    return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);
  }
  function checkBoundary(num) {
    {
      if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {
        console.warn(`${num} 超出了精度限制，结果可能不正确`);
      }
    }
  }
  function iteratorOperation(arr, operation) {
    const [num1, num2, ...others] = arr;
    let res = operation(num1, num2);
    others.forEach((num) => {
      res = operation(res, num);
    });
    return res;
  }
  function times(...nums) {
    if (nums.length > 2) {
      return iteratorOperation(nums, times);
    }
    const [num1, num2] = nums;
    const num1Changed = float2Fixed(num1);
    const num2Changed = float2Fixed(num2);
    const baseNum = digitLength(num1) + digitLength(num2);
    const leftValue = num1Changed * num2Changed;
    checkBoundary(leftValue);
    return leftValue / Math.pow(10, baseNum);
  }
  function divide(...nums) {
    if (nums.length > 2) {
      return iteratorOperation(nums, divide);
    }
    const [num1, num2] = nums;
    const num1Changed = float2Fixed(num1);
    const num2Changed = float2Fixed(num2);
    checkBoundary(num1Changed);
    checkBoundary(num2Changed);
    return times(
      num1Changed / num2Changed,
      strip(Math.pow(10, digitLength(num2) - digitLength(num1)))
    );
  }
  function round(num, ratio) {
    const base = Math.pow(10, ratio);
    let result = divide(Math.round(Math.abs(times(num, base))), base);
    if (num < 0 && result !== 0) {
      result = times(result, -1);
    }
    return result;
  }
  function range(min = 0, max = 0, value = 0) {
    return Math.max(min, Math.min(max, Number(value)));
  }
  function getPx(value, unit = false) {
    if (number(value)) {
      return unit ? `${value}px` : Number(value);
    }
    if (/(rpx|upx)$/.test(value)) {
      return unit ? `${upx2px(parseInt(value))}px` : Number(upx2px(parseInt(value)));
    }
    return unit ? `${parseInt(value)}px` : parseInt(value);
  }
  function sleep(value = 30) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, value);
    });
  }
  function os() {
    return getSystemInfoSync().platform.toLowerCase();
  }
  function sys() {
    return getSystemInfoSync();
  }
  function random(min, max) {
    if (min >= 0 && max > 0 && max >= min) {
      const gab = max - min + 1;
      return Math.floor(Math.random() * gab + min);
    }
    return 0;
  }
  function guid(len = 32, firstU = true, radix = null) {
    const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    const uuid = [];
    radix = radix || chars.length;
    if (len) {
      for (let i = 0; i < len; i++)
        uuid[i] = chars[0 | Math.random() * radix];
    } else {
      let r;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
      uuid[14] = "4";
      for (let i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random() * 16;
          uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
        }
      }
    }
    if (firstU) {
      uuid.shift();
      return `u${uuid.join("")}`;
    }
    return uuid.join("");
  }
  function $parent(name = void 0) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options && parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        return parent;
      }
    }
    return false;
  }
  function addStyle(customStyle, target = "object") {
    if (empty(customStyle) || typeof customStyle === "object" && target === "object" || target === "string" && typeof customStyle === "string") {
      return customStyle;
    }
    if (target === "object") {
      customStyle = trim$1(customStyle);
      const styleArray = customStyle.split(";");
      const style = {};
      for (let i = 0; i < styleArray.length; i++) {
        if (styleArray[i]) {
          const item = styleArray[i].split(":");
          style[trim$1(item[0])] = trim$1(item[1]);
        }
      }
      return style;
    }
    let string2 = "";
    for (const i in customStyle) {
      const key = i.replace(/([A-Z])/g, "-$1").toLowerCase();
      string2 += `${key}:${customStyle[i]};`;
    }
    return trim$1(string2);
  }
  function addUnit(value = "auto", unit = ((_c) => (_c = ((_b) => (_b = uni == null ? void 0 : uni.$uv) == null ? void 0 : _b.config)()) == null ? void 0 : _c.unit)() ? ((_e) => (_e = ((_d) => (_d = uni == null ? void 0 : uni.$uv) == null ? void 0 : _d.config)()) == null ? void 0 : _e.unit)() : "px") {
    value = String(value);
    return number(value) ? `${value}${unit}` : value;
  }
  function deepClone(obj, cache = /* @__PURE__ */ new WeakMap()) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (cache.has(obj))
      return cache.get(obj);
    let clone;
    if (obj instanceof Date) {
      clone = new Date(obj.getTime());
    } else if (obj instanceof RegExp) {
      clone = new RegExp(obj);
    } else if (obj instanceof Map) {
      clone = new Map(
        Array.from(obj, ([key, value]) => [key, deepClone(value, cache)])
      );
    } else if (obj instanceof Set) {
      clone = new Set(Array.from(obj, (value) => deepClone(value, cache)));
    } else if (Array.isArray(obj)) {
      clone = obj.map((value) => deepClone(value, cache));
    } else if (Object.prototype.toString.call(obj) === "[object Object]") {
      clone = Object.create(Object.getPrototypeOf(obj));
      cache.set(obj, clone);
      for (const [key, value] of Object.entries(obj)) {
        clone[key] = deepClone(value, cache);
      }
    } else {
      clone = Object.assign({}, obj);
    }
    cache.set(obj, clone);
    return clone;
  }
  function deepMerge(target = {}, source = {}) {
    target = deepClone(target);
    if (typeof target !== "object" || target === null || typeof source !== "object" || source === null)
      return target;
    const merged = Array.isArray(target) ? target.slice() : Object.assign({}, target);
    for (const prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      const sourceValue = source[prop];
      const targetValue = merged[prop];
      if (sourceValue instanceof Date) {
        merged[prop] = new Date(sourceValue);
      } else if (sourceValue instanceof RegExp) {
        merged[prop] = new RegExp(sourceValue);
      } else if (sourceValue instanceof Map) {
        merged[prop] = new Map(sourceValue);
      } else if (sourceValue instanceof Set) {
        merged[prop] = new Set(sourceValue);
      } else if (typeof sourceValue === "object" && sourceValue !== null) {
        merged[prop] = deepMerge(targetValue, sourceValue);
      } else {
        merged[prop] = sourceValue;
      }
    }
    return merged;
  }
  function error(err) {
  }
  function randomArray(array2 = []) {
    return array2.sort(() => Math.random() - 0.5);
  }
  if (!String.prototype.padStart) {
    String.prototype.padStart = function(maxLength, fillString = " ") {
      if (Object.prototype.toString.call(fillString) !== "[object String]") {
        throw new TypeError("fillString must be String");
      }
      const str = this;
      if (str.length >= maxLength)
        return String(str);
      const fillLength = maxLength - str.length;
      let times2 = Math.ceil(fillLength / fillString.length);
      while (times2 >>= 1) {
        fillString += fillString;
        if (times2 === 1) {
          fillString += fillString;
        }
      }
      return fillString.slice(0, fillLength) + str;
    };
  }
  function timeFormat(dateTime = null, formatStr = "yyyy-mm-dd") {
    let date2;
    if (!dateTime) {
      date2 = /* @__PURE__ */ new Date();
    } else if (/^\d{10}$/.test(dateTime == null ? void 0 : dateTime.toString().trim())) {
      date2 = new Date(dateTime * 1e3);
    } else if (typeof dateTime === "string" && /^\d+$/.test(dateTime.trim())) {
      date2 = new Date(Number(dateTime));
    } else if (typeof dateTime === "string" && dateTime.includes("-") && !dateTime.includes("T")) {
      date2 = new Date(dateTime.replace(/-/g, "/"));
    } else {
      date2 = new Date(dateTime);
    }
    const timeSource = {
      y: date2.getFullYear().toString(),
      // 年
      m: (date2.getMonth() + 1).toString().padStart(2, "0"),
      // 月
      d: date2.getDate().toString().padStart(2, "0"),
      // 日
      h: date2.getHours().toString().padStart(2, "0"),
      // 时
      M: date2.getMinutes().toString().padStart(2, "0"),
      // 分
      s: date2.getSeconds().toString().padStart(2, "0")
      // 秒
      // 有其他格式化字符需求可以继续添加，必须转化成字符串
    };
    for (const key in timeSource) {
      const [ret] = new RegExp(`${key}+`).exec(formatStr) || [];
      if (ret) {
        const beginIndex = key === "y" && ret.length === 2 ? 2 : 0;
        formatStr = formatStr.replace(ret, timeSource[key].slice(beginIndex));
      }
    }
    return formatStr;
  }
  function timeFrom(timestamp = null, format2 = "yyyy-mm-dd") {
    if (timestamp == null)
      timestamp = Number(/* @__PURE__ */ new Date());
    timestamp = parseInt(timestamp);
    if (timestamp.toString().length == 10)
      timestamp *= 1e3;
    let timer = (/* @__PURE__ */ new Date()).getTime() - timestamp;
    timer = parseInt(timer / 1e3);
    let tips = "";
    switch (true) {
      case timer < 300:
        tips = "刚刚";
        break;
      case (timer >= 300 && timer < 3600):
        tips = `${parseInt(timer / 60)}分钟前`;
        break;
      case (timer >= 3600 && timer < 86400):
        tips = `${parseInt(timer / 3600)}小时前`;
        break;
      case (timer >= 86400 && timer < 2592e3):
        tips = `${parseInt(timer / 86400)}天前`;
        break;
      default:
        if (format2 === false) {
          if (timer >= 2592e3 && timer < 365 * 86400) {
            tips = `${parseInt(timer / (86400 * 30))}个月前`;
          } else {
            tips = `${parseInt(timer / (86400 * 365))}年前`;
          }
        } else {
          tips = timeFormat(timestamp, format2);
        }
    }
    return tips;
  }
  function trim$1(str, pos = "both") {
    str = String(str);
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    }
    if (pos == "left") {
      return str.replace(/^\s*/, "");
    }
    if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    }
    if (pos == "all") {
      return str.replace(/\s+/g, "");
    }
    return str;
  }
  function queryParams(data = {}, isPrefix = true, arrayFormat = "brackets") {
    const prefix = isPrefix ? "?" : "";
    const _result = [];
    if (["indices", "brackets", "repeat", "comma"].indexOf(arrayFormat) == -1)
      arrayFormat = "brackets";
    for (const key in data) {
      const value = data[key];
      if (["", void 0, null].indexOf(value) >= 0) {
        continue;
      }
      if (value.constructor === Array) {
        switch (arrayFormat) {
          case "indices":
            for (let i = 0; i < value.length; i++) {
              _result.push(`${key}[${i}]=${value[i]}`);
            }
            break;
          case "brackets":
            value.forEach((_value) => {
              _result.push(`${key}[]=${_value}`);
            });
            break;
          case "repeat":
            value.forEach((_value) => {
              _result.push(`${key}=${_value}`);
            });
            break;
          case "comma":
            let commaStr = "";
            value.forEach((_value) => {
              commaStr += (commaStr ? "," : "") + _value;
            });
            _result.push(`${key}=${commaStr}`);
            break;
          default:
            value.forEach((_value) => {
              _result.push(`${key}[]=${_value}`);
            });
        }
      } else {
        _result.push(`${key}=${value}`);
      }
    }
    return _result.length ? prefix + _result.join("&") : "";
  }
  function toast(title, duration = 2e3) {
    showToast({
      title: String(title),
      icon: "none",
      duration
    });
  }
  function type2icon(type2 = "success", fill = false) {
    if (["primary", "info", "error", "warning", "success"].indexOf(type2) == -1)
      type2 = "success";
    let iconName = "";
    switch (type2) {
      case "primary":
        iconName = "info-circle";
        break;
      case "info":
        iconName = "info-circle";
        break;
      case "error":
        iconName = "close-circle";
        break;
      case "warning":
        iconName = "error-circle";
        break;
      case "success":
        iconName = "checkmark-circle";
        break;
      default:
        iconName = "checkmark-circle";
    }
    if (fill)
      iconName += "-fill";
    return iconName;
  }
  function priceFormat(number2, decimals = 0, decimalPoint = ".", thousandsSeparator = ",") {
    number2 = `${number2}`.replace(/[^0-9+-Ee.]/g, "");
    const n = !isFinite(+number2) ? 0 : +number2;
    const prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
    const sep = typeof thousandsSeparator === "undefined" ? "," : thousandsSeparator;
    const dec = typeof decimalPoint === "undefined" ? "." : decimalPoint;
    let s = "";
    s = (prec ? round(n, prec) + "" : `${Math.round(n)}`).split(".");
    const re = /(-?\d+)(\d{3})/;
    while (re.test(s[0])) {
      s[0] = s[0].replace(re, `$1${sep}$2`);
    }
    if ((s[1] || "").length < prec) {
      s[1] = s[1] || "";
      s[1] += new Array(prec - s[1].length + 1).join("0");
    }
    return s.join(dec);
  }
  function getDuration(value, unit = true) {
    const valueNum = parseInt(value);
    if (unit) {
      if (/s$/.test(value))
        return value;
      return value > 30 ? `${value}ms` : `${value}s`;
    }
    if (/ms$/.test(value))
      return valueNum;
    if (/s$/.test(value))
      return valueNum > 30 ? valueNum : valueNum * 1e3;
    return valueNum;
  }
  function padZero(value) {
    return `00${value}`.slice(-2);
  }
  function formValidate(instance, event) {
    const formItem = $parent.call(instance, "uv-form-item");
    const form = $parent.call(instance, "uv-form");
    if (formItem && form) {
      form.validateField(formItem.prop, () => {
      }, event);
    }
  }
  function getProperty(obj, key) {
    if (!obj) {
      return;
    }
    if (typeof key !== "string" || key === "") {
      return "";
    }
    if (key.indexOf(".") !== -1) {
      const keys2 = key.split(".");
      let firstObj = obj[keys2[0]] || {};
      for (let i = 1; i < keys2.length; i++) {
        if (firstObj) {
          firstObj = firstObj[keys2[i]];
        }
      }
      return firstObj;
    }
    return obj[key];
  }
  function setProperty(obj, key, value) {
    if (!obj) {
      return;
    }
    const inFn = function(_obj, keys2, v2) {
      if (keys2.length === 1) {
        _obj[keys2[0]] = v2;
        return;
      }
      while (keys2.length > 1) {
        const k = keys2[0];
        if (!_obj[k] || typeof _obj[k] !== "object") {
          _obj[k] = {};
        }
        keys2.shift();
        inFn(_obj[k], keys2, v2);
      }
    };
    if (typeof key !== "string" || key === "")
      ;
    else if (key.indexOf(".") !== -1) {
      const keys2 = key.split(".");
      inFn(obj, keys2, value);
    } else {
      obj[key] = value;
    }
  }
  function page() {
    var _a2;
    const pages2 = getCurrentPages$1();
    const route2 = (_a2 = pages2[pages2.length - 1]) == null ? void 0 : _a2.route;
    return `/${route2 ? route2 : ""}`;
  }
  function pages() {
    const pages2 = getCurrentPages$1();
    return pages2;
  }
  function getHistoryPage(back = 0) {
    const pages2 = getCurrentPages$1();
    const len = pages2.length;
    return pages2[len - 1 + back];
  }
  function setConfig({ props: props2 = {}, config: config2 = {}, color: color2 = {}, zIndex: zIndex2 = {} }) {
    const { deepMerge: deepMerge2 } = uni.$uv;
    uni.$uv.config = deepMerge2(uni.$uv.config, config2);
    uni.$uv.props = deepMerge2(uni.$uv.props, props2);
    uni.$uv.color = deepMerge2(uni.$uv.color, color2);
    uni.$uv.zIndex = deepMerge2(uni.$uv.zIndex, zIndex2);
  }
  const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    $parent,
    addStyle,
    addUnit,
    deepClone,
    deepMerge,
    error,
    formValidate,
    getDuration,
    getHistoryPage,
    getProperty,
    getPx,
    guid,
    os,
    padZero,
    page,
    pages,
    priceFormat,
    queryParams,
    random,
    randomArray,
    range,
    setConfig,
    setProperty,
    sleep,
    sys,
    timeFormat,
    timeFrom,
    toast,
    trim: trim$1,
    type2icon
  }, Symbol.toStringTag, { value: "Module" }));
  const mixin = {
    // 定义每个组件都可能需要用到的外部样式以及类名
    props: {
      // 每个组件都有的父组件传递的样式，可以为字符串或者对象形式
      customStyle: {
        type: [Object, String],
        default: () => ({})
      },
      customClass: {
        type: String,
        default: ""
      },
      // 跳转的页面路径
      url: {
        type: String,
        default: ""
      },
      // 页面跳转的类型
      linkType: {
        type: String,
        default: "navigateTo"
      }
    },
    data() {
      return {};
    },
    onLoad() {
      this.$uv.getRect = this.$uvGetRect;
    },
    created() {
      this.$uv.getRect = this.$uvGetRect;
    },
    computed: {
      $uv() {
        return {
          ...index,
          test
        };
      },
      /**
       * 生成bem规则类名
       * 由于微信小程序，H5，nvue之间绑定class的差异，无法通过:class="[bem()]"的形式进行同用
       * 故采用如下折中做法，最后返回的是数组（一般平台）或字符串（支付宝和字节跳动平台），类似['a', 'b', 'c']或'a b c'的形式
       * @param {String} name 组件名称
       * @param {Array} fixed 一直会存在的类名
       * @param {Array} change 会根据变量值为true或者false而出现或者隐藏的类名
       * @returns {Array|string}
       */
      bem() {
        return function(name, fixed, change) {
          const prefix = `uv-${name}--`;
          const classes = {};
          if (fixed) {
            fixed.map((item) => {
              classes[prefix + this[item]] = true;
            });
          }
          if (change) {
            change.map((item) => {
              this[item] ? classes[prefix + item] = this[item] : delete classes[prefix + item];
            });
          }
          return Object.keys(classes);
        };
      }
    },
    methods: {
      // 跳转某一个页面
      openPage(urlKey = "url") {
        const url2 = this[urlKey];
        if (url2) {
          uni[this.linkType]({
            url: url2
          });
        }
      },
      // 查询节点信息
      // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
      // 解决办法为在组件根部再套一个没有任何作用的view元素
      $uvGetRect(selector, all) {
        return new Promise((resolve) => {
          createSelectorQuery().in(this)[all ? "selectAll" : "select"](selector).boundingClientRect((rect) => {
            if (all && Array.isArray(rect) && rect.length) {
              resolve(rect);
            }
            if (!all && rect) {
              resolve(rect);
            }
          }).exec();
        });
      },
      getParentData(parentName = "") {
        if (!this.parent)
          this.parent = {};
        this.parent = this.$uv.$parent.call(this, parentName);
        if (this.parent.children) {
          this.parent.children.indexOf(this) === -1 && this.parent.children.push(this);
        }
        if (this.parent && this.parentData) {
          Object.keys(this.parentData).map((key) => {
            this.parentData[key] = this.parent[key];
          });
        }
      },
      // 阻止事件冒泡
      preventEvent(e2) {
        e2 && typeof e2.stopPropagation === "function" && e2.stopPropagation();
      },
      // 空操作
      noop(e2) {
        this.preventEvent(e2);
      }
    },
    onReachBottom() {
      $emit("uvOnReachBottom");
    },
    beforeDestroy() {
      if (this.parent && array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index2) => {
          if (child === this) {
            childrenList.splice(index2, 1);
          }
        });
      }
    }
  };
  const uvSafeBottom_vue_vue_type_style_index_0_scoped_c43267bd_lang = "";
  const _sfc_main$8 = {
    name: "uv-safe-bottom",
    mixins: [mpMixin, mixin],
    data() {
      return {
        safeAreaBottomHeight: 0,
        isNvue: false
      };
    },
    computed: {
      style() {
        const style = {};
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    mounted() {
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["uv-safe-bottom", [!$data.isNvue && "uv-safe-area-inset-bottom"]]),
      style: vue.normalizeStyle([$options.style])
    }, null, 8, ["style", "class"]);
  }
  const uvSafeBottom = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$8], ["__scopeId", "data-v-c43267bd"]]);
  const props$4 = {
    props: {
      // 是否显示遮罩
      show: {
        type: Boolean,
        default: false
      },
      // 层级z-index
      zIndex: {
        type: [String, Number],
        default: 10070
      },
      // 遮罩的过渡时间，单位为ms
      duration: {
        type: [String, Number],
        default: 300
      },
      // 不透明度值，当做rgba的第四个参数
      opacity: {
        type: [String, Number],
        default: 0.5
      },
      ...(_g = (_f = uni.$uv) == null ? void 0 : _f.props) == null ? void 0 : _g.overlay
    }
  };
  class MPAnimation {
    constructor(options, _this) {
      this.options = options;
      this.animation = createAnimation$1({
        ...options
      });
      this.currentStepAnimates = {};
      this.next = 0;
      this.$ = _this;
    }
    _nvuePushAnimates(type2, args) {
      let aniObj = this.currentStepAnimates[this.next];
      let styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type2)) {
        if (!styles.styles.transform) {
          styles.styles.transform = "";
        }
        let unit = "";
        if (type2 === "rotate") {
          unit = "deg";
        }
        styles.styles.transform += `${type2}(${args + unit}) `;
      } else {
        styles.styles[type2] = `${args}`;
      }
      this.currentStepAnimates[this.next] = styles;
    }
    _animateRun(styles = {}, config2 = {}) {
      let ref = this.$.$refs["ani"].ref;
      if (!ref)
        return;
      return new Promise((resolve, reject) => {
        nvueAnimation.transition(
          ref,
          {
            styles,
            ...config2
          },
          (res) => {
            resolve();
          }
        );
      });
    }
    _nvueNextAnimate(animates, step = 0, fn) {
      let obj = animates[step];
      if (obj) {
        let { styles, config: config2 } = obj;
        this._animateRun(styles, config2).then(() => {
          step += 1;
          this._nvueNextAnimate(animates, step, fn);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn === "function" && fn();
        this.isEnd = true;
      }
    }
    step(config2 = {}) {
      this.animation.step(config2);
      return this;
    }
    run(fn) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(() => {
        typeof fn === "function" && fn();
      }, this.$.durationTime);
    }
  }
  const animateTypes1 = [
    "matrix",
    "matrix3d",
    "rotate",
    "rotate3d",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
    "scaleZ",
    "skew",
    "skewX",
    "skewY",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "translateZ"
  ];
  const animateTypes2 = ["opacity", "backgroundColor"];
  const animateTypes3 = ["width", "height", "left", "right", "top", "bottom"];
  animateTypes1.concat(animateTypes2, animateTypes3).forEach((type2) => {
    MPAnimation.prototype[type2] = function(...args) {
      this.animation[type2](...args);
      return this;
    };
  });
  function createAnimation(option, _this) {
    if (!_this)
      return;
    clearTimeout(_this.timer);
    return new MPAnimation(option, _this);
  }
  const _sfc_main$7 = {
    name: "uv-transition",
    mixins: [mpMixin, mixin],
    emits: ["click", "change"],
    props: {
      // 是否展示组件
      show: {
        type: Boolean,
        default: false
      },
      // 使用的动画模式
      mode: {
        type: [Array, String, null],
        default() {
          return "fade";
        }
      },
      // 动画的执行时间，单位ms
      duration: {
        type: [String, Number],
        default: 300
      },
      // 使用的动画过渡函数
      timingFunction: {
        type: String,
        default: "ease-out"
      },
      customClass: {
        type: String,
        default: ""
      },
      // nvue模式下 是否直接显示，在uv-list等cell下面使用就需要设置
      cellChild: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isShow: false,
        transform: "",
        opacity: 1,
        animationData: {},
        durationTime: 300,
        config: {}
      };
    },
    watch: {
      show: {
        handler(newVal) {
          if (newVal) {
            this.open();
          } else {
            if (this.isShow) {
              this.close();
            }
          }
        },
        immediate: true
      }
    },
    computed: {
      // 初始化动画条件
      transformStyles() {
        const style = {
          transform: this.transform,
          opacity: this.opacity,
          ...this.$uv.addStyle(this.customStyle),
          "transition-duration": `${this.duration / 1e3}s`
        };
        return this.$uv.addStyle(style, "string");
      }
    },
    created() {
      this.config = {
        duration: this.duration,
        timingFunction: this.timingFunction,
        transformOrigin: "50% 50%",
        delay: 0
      };
      this.durationTime = this.duration;
    },
    methods: {
      /**
       *  ref 触发 初始化动画
       */
      init(obj = {}) {
        if (obj.duration) {
          this.durationTime = obj.duration;
        }
        this.animation = createAnimation(Object.assign(this.config, obj), this);
      },
      /**
       * 点击组件触发回调
       */
      onClick() {
        this.$emit("click", {
          detail: this.isShow
        });
      },
      /**
       * ref 触发 动画分组
       * @param {Object} obj
       */
      step(obj, config2 = {}) {
        if (!this.animation)
          return;
        for (let i in obj) {
          try {
            if (typeof obj[i] === "object") {
              this.animation[i](...obj[i]);
            } else {
              this.animation[i](obj[i]);
            }
          } catch (e2) {
            console.error(`方法 ${i} 不存在`);
          }
        }
        this.animation.step(config2);
        return this;
      },
      /**
       *  ref 触发 执行动画
       */
      run(fn) {
        if (!this.animation)
          return;
        this.animation.run(fn);
      },
      // 开始过度动画
      open() {
        clearTimeout(this.timer);
        this.transform = "";
        this.isShow = true;
        let { opacity, transform } = this.styleInit(false);
        if (typeof opacity !== "undefined") {
          this.opacity = opacity;
        }
        this.transform = transform;
        this.$nextTick(() => {
          this.timer = setTimeout(() => {
            this.animation = createAnimation(this.config, this);
            this.tranfromInit(false).step();
            this.animation.run();
            this.opacity = 1;
            this.$emit("change", {
              detail: this.isShow
            });
          }, 20);
        });
      },
      // 关闭过渡动画
      close(type2) {
        if (!this.animation)
          return;
        this.tranfromInit(true).step().run(() => {
          this.isShow = false;
          this.animationData = null;
          this.animation = null;
          let { opacity, transform } = this.styleInit(false);
          this.opacity = opacity || 1;
          this.transform = transform;
          this.$emit("change", {
            detail: this.isShow
          });
        });
      },
      // 处理动画开始前的默认样式
      styleInit(type2) {
        let styles = {
          transform: ""
        };
        let buildStyle = (type3, mode) => {
          if (mode === "fade") {
            styles.opacity = this.animationType(type3)[mode];
          } else {
            styles.transform += this.animationType(type3)[mode] + " ";
          }
        };
        if (typeof this.mode === "string") {
          buildStyle(type2, this.mode);
        } else {
          this.mode.forEach((mode) => {
            buildStyle(type2, mode);
          });
        }
        return styles;
      },
      // 处理内置组合动画
      tranfromInit(type2) {
        let buildTranfrom = (type3, mode) => {
          let aniNum = null;
          if (mode === "fade") {
            aniNum = type3 ? 0 : 1;
          } else {
            aniNum = type3 ? "-100%" : "0";
            if (mode === "zoom-in") {
              aniNum = type3 ? 0.8 : 1;
            }
            if (mode === "zoom-out") {
              aniNum = type3 ? 1.2 : 1;
            }
            if (mode === "slide-right") {
              aniNum = type3 ? "100%" : "0";
            }
            if (mode === "slide-bottom") {
              aniNum = type3 ? "100%" : "0";
            }
          }
          this.animation[this.animationMode()[mode]](aniNum);
        };
        if (typeof this.mode === "string") {
          buildTranfrom(type2, this.mode);
        } else {
          this.mode.forEach((mode) => {
            buildTranfrom(type2, mode);
          });
        }
        return this.animation;
      },
      animationType(type2) {
        return {
          fade: type2 ? 1 : 0,
          "slide-top": `translateY(${type2 ? "0" : "-100%"})`,
          "slide-right": `translateX(${type2 ? "0" : "100%"})`,
          "slide-bottom": `translateY(${type2 ? "0" : "100%"})`,
          "slide-left": `translateX(${type2 ? "0" : "-100%"})`,
          "zoom-in": `scaleX(${type2 ? 1 : 0.8}) scaleY(${type2 ? 1 : 0.8})`,
          "zoom-out": `scaleX(${type2 ? 1 : 1.2}) scaleY(${type2 ? 1 : 1.2})`
        };
      },
      // 内置动画类型与实际动画对应字典
      animationMode() {
        return {
          fade: "opacity",
          "slide-top": "translateY",
          "slide-right": "translateX",
          "slide-bottom": "translateY",
          "slide-left": "translateX",
          "zoom-in": "scale",
          "zoom-out": "scale"
        };
      },
      // 驼峰转中横线
      toLine(name) {
        return name.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return $data.isShow ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      key: 0,
      ref: "ani",
      animation: $data.animationData,
      class: vue.normalizeClass($props.customClass),
      style: vue.normalizeStyle($options.transformStyles),
      onClick: $options.onClick
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["animation", "class", "style", "onClick"])) : vue.createCommentVNode("v-if", true);
  }
  const uvTransition = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$7]]);
  const uvOverlay_vue_vue_type_style_index_0_scoped_7a36d1d7_lang = "";
  const _sfc_main$6 = {
    name: "uv-overlay",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$4],
    watch: {
      show(newVal) {
        if (newVal) {
          document.querySelector("body").style.overflow = "hidden";
        } else {
          document.querySelector("body").style.overflow = "";
        }
      }
    },
    computed: {
      overlayStyle() {
        const style = {
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          zIndex: this.zIndex,
          bottom: 0,
          "background-color": `rgba(0, 0, 0, ${this.opacity})`
        };
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    components: {
      uvTransition
    },
    methods: {
      clickHandler() {
        this.$emit("click");
      },
      clear() {
      }
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_transition = vue.resolveComponent("uv-transition");
    return vue.openBlock(), vue.createBlock(_component_uv_transition, {
      show: _ctx.show,
      mode: "fade",
      "custom-class": "uv-overlay",
      duration: _ctx.duration,
      "custom-style": $options.overlayStyle,
      onClick: $options.clickHandler,
      onTouchmove: vue.withModifiers($options.clear, ["stop", "prevent"])
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["show", "duration", "custom-style", "onClick", "onTouchmove"]);
  }
  const uvOverlay = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$6], ["__scopeId", "data-v-7a36d1d7"]]);
  const props$3 = {
    props: {
      bgColor: {
        type: String,
        default: "transparent"
      }
    }
  };
  const uvStatusBar_vue_vue_type_style_index_0_scoped_234dba16_lang = "";
  const _sfc_main$5 = {
    name: "uv-status-bar",
    mixins: [mpMixin, mixin, props$3],
    data() {
      return {};
    },
    computed: {
      style() {
        const style = {};
        style.height = this.$uv.addUnit(this.$uv.sys().statusBarHeight, "px");
        if (this.bgColor) {
          if (this.bgColor.indexOf("gradient") > -1) {
            style.backgroundImage = this.bgColor;
          } else {
            style.background = this.bgColor;
          }
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      style: vue.normalizeStyle([$options.style]),
      class: "uv-status-bar"
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["style"]);
  }
  const uvStatusBar = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$5], ["__scopeId", "data-v-234dba16"]]);
  const icons = {
    "uvicon-level": "e68f",
    "uvicon-checkbox-mark": "e659",
    "uvicon-folder": "e694",
    "uvicon-movie": "e67c",
    "uvicon-star-fill": "e61e",
    "uvicon-star": "e618",
    "uvicon-phone-fill": "e6ac",
    "uvicon-phone": "e6ba",
    "uvicon-apple-fill": "e635",
    "uvicon-backspace": "e64d",
    "uvicon-attach": "e640",
    "uvicon-empty-data": "e671",
    "uvicon-empty-address": "e68a",
    "uvicon-empty-favor": "e662",
    "uvicon-empty-car": "e657",
    "uvicon-empty-order": "e66b",
    "uvicon-empty-list": "e672",
    "uvicon-empty-search": "e677",
    "uvicon-empty-permission": "e67d",
    "uvicon-empty-news": "e67e",
    "uvicon-empty-history": "e685",
    "uvicon-empty-coupon": "e69b",
    "uvicon-empty-page": "e60e",
    "uvicon-empty-wifi-off": "e6cc",
    "uvicon-reload": "e627",
    "uvicon-order": "e695",
    "uvicon-server-man": "e601",
    "uvicon-search": "e632",
    "uvicon-more-dot-fill": "e66f",
    "uvicon-scan": "e631",
    "uvicon-map": "e665",
    "uvicon-map-fill": "e6a8",
    "uvicon-tags": "e621",
    "uvicon-tags-fill": "e613",
    "uvicon-eye": "e664",
    "uvicon-eye-fill": "e697",
    "uvicon-eye-off": "e69c",
    "uvicon-eye-off-outline": "e688",
    "uvicon-mic": "e66d",
    "uvicon-mic-off": "e691",
    "uvicon-calendar": "e65c",
    "uvicon-trash": "e623",
    "uvicon-trash-fill": "e6ce",
    "uvicon-play-left": "e6bf",
    "uvicon-play-right": "e6b3",
    "uvicon-minus": "e614",
    "uvicon-plus": "e625",
    "uvicon-info-circle": "e69f",
    "uvicon-info-circle-fill": "e6a7",
    "uvicon-question-circle": "e622",
    "uvicon-question-circle-fill": "e6bc",
    "uvicon-close": "e65a",
    "uvicon-checkmark": "e64a",
    "uvicon-checkmark-circle": "e643",
    "uvicon-checkmark-circle-fill": "e668",
    "uvicon-setting": "e602",
    "uvicon-setting-fill": "e6d0",
    "uvicon-heart": "e6a2",
    "uvicon-heart-fill": "e68b",
    "uvicon-camera": "e642",
    "uvicon-camera-fill": "e650",
    "uvicon-more-circle": "e69e",
    "uvicon-more-circle-fill": "e684",
    "uvicon-chat": "e656",
    "uvicon-chat-fill": "e63f",
    "uvicon-bag": "e647",
    "uvicon-error-circle": "e66e",
    "uvicon-error-circle-fill": "e655",
    "uvicon-close-circle": "e64e",
    "uvicon-close-circle-fill": "e666",
    "uvicon-share": "e629",
    "uvicon-share-fill": "e6bb",
    "uvicon-share-square": "e6c4",
    "uvicon-shopping-cart": "e6cb",
    "uvicon-shopping-cart-fill": "e630",
    "uvicon-bell": "e651",
    "uvicon-bell-fill": "e604",
    "uvicon-list": "e690",
    "uvicon-list-dot": "e6a9",
    "uvicon-zhifubao-circle-fill": "e617",
    "uvicon-weixin-circle-fill": "e6cd",
    "uvicon-weixin-fill": "e620",
    "uvicon-qq-fill": "e608",
    "uvicon-qq-circle-fill": "e6b9",
    "uvicon-moments-circel-fill": "e6c2",
    "uvicon-moments": "e6a0",
    "uvicon-car": "e64f",
    "uvicon-car-fill": "e648",
    "uvicon-warning-fill": "e6c7",
    "uvicon-warning": "e6c1",
    "uvicon-clock-fill": "e64b",
    "uvicon-clock": "e66c",
    "uvicon-edit-pen": "e65d",
    "uvicon-edit-pen-fill": "e679",
    "uvicon-email": "e673",
    "uvicon-email-fill": "e683",
    "uvicon-minus-circle": "e6a5",
    "uvicon-plus-circle": "e603",
    "uvicon-plus-circle-fill": "e611",
    "uvicon-file-text": "e687",
    "uvicon-file-text-fill": "e67f",
    "uvicon-pushpin": "e6d1",
    "uvicon-pushpin-fill": "e6b6",
    "uvicon-grid": "e68c",
    "uvicon-grid-fill": "e698",
    "uvicon-play-circle": "e6af",
    "uvicon-play-circle-fill": "e62a",
    "uvicon-pause-circle-fill": "e60c",
    "uvicon-pause": "e61c",
    "uvicon-pause-circle": "e696",
    "uvicon-gift-fill": "e6b0",
    "uvicon-gift": "e680",
    "uvicon-kefu-ermai": "e660",
    "uvicon-server-fill": "e610",
    "uvicon-coupon-fill": "e64c",
    "uvicon-coupon": "e65f",
    "uvicon-integral": "e693",
    "uvicon-integral-fill": "e6b1",
    "uvicon-home-fill": "e68e",
    "uvicon-home": "e67b",
    "uvicon-account": "e63a",
    "uvicon-account-fill": "e653",
    "uvicon-thumb-down-fill": "e628",
    "uvicon-thumb-down": "e60a",
    "uvicon-thumb-up": "e612",
    "uvicon-thumb-up-fill": "e62c",
    "uvicon-lock-fill": "e6a6",
    "uvicon-lock-open": "e68d",
    "uvicon-lock-opened-fill": "e6a1",
    "uvicon-lock": "e69d",
    "uvicon-red-packet": "e6c3",
    "uvicon-photo-fill": "e6b4",
    "uvicon-photo": "e60d",
    "uvicon-volume-off-fill": "e6c8",
    "uvicon-volume-off": "e6bd",
    "uvicon-volume-fill": "e624",
    "uvicon-volume": "e605",
    "uvicon-download": "e670",
    "uvicon-arrow-up-fill": "e636",
    "uvicon-arrow-down-fill": "e638",
    "uvicon-play-left-fill": "e6ae",
    "uvicon-play-right-fill": "e6ad",
    "uvicon-arrow-downward": "e634",
    "uvicon-arrow-leftward": "e63b",
    "uvicon-arrow-rightward": "e644",
    "uvicon-arrow-upward": "e641",
    "uvicon-arrow-down": "e63e",
    "uvicon-arrow-right": "e63c",
    "uvicon-arrow-left": "e646",
    "uvicon-arrow-up": "e633",
    "uvicon-skip-back-left": "e6c5",
    "uvicon-skip-forward-right": "e61f",
    "uvicon-arrow-left-double": "e637",
    "uvicon-man": "e675",
    "uvicon-woman": "e626",
    "uvicon-en": "e6b8",
    "uvicon-twitte": "e607",
    "uvicon-twitter-circle-fill": "e6cf"
  };
  const props$2 = {
    props: {
      // 图标类名
      name: {
        type: String,
        default: ""
      },
      // 图标颜色，可接受主题色
      color: {
        type: String,
        default: "#606266"
      },
      // 字体大小，单位px
      size: {
        type: [String, Number],
        default: "16px"
      },
      // 是否显示粗体
      bold: {
        type: Boolean,
        default: false
      },
      // 点击图标的时候传递事件出去的index（用于区分点击了哪一个）
      index: {
        type: [String, Number],
        default: null
      },
      // 触摸图标时的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义扩展前缀，方便用户扩展自己的图标库
      customPrefix: {
        type: String,
        default: "uvicon"
      },
      // 图标右边或者下面的文字
      label: {
        type: [String, Number],
        default: ""
      },
      // label的位置，只能右边或者下边
      labelPos: {
        type: String,
        default: "right"
      },
      // label的大小
      labelSize: {
        type: [String, Number],
        default: "15px"
      },
      // label的颜色
      labelColor: {
        type: String,
        default: "#606266"
      },
      // label与图标的距离
      space: {
        type: [String, Number],
        default: "3px"
      },
      // 图片的mode
      imgMode: {
        type: String,
        default: ""
      },
      // 用于显示图片小图标时，图片的宽度
      width: {
        type: [String, Number],
        default: ""
      },
      // 用于显示图片小图标时，图片的高度
      height: {
        type: [String, Number],
        default: ""
      },
      // 用于解决某些情况下，让图标垂直居中的用途
      top: {
        type: [String, Number],
        default: 0
      },
      // 是否阻止事件传播
      stop: {
        type: Boolean,
        default: false
      },
      ...(_i = (_h = uni.$uv) == null ? void 0 : _h.props) == null ? void 0 : _i.icon
    }
  };
  const uvIcon_vue_vue_type_style_index_0_scoped_f7944de9_lang = "";
  const _sfc_main$4 = {
    name: "uv-icon",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$2],
    data() {
      return {
        colorType: ["primary", "success", "info", "error", "warning"]
      };
    },
    computed: {
      uClasses() {
        let classes = [];
        classes.push(this.customPrefix);
        classes.push(this.customPrefix + "-" + this.name);
        if (this.color && this.colorType.includes(this.color))
          classes.push("uv-icon__icon--" + this.color);
        return classes;
      },
      iconStyle() {
        let style = {};
        style = {
          fontSize: this.$uv.addUnit(this.size),
          lineHeight: this.$uv.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$uv.addUnit(this.top)
        };
        if (this.color && !this.colorType.includes(this.color))
          style.color = this.color;
        return style;
      },
      // 判断传入的name属性，是否图片路径，只要带有"/"均认为是图片形式
      isImg() {
        const isBase64 = this.name.indexOf("data:") > -1 && this.name.indexOf("base64") > -1;
        return this.name.indexOf("/") !== -1 || isBase64;
      },
      imgStyle() {
        let style = {};
        style.width = this.width ? this.$uv.addUnit(this.width) : this.$uv.addUnit(this.size);
        style.height = this.height ? this.$uv.addUnit(this.height) : this.$uv.addUnit(this.size);
        return style;
      },
      // 通过图标名，查找对应的图标
      icon() {
        const code2 = icons["uvicon-" + this.name];
        return code2 ? unescape(`%u${code2}`) : ["uvicon"].indexOf(this.customPrefix) > -1 ? this.name : "";
      }
    },
    methods: {
      clickHandler(e2) {
        this.$emit("click", this.index);
        this.stop && this.preventEvent(e2);
      }
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_image = index$q;
    const _component_v_uni_text = index$i;
    const _component_v_uni_view = index$g;
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      class: vue.normalizeClass(["uv-icon", ["uv-icon--" + _ctx.labelPos]]),
      onClick: $options.clickHandler
    }, {
      default: vue.withCtx(() => [
        $options.isImg ? (vue.openBlock(), vue.createBlock(_component_v_uni_image, {
          key: 0,
          class: "uv-icon__img",
          src: _ctx.name,
          mode: _ctx.imgMode,
          style: vue.normalizeStyle([$options.imgStyle, _ctx.$uv.addStyle(_ctx.customStyle)])
        }, null, 8, ["src", "mode", "style"])) : (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
          key: 1,
          class: vue.normalizeClass(["uv-icon__icon", $options.uClasses]),
          style: vue.normalizeStyle([$options.iconStyle, _ctx.$uv.addStyle(_ctx.customStyle)]),
          "hover-class": _ctx.hoverClass
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString($options.icon),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["class", "style", "hover-class"])),
        vue.createCommentVNode(' 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示 '),
        _ctx.label !== "" ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
          key: 2,
          class: "uv-icon__label",
          style: vue.normalizeStyle({
            color: _ctx.labelColor,
            fontSize: _ctx.$uv.addUnit(_ctx.labelSize),
            marginLeft: _ctx.labelPos == "right" ? _ctx.$uv.addUnit(_ctx.space) : 0,
            marginTop: _ctx.labelPos == "bottom" ? _ctx.$uv.addUnit(_ctx.space) : 0,
            marginRight: _ctx.labelPos == "left" ? _ctx.$uv.addUnit(_ctx.space) : 0,
            marginBottom: _ctx.labelPos == "top" ? _ctx.$uv.addUnit(_ctx.space) : 0
          })
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString(_ctx.label),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["style"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onClick", "class"]);
  }
  const uvIcon = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4], ["__scopeId", "data-v-f7944de9"]]);
  const uvPopup_vue_vue_type_style_index_0_scoped_fcbcb35e_lang = "";
  const _sfc_main$3 = {
    name: "uv-popup",
    mixins: [mpMixin, mixin],
    emits: ["change", "maskClick"],
    props: {
      // 弹出层类型，可选值，top: 顶部弹出层；bottom：底部弹出层；center：全屏弹出层
      // message: 消息提示 ; dialog : 对话框
      mode: {
        type: String,
        default: "center"
      },
      // 动画时长，单位ms
      duration: {
        type: [String, Number],
        default: 300
      },
      // 层级
      zIndex: {
        type: [String, Number],
        default: 10075
      },
      bgColor: {
        type: String,
        default: "#ffffff"
      },
      safeArea: {
        type: Boolean,
        default: true
      },
      // 是否显示遮罩
      overlay: {
        type: Boolean,
        default: true
      },
      // 点击遮罩是否关闭弹窗
      closeOnClickOverlay: {
        type: Boolean,
        default: true
      },
      // 遮罩的透明度，0-1之间
      overlayOpacity: {
        type: [Number, String],
        default: 0.4
      },
      // 自定义遮罩的样式
      overlayStyle: {
        type: [Object, String],
        default: ""
      },
      // 是否为iPhoneX留出底部安全距离
      safeAreaInsetBottom: {
        type: Boolean,
        default: true
      },
      // 是否留出顶部安全距离（状态栏高度）
      safeAreaInsetTop: {
        type: Boolean,
        default: false
      },
      // 是否显示关闭图标
      closeable: {
        type: Boolean,
        default: false
      },
      // 自定义关闭图标位置，top-left为左上角，top-right为右上角，bottom-left为左下角，bottom-right为右下角
      closeIconPos: {
        type: String,
        default: "top-right"
      },
      // mode=center，也即中部弹出时，是否使用缩放模式
      zoom: {
        type: Boolean,
        default: true
      },
      round: {
        type: [Number, String],
        default: 0
      }
    },
    watch: {
      /**
       * 监听type类型
       */
      type: {
        handler: function(type2) {
          if (!this.config[type2])
            return;
          this[this.config[type2]](true);
        },
        immediate: true
      },
      isDesktop: {
        handler: function(newVal) {
          if (!this.config[newVal])
            return;
          this[this.config[this.mode]](true);
        },
        immediate: true
      },
      // H5 下禁止底部滚动
      showPopup(show) {
        document.getElementsByTagName("body")[0].style.overflow = show ? "hidden" : "visible";
      }
    },
    data() {
      return {
        ani: [],
        showPopup: false,
        showTrans: false,
        popupWidth: 0,
        popupHeight: 0,
        config: {
          top: "top",
          bottom: "bottom",
          center: "center",
          left: "left",
          right: "right",
          message: "top",
          dialog: "center",
          share: "bottom"
        },
        transitionStyle: {
          position: "fixed",
          left: 0,
          right: 0
        },
        maskShow: true,
        mkclick: true,
        popupClass: this.isDesktop ? "fixforpc-top" : "top"
      };
    },
    computed: {
      isDesktop() {
        return this.popupWidth >= 500 && this.popupHeight >= 500;
      },
      bg() {
        if (this.bgColor === "" || this.bgColor === "none" || this.$uv.getPx(this.round) > 0) {
          return "transparent";
        }
        return this.bgColor;
      },
      contentStyle() {
        const style = {};
        if (this.bgColor) {
          style.backgroundColor = this.bg;
        }
        if (this.round) {
          const value = this.$uv.addUnit(this.round);
          style.backgroundColor = this.bgColor;
          if (this.mode === "top") {
            style.borderBottomLeftRadius = value;
            style.borderBottomRightRadius = value;
          } else if (this.mode === "bottom") {
            style.borderTopLeftRadius = value;
            style.borderTopRightRadius = value;
          } else if (this.mode === "center") {
            style.borderRadius = value;
          }
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    components: {
      uvTransition,
      uvSafeBottom,
      uvOverlay,
      uvStatusBar,
      uvIcon,
      keypress
    },
    // TODO vue3
    unmounted() {
      this.setH5Visible();
    },
    created() {
      this.messageChild = null;
      this.clearPropagation = false;
    },
    methods: {
      setH5Visible() {
        document.getElementsByTagName("body")[0].style.overflow = "visible";
      },
      /**
       * 公用方法，不显示遮罩层
       */
      closeMask() {
        this.maskShow = false;
      },
      // TODO nvue 取消冒泡
      clear(e2) {
        e2.stopPropagation();
        this.clearPropagation = true;
      },
      open(direction) {
        if (this.showPopup) {
          return;
        }
        let innerType = [
          "top",
          "center",
          "bottom",
          "left",
          "right",
          "message",
          "dialog",
          "share"
        ];
        if (!(direction && innerType.indexOf(direction) !== -1)) {
          direction = this.mode;
        }
        if (!this.config[direction]) {
          return this.$uv.error(`缺少类型：${direction}`);
        }
        this[this.config[direction]]();
        this.$emit("change", {
          show: true,
          type: direction
        });
      },
      close(type2) {
        this.showTrans = false;
        this.$emit("change", {
          show: false,
          type: this.mode
        });
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.showPopup = false;
        }, 300);
      },
      // TODO 处理冒泡事件，头条的冒泡事件有问题 ，先这样兼容
      touchstart() {
        this.clearPropagation = false;
      },
      onTap() {
        if (this.clearPropagation) {
          this.clearPropagation = false;
          return;
        }
        this.$emit("maskClick");
        if (!this.closeOnClickOverlay)
          return;
        this.close();
      },
      /**
       * 顶部弹出样式处理
       */
      top(type2) {
        this.popupClass = this.isDesktop ? "fixforpc-top" : "top";
        this.ani = ["slide-top"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          left: 0,
          right: 0,
          backgroundColor: this.bg
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
        this.$nextTick(() => {
          if (this.messageChild && this.mode === "message") {
            this.messageChild.timerClose();
          }
        });
      },
      /**
       * 底部弹出样式处理
       */
      bottom(type2) {
        this.popupClass = "bottom";
        this.ani = ["slide-bottom"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: this.bg
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      /**
       * 中间弹出样式处理
       */
      center(type2) {
        this.popupClass = "center";
        this.ani = this.zoom ? ["zoom-in", "fade"] : ["fade"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          display: "flex",
          flexDirection: "column",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0,
          justifyContent: "center",
          alignItems: "center"
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      left(type2) {
        this.popupClass = "left";
        this.ani = ["slide-left"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          left: 0,
          bottom: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      right(type2) {
        this.popupClass = "right";
        this.ani = ["slide-right"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          bottom: 0,
          right: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      }
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_overlay = vue.resolveComponent("uv-overlay");
    const _component_uv_status_bar = vue.resolveComponent("uv-status-bar");
    const _component_uv_safe_bottom = vue.resolveComponent("uv-safe-bottom");
    const _component_uv_icon = vue.resolveComponent("uv-icon");
    const _component_v_uni_view = index$g;
    const _component_uv_transition = vue.resolveComponent("uv-transition");
    const _component_keypress = vue.resolveComponent("keypress");
    return $data.showPopup ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      key: 0,
      class: vue.normalizeClass(["uv-popup", [$data.popupClass, $options.isDesktop ? "fixforpc-z-index" : ""]]),
      style: vue.normalizeStyle([{ zIndex: $props.zIndex }])
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, { onTouchstart: $options.touchstart }, {
          default: vue.withCtx(() => [
            vue.createCommentVNode(" 遮罩层 "),
            $data.maskShow && $props.overlay ? (vue.openBlock(), vue.createBlock(_component_uv_overlay, {
              key: "1",
              show: $data.showTrans,
              duration: $props.duration,
              "custom-style": $props.overlayStyle,
              opacity: $props.overlayOpacity,
              zIndex: $props.zIndex,
              onClick: $options.onTap
            }, null, 8, ["show", "duration", "custom-style", "opacity", "zIndex", "onClick"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(_component_uv_transition, {
              key: "2",
              mode: $data.ani,
              name: "content",
              "custom-style": $data.transitionStyle,
              duration: $props.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  class: vue.normalizeClass(["uv-popup__content", [$data.popupClass]]),
                  style: vue.normalizeStyle([$options.contentStyle]),
                  onClick: $options.clear
                }, {
                  default: vue.withCtx(() => [
                    $props.safeAreaInsetTop ? (vue.openBlock(), vue.createBlock(_component_uv_status_bar, { key: 0 })) : vue.createCommentVNode("v-if", true),
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
                    $props.safeAreaInsetBottom ? (vue.openBlock(), vue.createBlock(_component_uv_safe_bottom, { key: 1 })) : vue.createCommentVNode("v-if", true),
                    $props.closeable ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                      key: 2,
                      onClick: vue.withModifiers($options.close, ["stop"]),
                      class: vue.normalizeClass(["uv-popup__content__close", ["uv-popup__content__close--" + $props.closeIconPos]]),
                      "hover-class": "uv-popup__content__close--hover",
                      "hover-stay-time": "150"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_uv_icon, {
                          name: "close",
                          color: "#909399",
                          size: "18",
                          bold: ""
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["onClick", "class"])) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 3
                  /* FORWARDED */
                }, 8, ["style", "class", "onClick"])
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["mode", "custom-style", "duration", "show", "onClick"])
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["onTouchstart"]),
        $data.maskShow ? (vue.openBlock(), vue.createBlock(_component_keypress, {
          key: 0,
          onEsc: $options.onTap
        }, null, 8, ["onEsc"])) : vue.createCommentVNode("v-if", true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["class", "style"])) : vue.createCommentVNode("v-if", true);
  }
  const uvPopup = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3], ["__scopeId", "data-v-fcbcb35e"]]);
  const props$1 = {
    props: {
      // 是否展示工具条
      show: {
        type: Boolean,
        default: true
      },
      // 是否显示下边框
      showBorder: {
        type: Boolean,
        default: false
      },
      // 取消按钮的文字
      cancelText: {
        type: String,
        default: "取消"
      },
      // 确认按钮的文字
      confirmText: {
        type: String,
        default: "确认"
      },
      // 取消按钮的颜色
      cancelColor: {
        type: String,
        default: "#909193"
      },
      // 确认按钮的颜色
      confirmColor: {
        type: String,
        default: "#3c9cff"
      },
      // 标题文字
      title: {
        type: String,
        default: ""
      },
      ...(_k = (_j = uni.$uv) == null ? void 0 : _j.props) == null ? void 0 : _k.toolbar
    }
  };
  const uvToolbar_vue_vue_type_style_index_0_scoped_346a646b_lang = "";
  const _sfc_main$2 = {
    name: "uv-toolbar",
    emits: ["confirm", "cancel"],
    mixins: [mpMixin, mixin, props$1],
    methods: {
      // 点击取消按钮
      cancel() {
        this.$emit("cancel");
      },
      // 点击确定按钮
      confirm() {
        this.$emit("confirm");
      }
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_uni_text = index$i;
    const _component_v_uni_view = index$g;
    return _ctx.show ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
      key: 0,
      class: vue.normalizeClass(["uv-toolbar", { "uv-border-bottom": _ctx.showBorder }]),
      onTouchmove: vue.withModifiers(_ctx.noop, ["stop", "prevent"])
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, {
          class: "uv-toolbar__cancel__wrapper",
          "hover-class": "uv-hover-class"
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_text, {
              class: "uv-toolbar__wrapper__cancel",
              onClick: $options.cancel,
              style: vue.normalizeStyle({
                color: _ctx.cancelColor
              })
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(
                  vue.toDisplayString(_ctx.cancelText),
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            }, 8, ["onClick", "style"])
          ]),
          _: 1
          /* STABLE */
        }),
        _ctx.title ? (vue.openBlock(), vue.createBlock(_component_v_uni_text, {
          key: 0,
          class: "uv-toolbar__title uv-line-1"
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString(_ctx.title),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        })) : vue.createCommentVNode("v-if", true),
        vue.createVNode(_component_v_uni_view, {
          class: "uv-toolbar__confirm__wrapper",
          "hover-class": "uv-hover-class"
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_text, {
              class: "uv-toolbar__wrapper__confirm",
              onClick: $options.confirm,
              style: vue.normalizeStyle({
                color: _ctx.confirmColor
              })
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(
                  vue.toDisplayString(_ctx.confirmText),
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            }, 8, ["onClick", "style"])
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["class", "onTouchmove"])) : vue.createCommentVNode("v-if", true);
  }
  const uvToolbar = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2], ["__scopeId", "data-v-346a646b"]]);
  function hsbToRgb(hsb) {
    let rgb = {};
    let h = hsb.h;
    let s = hsb.s * 255 / 100;
    let v2 = hsb.b * 255 / 100;
    if (s == 0) {
      rgb.r = rgb.g = rgb.b = v2;
    } else {
      let t1 = v2;
      let t2 = (255 - s) * v2 / 255;
      let t3 = (t1 - t2) * (h % 60) / 60;
      if (h == 360)
        h = 0;
      if (h < 60) {
        rgb.r = t1;
        rgb.b = t2;
        rgb.g = t2 + t3;
      } else if (h < 120) {
        rgb.g = t1;
        rgb.b = t2;
        rgb.r = t1 - t3;
      } else if (h < 180) {
        rgb.g = t1;
        rgb.r = t2;
        rgb.b = t2 + t3;
      } else if (h < 240) {
        rgb.b = t1;
        rgb.r = t2;
        rgb.g = t1 - t3;
      } else if (h < 300) {
        rgb.b = t1;
        rgb.g = t2;
        rgb.r = t2 + t3;
      } else if (h < 360) {
        rgb.r = t1;
        rgb.g = t2;
        rgb.b = t1 - t3;
      } else {
        rgb.r = 0;
        rgb.g = 0;
        rgb.b = 0;
      }
    }
    return {
      r: Math.round(rgb.r),
      g: Math.round(rgb.g),
      b: Math.round(rgb.b)
    };
  }
  function rgbToHsb(rgb) {
    let hsb = {
      h: 0,
      s: 0,
      b: 0
    };
    let h = 0, s = 0, v2 = 0;
    let r = rgb.r, g2 = rgb.g, b = rgb.b;
    let min = Math.min(rgb.r, rgb.g, rgb.b);
    let max = Math.max(rgb.r, rgb.g, rgb.b);
    v2 = max / 255;
    if (max === 0) {
      s = 0;
    } else {
      s = 1 - min / max;
    }
    if (max === min) {
      h = 0;
    } else if (max === r && g2 >= b) {
      h = 60 * ((g2 - b) / (max - min)) + 0;
    } else if (max === r && g2 < b) {
      h = 60 * ((g2 - b) / (max - min)) + 360;
    } else if (max === g2) {
      h = 60 * ((b - r) / (max - min)) + 120;
    } else if (max === b) {
      h = 60 * ((r - g2) / (max - min)) + 240;
    }
    hsb.h = parseInt(h);
    hsb.s = parseInt(s * 100);
    hsb.b = parseInt(v2 * 100);
    return hsb;
  }
  function rgbToHex(rgb) {
    let hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];
    hex.map(function(str, i) {
      if (str.length == 1) {
        hex[i] = "0" + str;
      }
    });
    return hex.join("");
  }
  const colorList = [
    {
      r: 60,
      g: 156,
      b: 255,
      a: 1
    },
    {
      r: 245,
      g: 108,
      b: 108,
      a: 1
    },
    {
      r: 249,
      g: 174,
      b: 61,
      a: 1
    },
    {
      r: 90,
      g: 199,
      b: 37,
      a: 1
    },
    {
      r: 144,
      g: 147,
      b: 153,
      a: 1
    },
    {
      r: 48,
      g: 49,
      b: 51,
      a: 1
    },
    {
      r: 233,
      g: 30,
      b: 99,
      a: 1
    },
    {
      r: 156,
      g: 39,
      b: 176,
      a: 1
    },
    {
      r: 103,
      g: 58,
      b: 183,
      a: 1
    },
    {
      r: 63,
      g: 81,
      b: 181,
      a: 1
    },
    {
      r: 0,
      g: 188,
      b: 212,
      a: 1
    },
    {
      r: 0,
      g: 150,
      b: 136,
      a: 1
    },
    {
      r: 139,
      g: 195,
      b: 74,
      a: 1
    },
    {
      r: 205,
      g: 220,
      b: 57,
      a: 1
    },
    {
      r: 255,
      g: 235,
      b: 59,
      a: 1
    },
    {
      r: 255,
      g: 193,
      b: 7,
      a: 1
    },
    {
      r: 255,
      g: 152,
      b: 0,
      a: 1
    },
    {
      r: 255,
      g: 87,
      b: 34,
      a: 1
    },
    {
      r: 121,
      g: 85,
      b: 72,
      a: 1
    },
    {
      r: 158,
      g: 158,
      b: 158,
      a: 1
    },
    {
      r: 0,
      g: 0,
      b: 0,
      a: 0.5
    },
    {
      r: 0,
      g: 0,
      b: 0,
      a: 0
    }
  ];
  const props = {
    props: {
      // 颜色选择器初始颜色
      color: {
        type: Object,
        default: () => {
          return { r: 0, g: 0, b: 0, a: 0 };
        }
      },
      // 预制颜色
      prefabColor: {
        type: Array,
        default: () => []
      },
      // 是否允许点击遮罩关闭
      closeOnClickOverlay: {
        type: Boolean,
        default: true
      },
      // 顶部标题
      title: {
        type: String,
        default: ""
      },
      // 取消按钮的文字
      cancelText: {
        type: String,
        default: "取消"
      },
      // 确认按钮的文字
      confirmText: {
        type: String,
        default: "确定"
      },
      // 取消按钮的颜色
      cancelColor: {
        type: String,
        default: "#909193"
      },
      // 确认按钮的颜色
      confirmColor: {
        type: String,
        default: "#3c9cff"
      },
      ...(_m = (_l = uni.$uv) == null ? void 0 : _l.props) == null ? void 0 : _m.pickColor
    }
  };
  const uvPickColor_vue_vue_type_style_index_0_scoped_b5824377_lang = "";
  const _sfc_main$1 = {
    name: "uv-pick-color",
    emits: ["confirm", "cancel", "close", "change"],
    mixins: [mpMixin, mixin, props],
    computed: {
      pointerStyle() {
        const style = {};
        style.top = this.$uv.addUnit(this.site[0].top - 8);
        style.left = this.$uv.addUnit(this.site[0].left - 8);
        return style;
      }
    },
    data() {
      return {
        showToolbar: false,
        // rgba 颜色
        rgba: {
          r: 0,
          g: 0,
          b: 0,
          a: 1
        },
        // hsb 颜色
        hsb: {
          h: 0,
          s: 0,
          b: 0
        },
        site: [
          {
            top: 0,
            left: 0
          },
          {
            left: 0
          },
          {
            left: 0
          }
        ],
        index: 0,
        bgcolor: {
          r: 255,
          g: 0,
          b: 0,
          a: 1
        },
        hex: "#000000",
        mode: true,
        colorList
      };
    },
    watch: {
      prefabColor(newVal) {
        this.colorList = newVal;
      }
    },
    created() {
      this.rgba = this.color;
      if (this.prefabColor.length)
        this.colorList = this.prefabColor;
    },
    components: {
      uvPopup,
      uvToolbar
    },
    methods: {
      open() {
        this.$refs.pickerColorPopup.open();
        this.showToolbar = true;
        this.$nextTick(async () => {
          await this.$uv.sleep(350);
          this.getSelectorQuery();
        });
      },
      close() {
        this.$refs.pickerColorPopup.close();
      },
      popupChange(e2) {
        if (!e2.show)
          this.$emit("close");
      },
      // 点击工具栏的取消按钮
      cancelHandler() {
        this.$emit("cancel");
        this.close();
      },
      // 点击工具栏的确定按钮
      confirmHandler() {
        this.$emit("confirm", {
          rgba: this.rgba,
          hex: this.hex
        });
        this.close();
      },
      // 初始化
      init() {
        this.hsb = rgbToHsb(this.rgba);
        this.setValue(this.rgba);
      },
      async getSelectorQuery() {
        const data = await this.$uvGetRect(".drag-box", true);
        this.position = data;
        this.setColorBySelect(this.rgba);
      },
      // 选择模式
      select() {
        this.mode = !this.mode;
      },
      touchstart(e2, index2) {
        const { clientX, clientY } = e2.touches[0];
        this.pageX = clientX;
        this.pageY = clientY;
        this.setPosition(clientX, clientY, index2);
      },
      touchmove(e2, index2) {
        const { clientX, clientY } = e2.touches[0];
        this.moveX = clientX;
        this.moveY = clientY;
        this.setPosition(clientX, clientY, index2);
      },
      touchend(e2, index2) {
      },
      /**
       * 设置位置
       */
      setPosition(x, y, index2) {
        this.index = index2;
        const { top, left, width, height } = this.position[index2];
        this.site[index2].left = Math.max(0, Math.min(parseInt(x - left), width));
        if (index2 === 0) {
          this.site[index2].top = Math.max(0, Math.min(parseInt(y - top), height));
          this.hsb.s = parseInt(100 * this.site[index2].left / width);
          this.hsb.b = parseInt(100 - 100 * this.site[index2].top / height);
          this.setColor();
          this.setValue(this.rgba);
        } else {
          this.setControl(index2, this.site[index2].left);
        }
      },
      /**
       * 设置 rgb 颜色
       */
      setColor() {
        const rgb = hsbToRgb(this.hsb);
        this.rgba.r = rgb.r;
        this.rgba.g = rgb.g;
        this.rgba.b = rgb.b;
      },
      /**
       * 设置二进制颜色
       * @param {Object} rgb
       */
      setValue(rgb) {
        this.hex = `#${rgbToHex(rgb)}`;
      },
      setControl(index2, x) {
        const { top, left, width, height } = this.position[index2];
        if (index2 === 1) {
          this.hsb.h = parseInt(360 * x / width);
          this.bgcolor = hsbToRgb({
            h: this.hsb.h,
            s: 100,
            b: 100
          });
          this.setColor();
        } else {
          this.rgba.a = +(x / width).toFixed(1);
        }
        this.setValue(this.rgba);
      },
      setColorBySelect(getrgb) {
        const { r, g: g2, b, a: a2 } = getrgb;
        let rgb = {};
        rgb = {
          r: r ? parseInt(r) : 0,
          g: g2 ? parseInt(g2) : 0,
          b: b ? parseInt(b) : 0,
          a: a2 ? a2 : 0
        };
        this.rgba = rgb;
        this.hsb = rgbToHsb(rgb);
        this.changeViewByHsb();
      },
      changeViewByHsb() {
        const [a2, b, c] = this.position;
        this.site[0].left = parseInt(this.hsb.s * a2.width / 100);
        this.site[0].top = parseInt((100 - this.hsb.b) * a2.height / 100);
        this.setColor(this.hsb.h);
        this.setValue(this.rgba);
        this.bgcolor = hsbToRgb({
          h: this.hsb.h,
          s: 100,
          b: 100
        });
        this.site[1].left = this.hsb.h / 360 * b.width;
        this.site[2].left = this.rgba.a * c.width;
      }
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_toolbar = vue.resolveComponent("uv-toolbar");
    const _component_v_uni_view = index$g;
    const _component_v_uni_text = index$i;
    const _component_uv_popup = vue.resolveComponent("uv-popup");
    return vue.openBlock(), vue.createBlock(_component_uv_popup, {
      ref: "pickerColorPopup",
      mode: "bottom",
      "close-on-click-overlay": _ctx.closeOnClickOverlay,
      onChange: $options.popupChange
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uv_toolbar, {
              show: $data.showToolbar,
              cancelColor: _ctx.cancelColor,
              confirmColor: _ctx.confirmColor,
              cancelText: _ctx.cancelText,
              confirmText: _ctx.confirmText,
              title: _ctx.title,
              "show-border": true,
              onCancel: $options.cancelHandler,
              onConfirm: $options.confirmHandler
            }, null, 8, ["show", "cancelColor", "confirmColor", "cancelText", "confirmText", "title", "onCancel", "onConfirm"]),
            vue.createVNode(_component_v_uni_view, {
              class: "uv-pick-color__box",
              style: vue.normalizeStyle({
                background: `rgb(${$data.bgcolor.r},${$data.bgcolor.g},${$data.bgcolor.b})`
              })
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  class: "uv-pick-color__box__bg drag-box",
                  onClick: _cache[0] || (_cache[0] = vue.withModifiers(($event) => $options.touchstart($event, 0), ["stop", "prevent"])),
                  onTouchstart: _cache[1] || (_cache[1] = vue.withModifiers(($event) => $options.touchstart($event, 0), ["stop", "prevent"])),
                  onTouchmove: _cache[2] || (_cache[2] = vue.withModifiers(($event) => $options.touchmove($event, 0), ["stop", "prevent"])),
                  onTouchend: _cache[3] || (_cache[3] = vue.withModifiers(($event) => $options.touchend($event, 0), ["stop", "prevent"]))
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__box__bg-mask" }),
                    vue.createVNode(_component_v_uni_view, {
                      class: "uv-pick-color__box__bg-pointer",
                      style: vue.normalizeStyle([$options.pointerStyle])
                    }, null, 8, ["style"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["style"]),
            vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__control" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__control__alpha" }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_view, {
                      class: "uv-pick-color__control__alpha--color",
                      style: vue.normalizeStyle({
                        background: `rgba(${$data.rgba.r},${$data.rgba.g},${$data.rgba.b},${$data.rgba.a})`
                      })
                    }, null, 8, ["style"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__control__item" }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_view, {
                      class: "uv-pick-color__control__item__drag drag-box",
                      onClick: _cache[4] || (_cache[4] = vue.withModifiers(($event) => $options.touchstart($event, 1), ["stop"])),
                      onTouchstart: _cache[5] || (_cache[5] = vue.withModifiers(($event) => $options.touchstart($event, 1), ["stop"])),
                      onTouchmove: _cache[6] || (_cache[6] = vue.withModifiers(($event) => $options.touchmove($event, 1), ["stop"])),
                      onTouchend: _cache[7] || (_cache[7] = vue.withModifiers(($event) => $options.touchend($event, 1), ["stop"]))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__control__item__drag--hue" }),
                        vue.createVNode(_component_v_uni_view, {
                          class: "uv-pick-color__control__item__drag--circle",
                          style: vue.normalizeStyle({
                            left: _ctx.$uv.getPx($data.site[1].left - 10, true)
                          })
                        }, null, 8, ["style"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_view, {
                      class: "uv-pick-color__control__item__drag drag-box",
                      onClick: _cache[8] || (_cache[8] = vue.withModifiers(($event) => $options.touchstart($event, 2), ["stop"])),
                      onTouchstart: _cache[9] || (_cache[9] = vue.withModifiers(($event) => $options.touchstart($event, 2), ["stop"])),
                      onTouchmove: _cache[10] || (_cache[10] = vue.withModifiers(($event) => $options.touchmove($event, 2), ["stop"])),
                      onTouchend: _cache[11] || (_cache[11] = vue.withModifiers(($event) => $options.touchend($event, 2), ["stop"]))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__control__item__drag--alpha" }),
                        vue.createVNode(_component_v_uni_view, {
                          class: "uv-pick-color__control__item__drag--circle",
                          style: vue.normalizeStyle({
                            left: _ctx.$uv.getPx($data.site[2].left - 10, true)
                          })
                        }, null, 8, ["style"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, {
                  class: "uv-pick-color__result__select",
                  "hover-class": "uv-hover-class",
                  onClick: vue.withModifiers($options.select, ["stop"])
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_text, { class: "text" }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("切换")
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_text, { class: "text" }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("模式")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["onClick"]),
                $data.mode ? (vue.openBlock(), vue.createBlock(_component_v_uni_view, {
                  key: 0,
                  class: "uv-pick-color__result__item"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--value uv-border" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_text, null, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString($data.hex),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--hex" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_text, null, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode("HEX")
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })) : (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 1 },
                  [
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--value uv-border" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString($data.rgba.r),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--rgba" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode("R")
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__gap" }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--value uv-border" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString($data.rgba.g),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--rgba" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode("G")
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__gap" }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--value uv-border" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString($data.rgba.b),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--rgba" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode("B")
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__gap" }),
                    vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--value uv-border" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString($data.rgba.a),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__result__item--rgba" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_v_uni_text, null, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode("A")
                              ]),
                              _: 1
                              /* STABLE */
                            })
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ],
                  64
                  /* STABLE_FRAGMENT */
                ))
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_v_uni_view, { class: "uv-pick-color__prefab" }, {
              default: vue.withCtx(() => [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.colorList, (item, index2) => {
                    return vue.openBlock(), vue.createBlock(
                      _component_v_uni_view,
                      {
                        class: "uv-pick-color__prefab__item",
                        key: index2
                      },
                      {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_v_uni_view, {
                            class: "uv-pick-color__prefab__item--color",
                            style: vue.normalizeStyle({
                              background: `rgba(${item.r},${item.g},${item.b},${item.a})`
                            }),
                            onClick: vue.withModifiers(($event) => $options.setColorBySelect(item), ["stop"])
                          }, null, 8, ["style", "onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["close-on-click-overlay", "onChange"]);
  }
  const uvPickColor = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1], ["__scopeId", "data-v-b5824377"]]);
  const uniForm_vue_vue_type_style_index_0_scoped_2846014b_lang = "";
  const _sfc_main = {
    data() {
      return {
        model: {
          name: "",
          sex: "",
          likeFruit: "",
          intro: "",
          payType: "支付宝",
          agreement: false,
          region: "",
          goodsType: "",
          phone: "",
          code: "",
          password: "",
          rePassword: "",
          remember: false,
          photo: ""
        },
        selectList: [
          {
            value: "电子产品",
            label: "电子产品"
          },
          {
            value: "服装",
            label: "服装"
          },
          {
            value: "工艺品",
            label: "工艺品"
          }
        ],
        rules: {
          name: [
            {
              required: true,
              message: "请输入姓名",
              trigger: "blur"
            },
            {
              min: 3,
              max: 5,
              message: "姓名长度在3到5个字符",
              trigger: ["change", "blur"]
            },
            {
              // 此为同步验证，可以直接返回true或者false，如果是异步验证，稍微不同，见下方说明
              validator: (rule, value, callback) => {
                return this.$u.test.chinese(value);
              },
              message: "姓名必须为中文",
              // 触发器可以同时用blur和change，二者之间用英文逗号隔开
              trigger: ["change", "blur"]
            }
            // 异步验证，用途：比如用户注册时输入完账号，后端检查账号是否已存在
            // {
            // 	trigger: ['blur'],
            // 	// 异步验证需要通过调用callback()，并且在里面抛出new Error()
            // 	// 抛出的内容为需要提示的信息，和其他方式的message属性的提示一样
            // 	asyncValidator: (rule, value, callback) => {
            // 		this.$u.post('/ebapi/public_api/index').then(res => {
            // 			// 如果验证出错，需要在callback()抛出new Error('错误提示信息')
            // 			if(res.error) {
            // 				callback(new Error('姓名重复'));
            // 			} else {
            // 				// 如果没有错误，也要执行callback()回调
            // 				callback();
            // 			}
            // 		})
            // 	},
            // }
          ],
          sex: [
            {
              required: true,
              message: "请选择性别",
              trigger: "change"
            }
          ],
          intro: [
            {
              required: true,
              message: "请填写简介"
            },
            {
              min: 5,
              message: "简介不能少于5个字",
              trigger: "change"
            },
            // 正则校验示例，此处用正则校验是否中文，此处仅为示例，因为uView有this.$u.test.chinese可以判断是否中文
            {
              pattern: /^[\u4e00-\u9fa5]+$/gi,
              message: "简介只能为中文",
              trigger: "change"
            }
          ],
          likeFruit: [
            {
              required: true,
              message: "请选择您喜欢的水果",
              trigger: "change",
              type: "array"
            }
          ],
          payType: [
            {
              required: true,
              message: "请选择任意一种支付方式",
              trigger: "change"
            }
          ],
          region: [
            {
              required: true,
              message: "请选择地区",
              trigger: "change"
            }
          ],
          goodsType: [
            {
              required: true,
              message: "请选择商品类型",
              trigger: "change"
            }
          ],
          phone: [
            {
              required: true,
              message: "请输入手机号",
              trigger: ["change", "blur"]
            },
            {
              validator: (rule, value, callback) => {
                return this.$u.test.mobile(value);
              },
              message: "手机号码不正确",
              // 触发器可以同时用blur和change，二者之间用英文逗号隔开
              trigger: ["change", "blur"]
            }
          ],
          code: [
            {
              required: true,
              message: "请输入验证码",
              trigger: ["change", "blur"]
            },
            {
              type: "number",
              message: "验证码只能为数字",
              trigger: ["change", "blur"]
            }
          ],
          password: [
            {
              required: true,
              message: "请输入密码",
              trigger: ["change", "blur"]
            },
            {
              // 正则不能含有两边的引号
              pattern: /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]+\S{5,12}$/,
              message: "需同时含有字母和数字，长度在6-12之间",
              trigger: ["change", "blur"]
            }
          ],
          rePassword: [
            {
              required: true,
              message: "请重新输入密码",
              trigger: ["change", "blur"]
            },
            {
              validator: (rule, value, callback) => {
                return value === this.model.password;
              },
              message: "两次输入的密码不相等",
              trigger: ["change", "blur"]
            }
          ]
        },
        border: false,
        check: false,
        selectStatus: "close",
        checkboxList: [
          {
            name: "荔枝",
            checked: false,
            disabled: false
          },
          {
            name: "香蕉",
            checked: false,
            disabled: false
          },
          {
            name: "橙子",
            checked: false,
            disabled: false
          },
          {
            name: "草莓",
            checked: false,
            disabled: false
          }
        ],
        radioList: [
          {
            name: "支付宝",
            checked: true,
            disabled: false
          },
          {
            name: "微信",
            checked: false,
            disabled: false
          },
          {
            name: "银联",
            checked: false,
            disabled: false
          },
          {
            name: "现金",
            checked: false,
            disabled: false
          }
        ],
        radio: "支付宝",
        actionSheetList: [
          {
            text: "男"
          },
          {
            text: "女"
          },
          {
            text: "保密"
          }
        ],
        actionSheetShow: false,
        pickerShow: false,
        selectShow: false,
        radioCheckWidth: "auto",
        radioCheckWrap: false,
        labelPosition: "left",
        codeTips: "",
        errorType: ["message"],
        // u-swipe-action
        list: [
          {
            id: 1,
            title: "长安回望绣成堆，山顶千门次第开，一骑红尘妃子笑，无人知是荔枝来",
            images: "https://cdn.uviewui.com/uview/common/logo.png",
            show: false
          },
          {
            id: 2,
            title: "新丰绿树起黄埃，数骑渔阳探使回，霓裳一曲千峰上，舞破中原始下来",
            images: "https://cdn.uviewui.com/uview/common/logo.png",
            show: false
          },
          {
            id: 3,
            title: "登临送目，正故国晚秋，天气初肃。千里澄江似练，翠峰如簇",
            images: "https://cdn.uviewui.com/uview/common/logo.png",
            show: false
          }
        ],
        disabled: false,
        btnWidth: 180,
        show: false,
        options: [
          {
            text: "收藏",
            style: {
              backgroundColor: "#007aff"
            }
          },
          {
            text: "删除",
            style: {
              backgroundColor: "#dd524d"
            }
          }
        ]
      };
    },
    onLoad() {
    },
    computed: {
      borderCurrent() {
        return this.border ? 0 : 1;
      }
    },
    onReady() {
      this.$refs.uForm.setRules(this.rules);
    },
    components: {
      uvPickColor
    },
    methods: {
      openColor() {
        this.$refs.pickerColor.open();
      },
      confirm(e2) {
        console.log("confirm", e2);
      },
      submit() {
        this.$refs.uForm.validate((valid) => {
          if (valid) {
            if (!this.model.agreement)
              return this.$u.toast("请勾选协议");
            console.log("验证通过");
          } else {
            console.log("验证失败");
          }
        });
      },
      // 点击actionSheet回调
      actionSheetCallback(index2) {
        hideKeyboard();
        this.model.sex = this.actionSheetList[index2].text;
      },
      // checkbox选择发生变化
      checkboxGroupChange(e2) {
        this.model.likeFruit = e2;
      },
      // radio选择发生变化
      radioGroupChange(e2) {
        this.model.payType = e2;
      },
      // 勾选版权协议
      checkboxChange(e2) {
        this.model.agreement = e2.value;
      },
      // 选择地区回调
      regionConfirm(e2) {
        this.model.region = e2.province.label + "-" + e2.city.label + "-" + e2.area.label;
      },
      // 选择商品类型回调
      selectConfirm(e2) {
        this.model.goodsType = "";
        e2.map((val, index2) => {
          this.model.goodsType += this.model.goodsType == "" ? val.label : "-" + val.label;
        });
      },
      borderChange(index2) {
        this.border = !index2;
      },
      radioCheckboxChange(index2) {
        if (index2 == 0) {
          this.radioCheckWrap = false;
          this.radioCheckWidth = "auto";
        } else if (index2 == 1) {
          this.radioCheckWrap = true;
          this.radioCheckWidth = "auto";
        } else if (index2 == 2) {
          this.radioCheckWrap = false;
          this.radioCheckWidth = "50%";
        }
      },
      labelPositionChange(index2) {
        this.labelPosition = index2 == 0 ? "left" : "top";
      },
      codeChange(text2) {
        this.codeTips = text2;
      },
      // 获取验证码
      getCode() {
        if (this.$refs.uCode.canGetCode) {
          showLoading({
            title: "正在获取验证码",
            mask: true
          });
          setTimeout(() => {
            hideLoading();
            this.$u.toast("验证码已发送");
            this.$refs.uCode.start();
          }, 2e3);
        } else {
          this.$u.toast("倒计时结束后再发送");
        }
      },
      errorChange(index2) {
        if (index2 == 0)
          this.errorType = ["message"];
        if (index2 == 1)
          this.errorType = ["toast"];
        if (index2 == 2)
          this.errorType = ["border-bottom"];
        if (index2 == 3)
          this.errorType = ["border"];
      },
      click(index2, index1) {
        if (index1 == 1) {
          this.list.splice(index2, 1);
          this.$u.toast(`删除了第${index2}个cell`);
        } else {
          this.list[index2].show = false;
          this.$u.toast(`收藏成功`);
        }
      },
      // 如果打开一个的时候，不需要关闭其他，则无需实现本方法
      open(index2) {
        this.list[index2].show = true;
        this.list.map((val, idx) => {
          if (index2 != idx)
            this.list[idx].show = false;
        });
      }
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_pick_color = vue.resolveComponent("uv-pick-color");
    const _component_v_uni_button = index$x;
    const _component_v_uni_view = index$g;
    const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$1);
    const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3);
    const _component_u_checkbox = resolveEasycom(vue.resolveDynamicComponent("u-checkbox"), __easycom_4$1);
    const _component_u_checkbox_group = resolveEasycom(vue.resolveDynamicComponent("u-checkbox-group"), __easycom_5);
    const _component_u_radio = resolveEasycom(vue.resolveDynamicComponent("u-radio"), __easycom_6);
    const _component_u_radio_group = resolveEasycom(vue.resolveDynamicComponent("u-radio-group"), __easycom_7);
    const _component_u_upload = resolveEasycom(vue.resolveDynamicComponent("u-upload"), __easycom_8);
    const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_9);
    const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_10);
    const _component_u_action_sheet = resolveEasycom(vue.resolveDynamicComponent("u-action-sheet"), __easycom_11);
    const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_12);
    const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_13);
    const _component_u_verification_code = resolveEasycom(vue.resolveDynamicComponent("u-verification-code"), __easycom_14);
    const _component_u_subsection = resolveEasycom(vue.resolveDynamicComponent("u-subsection"), __easycom_15);
    const _component_v_uni_image = index$q;
    const _component_v_uni_text = index$i;
    const _component_u_swipe_action = resolveEasycom(vue.resolveDynamicComponent("u-swipe-action"), __easycom_18);
    return vue.openBlock(), vue.createBlock(_component_v_uni_view, { class: "wrap" }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_v_uni_view, { class: "pickerColor" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uv_pick_color, {
              ref: "pickerColor",
              onConfirm: $options.confirm
            }, null, 8, ["onConfirm"]),
            vue.createVNode(_component_v_uni_button, { onClick: $options.openColor }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("打开颜色选择器")
              ]),
              _: 1
              /* STABLE */
            }, 8, ["onClick"])
          ]),
          _: 1
          /* STABLE */
        }),
        vue.createVNode(_component_u_form, {
          model: $data.model,
          rules: $data.rules,
          ref: "uForm",
          errorType: $data.errorType
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_u_form_item, {
              leftIconStyle: { color: "#888", fontSize: "32rpx" },
              "left-icon": "account",
              "label-width": "120",
              "label-position": $data.labelPosition,
              label: "姓名",
              prop: "name"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  border: $data.border,
                  placeholder: "请输入姓名",
                  modelValue: $data.model.name,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.model.name = $event),
                  type: "text"
                }, null, 8, ["border", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "性别",
              prop: "sex"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  border: $data.border,
                  type: "select",
                  "select-open": $data.actionSheetShow,
                  modelValue: $data.model.sex,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.model.sex = $event),
                  placeholder: "请选择性别",
                  onClick: _cache[2] || (_cache[2] = ($event) => $data.actionSheetShow = true)
                }, null, 8, ["border", "select-open", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "简介",
              prop: "intro"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  type: "textarea",
                  border: $data.border,
                  placeholder: "请填写简介",
                  modelValue: $data.model.intro,
                  "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.model.intro = $event)
                }, null, 8, ["border", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "密码",
              prop: "password"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  "password-icon": true,
                  border: $data.border,
                  type: "password",
                  modelValue: $data.model.password,
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.model.password = $event),
                  placeholder: "请输入密码"
                }, null, 8, ["border", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "确认密码",
              "label-width": "150",
              prop: "rePassword"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  border: $data.border,
                  type: "password",
                  modelValue: $data.model.rePassword,
                  "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.model.rePassword = $event),
                  placeholder: "请确认密码"
                }, null, 8, ["border", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "水果品种",
              "label-width": "150",
              prop: "likeFruit"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_checkbox_group, {
                  onChange: $options.checkboxGroupChange,
                  width: $data.radioCheckWidth,
                  wrap: $data.radioCheckWrap
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.checkboxList, (item, index2) => {
                        return vue.openBlock(), vue.createBlock(_component_u_checkbox, {
                          modelValue: item.checked,
                          "onUpdate:modelValue": ($event) => item.checked = $event,
                          key: index2,
                          name: item.name
                        }, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(item.name),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["modelValue", "onUpdate:modelValue", "name"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["onChange", "width", "wrap"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "结算方式",
              prop: "payType",
              "label-width": "150"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_radio_group, {
                  modelValue: $data.radio,
                  "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.radio = $event),
                  onChange: $options.radioGroupChange,
                  width: $data.radioCheckWidth,
                  wrap: $data.radioCheckWrap
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.radioList, (item, index2) => {
                        return vue.openBlock(), vue.createBlock(_component_u_radio, {
                          shape: "circle",
                          key: index2,
                          name: item.name
                        }, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(item.name),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["name"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue", "onChange", "width", "wrap"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "所在地区",
              prop: "region",
              "label-width": "150"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  border: $data.border,
                  type: "select",
                  "select-open": $data.pickerShow,
                  modelValue: $data.model.region,
                  "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.model.region = $event),
                  placeholder: "请选择地区",
                  onClick: _cache[8] || (_cache[8] = ($event) => $data.pickerShow = true)
                }, null, 8, ["border", "select-open", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "商品类型",
              prop: "goodsType",
              "label-width": "150"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  border: $data.border,
                  type: "select",
                  "select-open": $data.selectShow,
                  modelValue: $data.model.goodsType,
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.model.goodsType = $event),
                  placeholder: "请选择商品类型",
                  onClick: _cache[10] || (_cache[10] = ($event) => $data.selectShow = true)
                }, null, 8, ["border", "select-open", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              rightIconStyle: { color: "#888", fontSize: "32rpx" },
              "right-icon": "kefu-ermai",
              "label-position": $data.labelPosition,
              label: "手机号码",
              prop: "phone",
              "label-width": "150"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_input, {
                  border: $data.border,
                  placeholder: "请输入手机号",
                  modelValue: $data.model.phone,
                  "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.model.phone = $event),
                  type: "number"
                }, null, 8, ["border", "modelValue"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"]),
            vue.createVNode(_component_u_form_item, {
              "label-position": $data.labelPosition,
              label: "上传图片",
              prop: "photo",
              "label-width": "150"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_upload, {
                  width: "160",
                  height: "160"
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["label-position"])
          ]),
          _: 1
          /* STABLE */
        }, 8, ["model", "rules", "errorType"]),
        vue.createVNode(_component_v_uni_view, { class: "agreement" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_u_checkbox, {
              modelValue: $data.check,
              "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.check = $event),
              onChange: $options.checkboxChange
            }, null, 8, ["modelValue", "onChange"]),
            vue.createVNode(_component_v_uni_view, { class: "agreement-text" }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(" 勾选代表同意uView的版权协议 ")
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        }),
        vue.createVNode(_component_u_button, { onClick: $options.submit }, {
          default: vue.withCtx(() => [
            vue.createTextVNode("提交")
          ]),
          _: 1
          /* STABLE */
        }, 8, ["onClick"]),
        vue.createVNode(_component_u_action_sheet, {
          list: $data.actionSheetList,
          modelValue: $data.actionSheetShow,
          "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.actionSheetShow = $event),
          onClick: $options.actionSheetCallback
        }, null, 8, ["list", "modelValue", "onClick"]),
        vue.createVNode(_component_u_select, {
          mode: "single-column",
          list: $data.selectList,
          modelValue: $data.selectShow,
          "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.selectShow = $event),
          onConfirm: $options.selectConfirm
        }, null, 8, ["list", "modelValue", "onConfirm"]),
        vue.createVNode(_component_u_picker, {
          mode: "region",
          modelValue: $data.pickerShow,
          "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.pickerShow = $event),
          onConfirm: $options.regionConfirm
        }, null, 8, ["modelValue", "onConfirm"]),
        vue.createVNode(_component_u_verification_code, {
          seconds: "60",
          ref: "uCode",
          onChange: $options.codeChange
        }, null, 8, ["onChange"]),
        vue.createVNode(_component_v_uni_view, { class: "u-config-wrap" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_v_uni_view, { class: "u-config-title u-border-bottom" }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(" 参数配置 ")
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_v_uni_view, { class: "u-config-item" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, { class: "u-item-title" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("label对齐方式")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_subsection, {
                  list: ["左边", "上方"],
                  onChange: $options.labelPositionChange
                }, null, 8, ["onChange"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_v_uni_view, { class: "u-config-item" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, { class: "u-item-title" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("边框")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_subsection, {
                  current: $options.borderCurrent,
                  list: ["显示", "隐藏"],
                  onChange: $options.borderChange
                }, null, 8, ["current", "onChange"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_v_uni_view, { class: "u-config-item" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, { class: "u-item-title" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("radio、checkbox样式")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_subsection, {
                  list: ["自适应", "换行", "50%宽度"],
                  onChange: $options.radioCheckboxChange
                }, null, 8, ["onChange"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_v_uni_view, { class: "u-config-item" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_uni_view, { class: "u-item-title" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("错误提示方式")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_subsection, {
                  list: ["message", "toast", "下划线", "输入框"],
                  onChange: $options.errorChange
                }, null, 8, ["onChange"])
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        }),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.list, (item, index2) => {
            return vue.openBlock(), vue.createBlock(_component_u_swipe_action, {
              show: item.show,
              index: index2,
              key: item.id,
              onClick: $options.click,
              onOpen: $options.open,
              options: $data.options,
              "btn-width": $data.btnWidth
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(
                  _component_v_uni_view,
                  { class: "item u-border-bottom" },
                  {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_v_uni_image, {
                        mode: "aspectFill",
                        src: item.images
                      }, null, 8, ["src"]),
                      vue.createCommentVNode(" 此层wrap在此为必写的，否则可能会出现标题定位错误 "),
                      vue.createVNode(
                        _component_v_uni_view,
                        { class: "title-wrap" },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(
                              _component_v_uni_text,
                              { class: "title u-line-2" },
                              {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString(item.title),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["show", "index", "onClick", "onOpen", "options", "btn-width"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      _: 1
      /* STABLE */
    });
  }
  const InfoCard = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__scopeId", "data-v-2846014b"]]);
  registerRenderer(InfoCard, {
    type: "uni-form",
    framework: "vue3"
  });
  window.__uniConfig = {
    router: {}
  };
});
